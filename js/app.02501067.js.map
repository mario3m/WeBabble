{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?9745","webpack:///./src/store/modules/user.js","webpack:///./src/views/Home.vue?cbb6","webpack:///./src/store/Constants.js","webpack:///./src/store/AuxMethods.js","webpack:///./src/App.vue?7ab5","webpack:///src/App.vue","webpack:///./src/App.vue?0bd2","webpack:///./src/App.vue","webpack:///./src/views/Home.vue?ecea","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?f351","webpack:///./src/views/Home.vue","webpack:///./src/store/modules/events.js","webpack:///./src/store/modules/chats.js","webpack:///./src/store/modules/ranking.js","webpack:///./src/store/store.js","webpack:///./src/router.js","webpack:///./src/registerServiceWorker.js","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js","webpack:///./src/store/modules/permissions.js","webpack:///./src/assets/WhiteLogoWeBabble.png","webpack:///./src/store/modules/users.js","webpack:///./src/I18NMessages.js","webpack:///./src/i18n.js","webpack:///./src/store/modules/database.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","Vue","use","Vuex","alreadyAccountUsernameError","i18n","genericError","gettingCurrentLocationError","namespaced","database","users","state","id","lastName","email","chats","role","username","birthDate","gender","description","avgRating","numRatings","knownLanguages","languagesToLearn","profileImg","location","ratings","genderOptions","img","defaultProfileImg","languageOptions","getters","getName","getID","getLastName","getEmail","getRole","getChats","getProfile","getUsername","getBirthDate","getGender","getDescription","getProfileImg","getAvgRating","getNumRatings","getKnownLanguages","getLanguagesToLearn","getGenderImgByID","getGenderDefaultProfileImgByUserGender","getGenderOptionsAsArray","text","keys","map","getLanguageImgByID","getLanguageOptionsAsArray","getLanguageFromLanguageOptionsByID","getLocation","getRatings","getRating","mutations","setIDe","setName","setLastName","setEmail","setRole","setChats","setAccount","accountInfo","setUsername","setBirthDate","setGender","setDescription","setAvgRating","setNumRatings","setKnownLanguages","setLanguagesToLearn","setProfileImg","setRatings","setRating","rating","setProfile","profileInfo","resetState","setLocation","actions","initState","context","dispatch","commit","catch","createAccount","log","generateNotificationToken","updateAccountNameAndLastName","updateAccountEmail","updateAccountPassword","password","login","isUserLogged","isIt","logout","root","sendEmailVerification","sendPasswordResetEmail","checkIfEmailIsVerified","isVerified","checkIfUsernameIsAlreadyRegistered","createProfile","isAlreadyRegistered","updateProfile","setLanguages","nextTick","url","setRegistrationCompleted","getRegistrationState","checkRegistrationState","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","ratingsInfo","rateUser","currentLocation","RULE_MIN_VALUE_CHARACTERS_USERNAME","RULE_MAX_VALUE_CHARACTERS_USERNAME","RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_MIN_VALUE_AGE","RANKING_PAGE_SIZE","MAX_RANKING_PAGE_SIZE","SEARCHED_USERS_PAGE_SIZE","EVENTS_PAGE_SIZE","MIN_USER_AGE","MAX_USER_AGE","IMG_USER_PROFILE_HEADER","IMG_EMOJI_SAD_FACE","arraysContainSameElements","arr1","arr2","Array","isArray","arr1_aux","concat","sort","arr2_aux","shuffle","array","Math","random","emptyCallback","angleInRad","x","PI","generateChatID","id1","id2","chatID","_vm","this","_h","$createElement","_c","_self","staticStyle","_e","staticRenderFns","component","VApp","staticClass","attrs","_v","_s","sloganText","on","$event","$router","createAnAccountText","toLogInText","VBtn","VContainer","user","permissions","events","eventsToShowIDs","mapEventsToShowIDs","lastEventShowed","languageInvolvedFilter","eventsTab","getLanguageInvolvedFilter","getFilters","languageInvolved","getEvents","getEventsTab","getEventByID","getEventsToShow","eventsToShow","forEach","eventID","getMapEventsToShow","getLastEventShowed","amIParticipating","found","participants","find","participantID","userID","setLanguageInvolvedFilter","setEventsTab","resetEventsToShowIDs","addEvent","addParticipantToEvent","findIndex","removeParticipantFromEvent","searchedUserIndex","addEventToShow","addMapEventToShow","setEventsToShowIDs","setLastEventShowed","filters","limit","Constants","newLastEventShowed","userLocation","distance","eventLocation","coordinates","_lat","_long","eventNonFormattedLoc","haversine","isEmpty","getAllEvents","eventsRetrieved","getEventParticipants","userProfiles","chatsToShowIDs","chatListListener","chatMessagesListeners","usernameFilter","getChatByID","getChatsToShowIDs","getChatMessagesByChatID","messages","getUnreadMessagesByChatID","myID","unreadMessages","sender","read","getUnreadMessages","count","getChatsToShow","chatsToShow","auxChat","lastMessage","lowNotMe","getUserByChatID","toLowerCase","includes","getNotReadMessagesCountByChatID","addChatMessagesListener","listener","addChat","chat","set","updateChatMessages","index","mMessage","sortChatMessagesByDate","compareChatMessagesByDate","a","b","dateA","date","dateB","addChatToShow","sortChatsToShowByLastMessage","compareChatsByLastMessageDate","chatALastMessageDate","chatBLastMessageDate","setUsernameFilter","setChatListListener","pushChatMessages","mp","alreadyAdded","manageChatListChange","cch","manageChatMessagesChange","chatMessages","newMessages","modifiedMessagesToRead","modifiedMessagesDated","change","setChatMessagesToReadByChatID","sendNewChatMessage","messageText","createChatListeners","lastUserShowed","rankingUsers","rankingUsersIDs","rankingUser","getRankingUsersToShow","rus","uid","ru","score","getLastUserShowed","getRankedUserByIndex","getRankingUsers","setRankingUser","setRankingUsers","resetRankingUsers","resetRankingUsersIDs","setLastUserShowed","addRankingUserID","rankingUserID","top100Users","userIndex","getPagedRankingUsers","newUserShowed","pageEnding","areThereMoreRankingUsersToShow","Store","ranking","appInfoLoaded","getAppInfoLoaded","setAppInfoLoaded","getLoggedUser","resetAppState","$i18n","initAppInfo","Router","router","base","process","routes","path","redirect","Home","meta","requiresAuth","children","menu","beforeEach","to","from","next","currentUser","firebase","auth","matched","some","record","startsWith","store","registrationState","register","ready","registered","cached","updatefound","updated","offline","Vuetify","icons","iconfont","theme","themes","light","primary","secondary","thirdary","accent","info","success","warning","VueChatScroll","VueI18n","VueGoogleMaps","load","libraries","config","productionTip","app","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","db","firestore","settings","timestampsInSnapshots","enablePersistence","experimentalTabSynchronization","storage","messaging","onAuthStateChanged","vuetify","render","h","App","$mount","isGeolocationPermissionGranted","isPushNotificationPermissionGranted","getIsGeolocationPermissionGranted","getIsPushNotificationPermissionGranted","setIsGeolocationPermissionGranted","setIsPushNotificationPermissionGranted","checkForGeolocationPermission","query","AuxMethods","onchange","checkForPushNotificationsPermission","isPermissionGranted","searchedUsersIDs","genderFilter","ageRangeFilter","languageFilter","filterBy","knownLanguage","languageToLearn","searchByUsernameFilter","maxDistanceFilter","maxDistanceRanges","maxDistanceRangesText","locationFilter","nearbyUsersIDs","distanceSearchFilter","getUsers","getLanguagesByUserID","getGenderFilter","getAgeRangeFilter","getLanguageFilter","getSearchByUsernameFilter","getMaxDistanceFilter","getMaxDistanceRanges","getMaxDistanceRangesText","getUserByID","getNearbyUsersIDs","getNearbyUsersIDsLength","areThereFiltersOn","filtersOn","ageRange","language","maxDistance","getSearchedUsers","searchedUsersReturn","getSearchedUsersIDsLength","getSearchedUsersIDs","setUsers","setGenderFilter","setAgeRangeFilter","setNearbyUsersIDs","setLanguageFilter","setLocationFilter","setSearchByUsernameFilter","setMaxDistanceFilter","addUser","addSearchedUserID","resetSearchedUsersIDs","addRating","userTo","prev","newAvgRating","ids","areThereMore","newLastUserShowed","data2","isEmpty2","areThereMoreNearbyUsers","allIDs","idsToGetProfiles","isValid","currentDate","Date","setFullYear","getFullYear","setHours","toDate","languageToLearnIndex","lang","knownLanguageIndex","registrationCompleted","getNearbyUsersProfiles","usersAdded","resetSearchedUsers","setFilters","resetFilters","es","ERROR_GENERIC_PROBLEM","ERROR_GENERIC_CONNECTION_PROBLEM","ERROR_GENERIC_DATABASE_PROBLEM","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME","ERROR_WRONG_EMAIL_PASSWORD_COMBINATION","ERROR_UPLOADING_IMAGE","ERROR_SOMETHING_HAPPENED","ERROR_API_FILEREADER_NOT_SUPPORTED","ERROR_PASSWORDS_DONT_MATCH","ERROR_TOO_MANY_REQUESTS","ERROR_TEXT_WRONG_PASSWORD","ERROR_NO_ACCOUNT_WITH_THIS_EMAIL","ERROR_GETTING_CURRENT_LOCATION","ERROR_COULD_NOT_SET_YOUR_RATING","ERROR_PROBLEM_RETRIEVING_RANKING","ERROR_PROBLEM_GETTING_CURRENT_LOCATION","ERROR_PROBLEM_GETTING_NEARBY_USERS","ERROR_PROBLEM_GETTING_EVENTS","RULE_TEXT_MANDATORY_FIELD","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING","RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD","RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER","ASK_FOR_IMAGE_SELECTION","TEXT_VERIFICATION_EMAIL_SENT_TO","TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE","TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE","TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGES","TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE","TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE","TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGE","TEXT_LANGUAGE","TEXT_GENDER","TEXT_DISTANCE","TEXT_AGE","TEXT_FILTER_BY_MOTHER_LANGUAGE","TEXT_FILTER_BY_LANGUAGE_TO_LEARN","TEXT_SEARCH","TEXT_NO_FIT_USERS_TO_LIST","TEXT_FILTERS","TEXT_RATE_USER","TEXT_YOU","TEXT_CANCEL","TEXT_RATE","TEXT_REMOVE","TEXT_NO_LIMIT","TEXT_REMOVE_FILTERS","TEXT_YOUR_PROFILE","TEXT_EDIT","TEXT_EDIT_PROFILE","TEXT_USERS","TEXT_TO_FILTER","TEXT_EVENTS","TEXT_RANKING","TEXT_CHATS","TEXT_CLOSE","TEXT_SHOW_USERS","TEXT_OF","TEXT_CREATE_YOUR_ACCOUNT","TEXT_CREATE_AN_ACCOUNT","TEXT_NAME","TEXT_LASTNAME","TEXT_EMAIL","TEXT_EMAIL_DIRECTION","TEXT_PASSWORD","TEXT_REPEAT_PASSWORD","TEXT_REGISTER","TEXT_REGISTER_NOW","TEXT_ALREADY_HAVE_AN_ACCOUNT","TEXT_ACCESS_NOW","TEXT_ACCESS_TO_YOUR_ACCOUNT","TEXT_VERIFY_YOUR_EMAIL","TEXT_USERNAME","TEXT_FILL_YOUR_PROFILE","TEXT_BIRTHDATE","TEXT_TELL_US_A_LITTLE_ABOUT_YOU","TEXT_TO_CONTINUE","TEXT_YOUR_LANGUAGES","TEXT_WOMAN","TEXT_MAN","TEXT_ANY","TEXT_OTHER","TEXT_CHOOSE_YOUR_PROFILE_IMAGE","TEXT_PROFILE_IMAGE","TEXT_EMAIL_NOT_VALID","TEXT_USERNAME_NOT_VALID","TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD","TEXT_STILL_DONT_HAVE_AN_ACCOUNT","TEXT_TO_LOG_IN","TEXT_TO_LOG_OUT","TEXT_RESEND_EMAIL","TEXT_YOU_ARE_ABOUT_TO_LOG_OUT","TEXT_CONFIRM","TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT","TEXT_PROFILE_INFO","TEXT_LANGUAGES_TO_PRACTICE","TEXT_SAVE","TEXT_SETTINGS","TEXT_ACCOUNT","TEXT_PERMISSIONS","TEXT_NAME_AND_LASTNAME","TEXT_CHANGE_NAME_AND_LASTNAME","TEXT_CHANGE_EMAIL","TEXT_UPDATE","TEXT_VERIFY_YOUR_PASSWORD","TEXT_REMOVE_ACCOUNT","TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE","TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED","TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED","TEXT_CHANGE_PASSWORD","TEXT_CURRENT_PASSWORD","TEXT_NEW_PASSWORD","TEXT_CONFIRM_PASSWORD","TEXT_UPDATE_PASSWORD","TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD","TEXT_RESET_PASSWORD","TEXT_RESET_PASSWORD_INSTRUCTIONS","TEXT_SPACE_YEARS","TEXT_PARTICIPANTS","TEXT_NO_PARTICIPANTS_YET","TEXT_VERIFICATION_EMAIL_SENT","TEXT_NO_USERS_MATCH_SEARCH","TEXT_NO_EVENTS_AVAILABLE","TEXT_NO_CHATS_AVAILABLE","TEXT_NO_CHATS_MATCH_SEARCH","TEXT_LANGUAGE_INVOLVED_IN_EVENTS","TEXT_LOCATION_PERMISSION_NOT_GRANTED","TEXT_CONFIRM_EVENT_PARTICIPATION","TEXT_CANCEL_EVENT_PARTICIPATION","TEXT_APP_LANGUAGE","TEXT_LANGUAGE_OF_APP","TEXT_LANGUAGE_DE","TEXT_LANGUAGE_ZH","TEXT_LANGUAGE_ES","TEXT_LANGUAGE_FR","TEXT_LANGUAGE_EN","TEXT_LANGUAGE_IT","TEXT_LANGUAGE_JA","TEXT_LANGUAGE_PT","TEXT_LANGUAGE_ALL","TEXT_WE_BABBLE_SLOGAN","TEXT_LOCATION","TEXT_NOTIFICATIONS","TEXT_GRANTED","TEXT_NOT_GRANTED","en","dateTimeFormats","abbrMonth","month","short","year","day","long","weekday","hour","minute","hour12","localeLanguage","locale","I18NMessages","genericDatabaseError","alreadyRegisteredEmailError","emailPasswordCombinationError","tooManyRequestsError","uploadingImageError","isUserAuth","firestoreDB","collection","doc","tokens","merge","askForMessagingPermission","requestPermission","generatePushNotificationToken","getToken","token","localStorage","getItem","currentMessageToken","update","FieldValue","arrayUnion","getAccount","createAccountListener","docRef","onSnapshot","formattedUser","createUserWithEmailAndPassword","setPersistance","setPersistence","Auth","Persistence","LOCAL","signInWithEmailAndPassword","arrayRemove","signOut","isEmailVerified","reload","emailVerified","updateAccountData","batch","infoToUpdate","updateEmail","updatePassword","getProfileByUID","getMultipleProfilesByUID","getProfileByUsername","where","querySnapshot","size","docs","uploadProfileImg","uploadImg","storageDB","ref","child","putString","getDownloadURL","updateUserLocation","geoFirestore","GeoFirestore","GeoPoint","exists","newRating","delete","isNextUsersPageEmpty","page","orderBy","startAfter","endAt","documentSnapshots","searchedUser","newDocs","dataDocs","getNextUsersPage","startAt","getNearbyUserIDs","geofirestore","queryNearbyUsers","near","center","radius","snapshot","getUsersWithSimilarUsername","getNextEventsPage","getEventsToBeCelebrated","isNextEventsPageEmpty","createChatMessagesListener","docChanges","formattedChatMessages","setMessagesToRead","addMessagesToChat","newMessage","serverTimestamp","newChat","getTop100RankingUsers","getUserRankingPositionByID"],"mappings":"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","file":"js/app.02501067.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-280e35b4\":\"62188993\",\"chunk-2cb12f8f\":\"e8628d4b\",\"chunk-751629f2\":\"2ae68d4a\",\"chunk-fd58f02a\":\"04f33ddf\",\"chunk-3030d936\":\"601940b0\",\"chunk-21b5aa80\":\"fd34ed6d\",\"chunk-347cda0c\":\"7b219aee\",\"chunk-149ca684\":\"c312784a\",\"chunk-4ab0690a\":\"5269a9a7\",\"chunk-2ab413da\":\"3fb0c845\",\"chunk-b42009f6\":\"9856b4ec\",\"chunk-5a535783\":\"f740f451\",\"chunk-622f8ab8\":\"06c6d001\",\"chunk-047f451e\":\"4d654498\",\"chunk-0ad883c1\":\"1c0df5a8\",\"chunk-b94650e2\":\"ad18e1c0\",\"chunk-37c497f4\":\"810305c7\",\"chunk-20f43660\":\"7d859c0a\",\"chunk-21974a50\":\"8ce7fdcd\",\"chunk-9f6958ae\":\"1df27a0e\",\"chunk-ff55b83e\":\"297e5891\",\"chunk-49302222\":\"baf4463a\",\"chunk-583efd79\":\"6f4ed929\",\"chunk-b838f74c\":\"bc4d8800\",\"chunk-e380ce90\":\"3c93b379\",\"chunk-95e0ac1e\":\"368d2a29\",\"chunk-59bad21b\":\"c6929d2e\",\"chunk-0b007d3a\":\"85daf05c\",\"chunk-25986f28\":\"0352990b\",\"chunk-116c160c\":\"549820ab\",\"chunk-fd745e64\":\"36eb9b51\",\"chunk-7926c4f8\":\"034c0c12\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-280e35b4\":1,\"chunk-2cb12f8f\":1,\"chunk-751629f2\":1,\"chunk-fd58f02a\":1,\"chunk-3030d936\":1,\"chunk-21b5aa80\":1,\"chunk-347cda0c\":1,\"chunk-149ca684\":1,\"chunk-4ab0690a\":1,\"chunk-2ab413da\":1,\"chunk-b42009f6\":1,\"chunk-5a535783\":1,\"chunk-622f8ab8\":1,\"chunk-047f451e\":1,\"chunk-0ad883c1\":1,\"chunk-b94650e2\":1,\"chunk-37c497f4\":1,\"chunk-20f43660\":1,\"chunk-21974a50\":1,\"chunk-9f6958ae\":1,\"chunk-ff55b83e\":1,\"chunk-49302222\":1,\"chunk-583efd79\":1,\"chunk-b838f74c\":1,\"chunk-e380ce90\":1,\"chunk-95e0ac1e\":1,\"chunk-59bad21b\":1,\"chunk-0b007d3a\":1,\"chunk-25986f28\":1,\"chunk-116c160c\":1,\"chunk-fd745e64\":1,\"chunk-7926c4f8\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-280e35b4\":\"a18fcf01\",\"chunk-2cb12f8f\":\"18ea9c54\",\"chunk-751629f2\":\"c3849757\",\"chunk-fd58f02a\":\"8704c37e\",\"chunk-3030d936\":\"2ac6643f\",\"chunk-21b5aa80\":\"1d440bae\",\"chunk-347cda0c\":\"eefe45bc\",\"chunk-149ca684\":\"8cea3ea7\",\"chunk-4ab0690a\":\"8cea3ea7\",\"chunk-2ab413da\":\"8cea3ea7\",\"chunk-b42009f6\":\"8cea3ea7\",\"chunk-5a535783\":\"9a7436ff\",\"chunk-622f8ab8\":\"dc35a825\",\"chunk-047f451e\":\"bff4b736\",\"chunk-0ad883c1\":\"bff4b736\",\"chunk-b94650e2\":\"b9163a27\",\"chunk-37c497f4\":\"b69ea1e5\",\"chunk-20f43660\":\"14eaa1ab\",\"chunk-21974a50\":\"964a5b22\",\"chunk-9f6958ae\":\"076ea886\",\"chunk-ff55b83e\":\"ad2e3bd1\",\"chunk-49302222\":\"71f89d8e\",\"chunk-583efd79\":\"2ed52535\",\"chunk-b838f74c\":\"a0cb59c5\",\"chunk-e380ce90\":\"bff4b736\",\"chunk-95e0ac1e\":\"7eee233e\",\"chunk-59bad21b\":\"3c176f56\",\"chunk-0b007d3a\":\"650191b5\",\"chunk-25986f28\":\"650191b5\",\"chunk-116c160c\":\"650191b5\",\"chunk-fd745e64\":\"94914940\",\"chunk-7926c4f8\":\"6d8851e2\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database.js\";\r\nimport users from \"./users.js\";\r\nimport i18n from \"../../i18n\";\r\n\r\nlet alreadyAccountUsernameError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME');\r\nlet genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nlet gettingCurrentLocationError = i18n.t('messages.ERROR_GETTING_CURRENT_LOCATION');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----         ACCOUNTS & PROFILES INFO         -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        users\r\n    },\r\n    state: {\r\n        /* User account*/\r\n        id: null,\r\n        name: null,\r\n        lastName: null,\r\n        email: null,\r\n        chats: [],\r\n        role: 'user',\r\n\r\n        /* User profile */\r\n        // 1st part\r\n        username: null,\r\n        birthDate: null,\r\n        gender: null,\r\n        description: null,\r\n        avgRating: null,\r\n        numRatings: null,\r\n        // 2nd part\r\n        knownLanguages: null,\r\n        languagesToLearn: null,\r\n        // 3rd part\r\n        profileImg: null,\r\n\r\n        /* Geolocation info */\r\n        location: null,\r\n\r\n        /* Ratings info */\r\n        ratings: null,\r\n\r\n        /* Constants */\r\n        genderOptions: {\r\n            \"M\": {\r\n                img: \"img/genders/male.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg',\r\n            },\r\n            \"W\": {\r\n                img: \"img/genders/female.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg',\r\n            },\r\n            \"O\": {\r\n                img: \"img/genders/other.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg',\r\n            }\r\n        },\r\n        languageOptions: {\r\n            \"de\": {\r\n                img: \"img/flags/de.svg\"\r\n            },\r\n            \"zh\": {\r\n                img: \"img/flags/zh.svg\"\r\n            },\r\n            \"es\": {\r\n                img: \"img/flags/es.svg\"\r\n            },\r\n            \"fr\": {\r\n                img: \"img/flags/fr.svg\"\r\n            },\r\n            \"en\": {\r\n                img: \"img/flags/en.svg\"\r\n            },\r\n            \"it\": {\r\n                img: \"img/flags/it.svg\"\r\n            },\r\n            \"ja\": {\r\n                img: \"img/flags/ja.svg\"\r\n            },\r\n            \"pt\": {\r\n                img: \"img/flags/pt.svg\"\r\n            },\r\n            \"all\": {\r\n                img: \"img/flags/all.svg\"\r\n            },\r\n        },\r\n    },\r\n    getters: {\r\n        getName: (state) => {\r\n            return state.name;\r\n        },\r\n        getID: (state) => {\r\n            return state.id;\r\n        },\r\n        getLastName: (state) => {\r\n            return state.lastName;\r\n        },\r\n        getEmail: (state) => {\r\n            return state.email;\r\n        },\r\n        getRole: (state) => {\r\n            return state.role;\r\n        },\r\n        getChats: (state) => {\r\n            return state.chats;\r\n        },\r\n        getProfile: (state) => {\r\n            let data = {};\r\n\r\n            if (state.username) {\r\n                data = {\r\n                    username: state.username,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.birthDate) {\r\n                data = {\r\n                    birthDate: state.birthDate,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.gender) {\r\n                data = {\r\n                    gender: state.gender,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.description) {\r\n                data = {\r\n                    description: state.description,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.profileImg) {\r\n                data = {\r\n                    profileImg: state.profileImg,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.knownLanguages) {\r\n                data = {\r\n                    knownLanguages: state.knownLanguages,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.languagesToLearn) {\r\n                data = {\r\n                    languagesToLearn: state.languagesToLearn,\r\n                    ...data\r\n                }\r\n            }\r\n\r\n            data = {\r\n                avgRating: state.avgRating,\r\n                numRatings: state.numRatings,\r\n                ...data\r\n            }\r\n\r\n            return data;\r\n        },\r\n        getUsername: (state) => {\r\n            return state.username;\r\n        },\r\n        getBirthDate: (state) => {\r\n            return state.birthDate;\r\n        },\r\n        getGender: (state) => {\r\n            return state.gender;\r\n        },\r\n        getDescription: (state) => {\r\n            return state.description;\r\n        },\r\n        getProfileImg: (state) => {\r\n            return state.profileImg;\r\n        },\r\n        getAvgRating: (state) => {\r\n            return state.avgRating;\r\n        },\r\n        getNumRatings: (state) => {\r\n            return state.numRatings;\r\n        },\r\n        getKnownLanguages: (state) => {\r\n            return state.knownLanguages;\r\n        },\r\n        getLanguagesToLearn: (state) => {\r\n            return state.languagesToLearn;\r\n        },\r\n\r\n        getGenderImgByID: (state) => (id) => {\r\n            return state.genderOptions[id].img;\r\n        },\r\n        getGenderDefaultProfileImgByUserGender: (state) => {\r\n            if (null == state.gender) {\r\n                return state.genderOptions[\"O\"].defaultProfileImg;\r\n            } else {\r\n                return state.genderOptions[state.gender].defaultProfileImg;\r\n            }\r\n        },\r\n        getGenderOptionsAsArray: (state, getters) => {\r\n            let genderOptions = {\r\n                \"M\": {\r\n                    text: i18n.t('messages.TEXT_MAN'),\r\n                },\r\n                \"W\": {\r\n                    text: i18n.t('messages.TEXT_WOMAN'),\r\n                },\r\n                \"O\": {\r\n                    text: i18n.t('messages.TEXT_OTHER'),\r\n                }\r\n            };\r\n            return Object.keys(genderOptions).map(function (id) {\r\n                let text = genderOptions[id].text;\r\n                let img = getters.getGenderImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageImgByID: (state) => (id) => {\r\n            return state.languageOptions[id].img;\r\n        },\r\n        getLanguageOptionsAsArray: (state, getters) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_DE'),\r\n                },\r\n                \"zh\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ZH'),\r\n                },\r\n                \"es\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ES'),\r\n                },\r\n                \"fr\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_FR'),\r\n                },\r\n                \"en\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_EN'),\r\n                },\r\n                \"it\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_IT'),\r\n                },\r\n                \"ja\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_JA'),\r\n                },\r\n                \"pt\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_PT'),\r\n                },\r\n                \"all\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ALL'),\r\n                },\r\n            };\r\n            return Object.keys(state.languageOptions).map(function (id) {\r\n                let text = languageOptions[id].text;\r\n                let img = getters.getLanguageImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageFromLanguageOptionsByID: (state) => (id) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_DE'),\r\n                },\r\n                \"zh\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ZH'),\r\n                },\r\n                \"es\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ES'),\r\n                },\r\n                \"fr\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_FR'),\r\n                },\r\n                \"en\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_EN'),\r\n                },\r\n                \"it\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_IT'),\r\n                },\r\n                \"ja\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_JA'),\r\n                },\r\n                \"pt\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_PT'),\r\n                },\r\n                \"all\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ALL'),\r\n                },\r\n            };\r\n\r\n            return {\r\n                ...state.languageOptions[id],\r\n                text: languageOptions[id].text\r\n            };\r\n        },\r\n        getLocation: (state) => {\r\n            return state.location;\r\n        },\r\n        getRatings: (state) => {\r\n            return state.ratings;\r\n        },\r\n        getRating: (state) => (id) => {\r\n            if (state.ratings) {\r\n                return state.ratings[id];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n    },\r\n    mutations: {\r\n        setIDe(state, id) {\r\n            state.id = id;\r\n        },\r\n        setName(state, name) {\r\n            state.name = name;\r\n        },\r\n        setLastName(state, lastName) {\r\n            state.lastName = lastName;\r\n        },\r\n        setEmail(state, email) {\r\n            state.email = email;\r\n        },\r\n        setRole(state, role) {\r\n            state.role = role;\r\n        },\r\n        setChats(state, chats) {\r\n            state.chats = chats;\r\n        },\r\n        setAccount(state, accountInfo) {\r\n            if (accountInfo.hasOwnProperty('email')) {\r\n                state.email = accountInfo.email;\r\n            }\r\n            if (accountInfo.hasOwnProperty('name')) {\r\n                state.name = accountInfo.name;\r\n            }\r\n            if (accountInfo.hasOwnProperty('lastName')) {\r\n                state.lastName = accountInfo.lastName;\r\n            }\r\n            if (accountInfo.hasOwnProperty('profileImg')) {\r\n                state.role = accountInfo.role;\r\n            }\r\n            if (accountInfo.hasOwnProperty('id')) {\r\n                state.id = accountInfo.id;\r\n            }\r\n            if (accountInfo.hasOwnProperty('chats')) {\r\n                state.chats = accountInfo.chats;\r\n            }\r\n        },\r\n        setUsername(state, username) {\r\n            state.username = username;\r\n        },\r\n        setBirthDate(state, birthDate) {\r\n            state.birthDate = birthDate;\r\n        },\r\n        setGender(state, gender) {\r\n            state.gender = gender;\r\n        },\r\n        setDescription(state, description) {\r\n            state.description = description;\r\n        },\r\n        setAvgRating(state, avgRating) {\r\n            state.avgRating = avgRating;\r\n        },\r\n        setNumRatings(state, numRatings) {\r\n            state.numRatings = numRatings;\r\n        },\r\n        setKnownLanguages(state, knownLanguages) {\r\n            state.knownLanguages = knownLanguages;\r\n        },\r\n        setLanguagesToLearn(state, languagesToLearn) {\r\n            state.languagesToLearn = languagesToLearn;\r\n        },\r\n        setProfileImg(state, profileImg) {\r\n            state.profileImg = profileImg;\r\n        },\r\n        setRatings(state, ratings) {\r\n            state.ratings = ratings;\r\n        },\r\n        setRating(state, data) {\r\n            if (state.ratings == null) {\r\n                state.ratings = {};\r\n            }\r\n            state.ratings[data.id] = data.rating;\r\n        },\r\n\r\n        setProfile(state, profileInfo) {\r\n            if (profileInfo) {\r\n\r\n                if (profileInfo.hasOwnProperty('username')) {\r\n                    state.username = profileInfo.username;\r\n                }\r\n                if (profileInfo.hasOwnProperty('birthDate')) {\r\n                    state.birthDate = profileInfo.birthDate;\r\n                }\r\n                if (profileInfo.hasOwnProperty('gender')) {\r\n                    state.gender = profileInfo.gender;\r\n                }\r\n                if (profileInfo.hasOwnProperty('description')) {\r\n                    state.description = profileInfo.description;\r\n                }\r\n                if (profileInfo.hasOwnProperty('avgRating')) {\r\n                    state.avgRating = profileInfo.avgRating;\r\n                }\r\n                if (profileInfo.hasOwnProperty('numRatings')) {\r\n                    state.numRatings = profileInfo.numRatings;\r\n                }\r\n                if (profileInfo.hasOwnProperty('knownLanguages')) {\r\n                    state.knownLanguages = profileInfo.knownLanguages;\r\n                }\r\n                if (profileInfo.hasOwnProperty('languagesToLearn')) {\r\n                    state.languagesToLearn = profileInfo.languagesToLearn;\r\n                }\r\n                if (profileInfo.hasOwnProperty('profileImg')) {\r\n                    state.profileImg = profileInfo.profileImg;\r\n                }\r\n            }\r\n        },\r\n        resetState(state) {\r\n            /* User account*/\r\n            state.id = null;\r\n            state.name = null;\r\n            state.lastName = null;\r\n            state.email = null;\r\n            state.role = 'user';\r\n            state.chats = [];\r\n\r\n            /* User profile */\r\n            // 1st part\r\n            state.username = null;\r\n            state.birthDate = null;\r\n            state.gender = null;\r\n            state.description = null;\r\n            state.avgRating = null;\r\n            state.numRatings = null;\r\n            // 2nd part\r\n            state.knownLanguages = null;\r\n            state.languagesToLearn = null;\r\n            // 3rd part\r\n            state.profileImg = null;\r\n\r\n            /* Ratings info */\r\n            state.ratings = null;\r\n\r\n            /* Geolocation info */\r\n            state.location = null;\r\n        },\r\n        setLocation(state, location) {\r\n            state.location = location;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init users state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n                        context.commit('setProfile', profileInfo);\r\n\r\n                        context.dispatch('database/getAccount')\r\n                            .then((accountInfo) => {\r\n                                context.commit('setAccount', accountInfo);\r\n                                context.dispatch('getRatings')\r\n                                    .then(() => {\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error)\r\n                                    });\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccount', data)\r\n                    .then(() => {\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                context.dispatch('database/setAccount', data)\r\n                                    .then(() => {\r\n                                        context.commit('setAccount', data);\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log('Error creating user account.');\r\n                                        reject(error)\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generateNotificationToken ~                                               >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generateNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/generatePushNotificationToken')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountNameAndLastName ~                                            >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountNameAndLastName(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountData', data)\r\n                    .then(() => {\r\n                        if (data.hasOwnProperty('name')) {\r\n                            context.commit('setName', data.name);\r\n                        }\r\n                        if (data.hasOwnProperty('lastName')) {\r\n                            context.commit('setLastName', data.lastName);\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountEmail', email)\r\n                    .then(() => {\r\n                        context.commit('setEmail', email);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword(context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountPassword', password)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log user in                                                              >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/login', data)\r\n                    .then(() => {\r\n                        context.commit('setAccount', data);\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserLogged ~                                                            >\r\n        // To determine if user is or is not logged                                    >\r\n        //----------------------------------------------------------------------------->\r\n        isUserLogged: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((isIt) => {\r\n                        resolve(isIt);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ logout ~                                                                  >\r\n        // To log user out                                                             >\r\n        //----------------------------------------------------------------------------->\r\n        logout(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/logout')\r\n                    .then(() => {\r\n                        context.dispatch('resetAppState', null, {root: true});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendEmailVerification')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending verification email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendPasswordResetEmail', email)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending password email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfEmailIsVerified ~                                                  >\r\n        // To check if email is verified                                               >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfEmailIsVerified(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isEmailVerified')\r\n                    .then((isVerified) => {\r\n                        resolve(isVerified);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if email is verified.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfUsernameIsAlreadyRegistered ~                                      >\r\n        // To check if a username is already in use                                    >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfUsernameIsAlreadyRegistered(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfileByUsername', username)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            resolve(true);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if username is already registered.');\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createProfile ~                                                           >\r\n        // To create user profile                                                      >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        createProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('checkIfUsernameIsAlreadyRegistered', data.username)\r\n                    .then((isAlreadyRegistered) => {\r\n                        if (isAlreadyRegistered) {\r\n                            reject(alreadyAccountUsernameError);\r\n                        } else {\r\n                            context.dispatch('database/setProfile', data)\r\n                                .then(() => {\r\n                                    context.commit('setUsername', data.username);\r\n                                    context.commit('setBirthDate', data.birthDate);\r\n                                    context.commit('setGender', data.gender);\r\n                                    context.commit('setDescription', data.description);\r\n                                    context.commit('setAvgRating', 0);\r\n                                    context.commit('setNumRatings', 0);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error creating user profile.');\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile data                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateProfile', data)\r\n                    .then(async () => {\r\n\r\n                        if (data.hasOwnProperty('username')) {\r\n                            context.commit('setUsername', data.username);\r\n                        }\r\n                        if (data.hasOwnProperty('description')) {\r\n                            context.commit('setDescription', data.description);\r\n                        }\r\n                        if (data.hasOwnProperty('gender')) {\r\n                            context.commit('setGender', data.gender);\r\n                        }\r\n                        if (data.hasOwnProperty('birthDate')) {\r\n                            context.commit('setBirthDate', data.birthDate);\r\n                        }\r\n                        if (data.hasOwnProperty('knownLanguages')) {\r\n                            context.commit('setKnownLanguages', data.knownLanguages);\r\n                        }\r\n                        if (data.hasOwnProperty('languagesToLearn')) {\r\n                            context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        }\r\n                        if (data.hasOwnProperty('profileImg')) {\r\n                            await context.dispatch('setProfileImg', data.profileImg).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setLanguages', data)\r\n                    .then(() => {\r\n                        context.commit('setKnownLanguages', data.knownLanguages);\r\n                        context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error setting user languages.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image                                                   >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n                Vue.nextTick(() => {\r\n\r\n                    context.dispatch('database/uploadProfileImg', img)\r\n                        .then((url) => {\r\n                            context.dispatch('database/setProfileImg', url)\r\n                                .then(() => {\r\n                                    context.commit('setProfileImg', url);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error setting user profile image.');\r\n                                    console.error(error)\r\n                                    reject(error);\r\n                                });\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('Error uploading user profile image.');\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setRegistrationCompleted', img)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error updating user registration state.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRegistrationState ~                                                    >\r\n        // To check what register info the user has already submitted                  >\r\n        //----------------------------------------------------------------------------->\r\n        getRegistrationState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n\r\n                        context.dispatch('checkRegistrationState', profileInfo)\r\n                            .then((state) => {\r\n                                context.commit('setProfile', profileInfo);\r\n                                resolve(state);\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log(error);\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkRegistrationState ~                                                  >\r\n        // To check registration state of a profile                                    >\r\n        // parameters: data {username, gender, description, avgRating, numRatings,     >\r\n        //                   knownLanguages, languagesToLearn, profileImg}             >\r\n        //----------------------------------------------------------------------------->\r\n        checkRegistrationState(context, data) {\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('checkIfEmailIsVerified')\r\n                    .then((isVerified) => {\r\n                        if (isVerified) {\r\n                            // Part 0 completed\r\n                            if (data && data.hasOwnProperty('username') && data.hasOwnProperty('gender')\r\n                                && data.hasOwnProperty('description') && data.hasOwnProperty('avgRating')\r\n                                && data.hasOwnProperty('numRatings')) {\r\n                                // Part 1 completed\r\n                                if (data.hasOwnProperty('knownLanguages') && data.hasOwnProperty('languagesToLearn')) {\r\n                                    // Part 2 completed\r\n                                    if (data.hasOwnProperty('profileImg')) {\r\n                                        // Part 3 completed\r\n                                        // Registration process completed\r\n                                        resolve('dashboard');\r\n                                    } else {\r\n                                        // State 3\r\n                                        resolve('set-your-profile-image');\r\n                                    }\r\n                                } else {\r\n                                    // State 2\r\n                                    resolve('fill-your-languages');\r\n                                }\r\n                            } else {\r\n                                // State 1\r\n                                resolve('fill-your-profile-info');\r\n                            }\r\n                        } else {\r\n                            // State 0\r\n                            resolve('email-verification');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getCurrentLocation ~                                                      >\r\n        // To get the current user location                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getCurrentLocation() {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                navigator.geolocation.getCurrentPosition(position => {\r\n                        resolve({\r\n                            lat: position.coords.latitude,\r\n                            lng: position.coords.longitude\r\n                        })\r\n                    },\r\n                    function (error) {\r\n                        console.error(error);\r\n                        reject(gettingCurrentLocationError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getRatings')\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRatings', ratingsInfo);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error retrieving user ratings.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ rateUser ~                                                                >\r\n        // To rate a user                                                              >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        rateUser(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/setRating', data)\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRating', data);\r\n                        context.commit('users/addRating', data);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        console.log('Error rating user.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get the current (or last) user location                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('getCurrentLocation')\r\n                    .then((currentLocation) => {\r\n                        context.commit('setLocation', currentLocation);\r\n                        context.dispatch('database/updateUserLocation', currentLocation)\r\n                            .then(() => {\r\n                                resolve(currentLocation);\r\n                            })\r\n                            .catch(() => {\r\n                                resolve(currentLocation);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        context.dispatch('database/getLocation')\r\n                            .then((location) => {\r\n                                context.commit('setLocation', location);\r\n                                resolve(location);\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        },\r\n\r\n    },\r\n\r\n};","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"","export default{\r\n\r\n    /* RULES */\r\n    RULE_MIN_VALUE_CHARACTERS_USERNAME: 5,\r\n    RULE_MAX_VALUE_CHARACTERS_USERNAME: 14,\r\n    RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 20,\r\n    RULE_MIN_VALUE_AGE: 16,\r\n    RANKING_PAGE_SIZE: 10,\r\n    MAX_RANKING_PAGE_SIZE: 100,\r\n    SEARCHED_USERS_PAGE_SIZE: 5, //Allways SEARCHED_USERS_PAGE_SIZE >= 2\r\n    EVENTS_PAGE_SIZE: 1,\r\n\r\n    /* DATA */\r\n    MIN_USER_AGE: 16,\r\n    MAX_USER_AGE: 100,\r\n\r\n    /* IMAGES */\r\n    IMG_USER_PROFILE_HEADER: \"img/backgrounds/user_profile_header.png\",\r\n    IMG_EMOJI_SAD_FACE: 'img/emojis/sad_face.png',\r\n}\r\n","export default {\r\n    arraysContainSameElements: function (arr1, arr2) {\r\n\r\n        if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length)\r\n            return false;\r\n\r\n        var arr1_aux = arr1.concat().sort();\r\n        var arr2_aux = arr2.concat().sort();\r\n\r\n        for (var i = 0; i < arr1_aux.length; i++) {\r\n\r\n            if (arr1_aux[i] !== arr2_aux[i])\r\n                return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    },\r\n\r\n    shuffle: function (array) {\r\n        array.sort(() => Math.random() - 0.5);\r\n    },\r\n\r\n    emptyCallback: function () {\r\n\r\n    },\r\n    angleInRad: () => (x) => {\r\n        return x * Math.PI / 180;\r\n    },\r\n\r\n    generateChatID(id1, id2){\r\n        let chatID;\r\n\r\n        if (id1 < id2) {\r\n            chatID = id1 + id2;\r\n        } else {\r\n            chatID = id2 + id1;\r\n        }\r\n\r\n        return chatID;\r\n    }\r\n\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}},[(_vm.dataIsReady)?_c('router-view',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}}):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <v-app style=\"max-width: 100%; height: 100%;\">\r\n        <router-view v-if=\"dataIsReady\" style=\"max-width: 100%; height: 100%;\"/>\r\n    </v-app>\r\n</template>\r\n\r\n<script>\r\n\r\n    import {mapActions, mapMutations} from 'vuex';\r\n\r\n    export default {\r\n        name: 'App',\r\n        components: {},\r\n        data() {\r\n            return {\r\n                dataIsReady: false\r\n            }\r\n        },\r\n        methods: {\r\n            ...mapActions('user', ['getRegistrationState', 'initState']),\r\n            ...mapActions(['getLoggedUser']),\r\n        },\r\n        created() {\r\n            let self = this;\r\n\r\n            self.getLoggedUser().then(currentUser => {\r\n                if (currentUser != null && currentUser != undefined) {\r\n                    // user is logged in\r\n                    let resultInitAppInfo = self.initState();\r\n\r\n                    resultInitAppInfo\r\n                        .then(() => {\r\n                            self.dataIsReady = true;\r\n                        })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n                } else {\r\n                    self.$store.dispatch('resetAppState').then(() => {\r\n                        self.$router.replace('home');\r\n                    })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n\r\n                    self.dataIsReady = true;\r\n                    console.log(\"No user logged\");\r\n                }\r\n            });\r\n            //this.checkRegistrationState();\r\n            /*let self = this;\r\n            let resultInitAppInfo = this.initAppInfo();\r\n\r\n            resultInitAppInfo.then(() => {\r\n                self.dataIsReady = true;\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                });*/\r\n\r\n        },\r\n\r\n    };\r\n</script>\r\n\r\n<style>\r\n    #app-toolbar {\r\n        width: 100%;\r\n    }\r\n\r\n    #loading {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n        min-height: 100vh;\r\n    }\r\n</style>\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=49935086&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\ninstallComponents(component, {VApp})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"img-back\",staticStyle:{\"position\":\"relative\",\"height\":\"100%!important\"}},[_c('v-container',{staticClass:\"home justify-center text-center\",staticStyle:{\"height\":\"100%\",\"position\":\"relative\",\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('p',{staticClass:\"white--text\"},[_vm._v(\"webabble.es\")]),_c('div',{staticStyle:{\"width\":\"100%\",\"margin-top\":\"12vh\"},attrs:{\"align\":\"center\"}},[_c('img',{staticStyle:{\"width\":\"44vw\",\"max-width\":\"200px\"},attrs:{\"src\":require(\"../assets/WhiteLogoWeBabble.png\")}}),_c('p',{staticClass:\"white--text slogan\"},[_c('i',[_vm._v(_vm._s(_vm.sloganText))])])]),_c('div',{staticClass:\"bottom-centered-buttons\",staticStyle:{\"margin-bottom\":\"20px\",\"max-width\":\"600px\"},attrs:{\"align\":\"center\"}},[_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'signUp'})}}},[_vm._v(\"\\n                    \"+_vm._s(_vm.createAnAccountText)+\"\\n                \")])],1),_c('br'),_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'login'})}}},[_vm._v(\"\\n                    \"+_vm._s(_vm.toLogInText)+\"\\n                \")])],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"img-back\" style=\"position: relative; height: 100%!important;\">\r\n        <v-container class=\"home justify-center text-center\" style=\"height: 100%; position: relative; width: 100%\" align=\"center\">\r\n            <p class=\"white--text\">webabble.es</p>\r\n\r\n            <div align=\"center\" style=\"width: 100%; margin-top: 12vh\">\r\n                <img style=\"width: 44vw; max-width: 200px\" src=\"../assets/WhiteLogoWeBabble.png\"/>\r\n                <p class=\"white--text slogan\"><i>{{sloganText}}</i></p>\r\n            </div>\r\n\r\n            <div class=\"bottom-centered-buttons\" align=\"center\" style=\"margin-bottom: 20px; max-width: 600px\">\r\n                <div align=\"center\" style=\"width: 94%\">\r\n                    <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'signUp'})\" style=\"width: 100%;\">\r\n                        {{createAnAccountText}}\r\n                    </v-btn>\r\n                </div>\r\n                <br>\r\n                <div align=\"center\" style=\"width: 94%\">\r\n                    <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'login'})\" style=\"width: 100%\">\r\n                        {{toLogInText}}\r\n                    </v-btn>\r\n                </div>\r\n            </div>\r\n        </v-container>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"home\",\r\n        data() {\r\n            return {\r\n                createAnAccountText: null,\r\n                toLogInText: null,\r\n                sloganText: null\r\n            }\r\n        },\r\n        created() {\r\n            this.createAnAccountText = this.$i18n.t('messages.TEXT_CREATE_AN_ACCOUNT');\r\n            this.toLogInText = this.$i18n.t('messages.TEXT_TO_LOG_IN');\r\n            this.sloganText = this.$i18n.t('messages.TEXT_WE_BABBLE_SLOGAN');\r\n        }\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    .bottom-centered-buttons {\r\n        width: 92.5%;\r\n        bottom: 5%;\r\n        left: 50%;\r\n        transform: translate(-50%, 0);\r\n        position: fixed;\r\n    }\r\n\r\n    .slogan {\r\n        font-family: \"Arial\", sans-serif;\r\n    }\r\n\r\n    .btn-grad {\r\n        background-image: linear-gradient(to right, #02AAB0 0%, #00CDAC 51%, #02AAB0 100%)\r\n    }\r\n\r\n    .btn-grad:hover {\r\n        background-position: right center;\r\n    }\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=758cbadf&scoped=true&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"758cbadf\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VContainer})\n","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\nimport haversine from 'haversine-distance'\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                 EVENTS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        events: {},\r\n        eventsToShowIDs: [],\r\n        mapEventsToShowIDs: [],\r\n        lastEventShowed: null,\r\n        languageInvolvedFilter: \"all\",\r\n        eventsTab: 0\r\n    },\r\n    getters: {\r\n        getLanguageInvolvedFilter: (state) => {\r\n            return state.languageInvolvedFilter;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                languageInvolved: state.languageInvolvedFilter\r\n            };\r\n        },\r\n        getEvents: (state) => {\r\n            return state.events;\r\n        },\r\n        getEventsTab: (state) => {\r\n            return state.eventsTab;\r\n        },\r\n        getEventByID: (state) => (id) => {\r\n            return state.events[id];\r\n        },\r\n        getEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.eventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getMapEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.mapEventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getLastEventShowed: (state) => {\r\n            return state.lastEventShowed;\r\n        },\r\n        amIParticipating: (state) => (data) => {\r\n\r\n            let found = null;\r\n            if (state.events[data.eventID]) {\r\n                found = state.events[data.eventID].participants.find(participantID => participantID == data.userID);\r\n                return found != undefined;\r\n            }\r\n            return null;\r\n\r\n        },\r\n    },\r\n    mutations: {\r\n        setLanguageInvolvedFilter(state, languageInvolvedFilter) {\r\n            state.languageInvolvedFilter = languageInvolvedFilter;\r\n        },\r\n        setEventsTab(state, eventsTab) {\r\n            state.eventsTab = eventsTab;\r\n        },\r\n        resetState(state) {\r\n            state.events = {};\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.mapEventsToShowIDs.splice(0, state.mapEventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n            state.languageInvolvedFilter = \"all\";\r\n        },\r\n        resetEventsToShowIDs(state) {\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n        },\r\n        addEvent(state, event) {\r\n            state.events[event.id] = event;\r\n        },\r\n        addParticipantToEvent(state, data) {\r\n            if (-1 == state.events[data.eventID].participants.findIndex(participantID => participantID == data.userID)) {\r\n                state.events[data.eventID].participants.push(data.userID);\r\n            }\r\n        },\r\n        removeParticipantFromEvent(state, data) {\r\n            let searchedUserIndex = state.events[data.eventID].participants.findIndex(function (userID) {\r\n                return userID == data.userID;\r\n            });\r\n            state.events[data.eventID].participants.splice(searchedUserIndex, 1);\r\n        },\r\n        addEventToShow(state, eventID) {\r\n            if (-1 == state.eventsToShowIDs.findIndex(id => {\r\n                return id == eventID;\r\n            })) {\r\n                state.eventsToShowIDs.push(eventID);\r\n            }\r\n        },\r\n        addMapEventToShow(state, eventID) {\r\n            state.mapEventsToShowIDs.push(eventID);\r\n        },\r\n        setEventsToShowIDs(state, eventsToShowIDs) {\r\n            state.eventsToShowIDs = eventsToShowIDs;\r\n        },\r\n        setLastEventShowed(state, lastEventShowed) {\r\n            state.lastEventShowed = lastEventShowed;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init events state info with the appropriate data                         >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getAllEvents')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        resetEventsToShowIDs(context){\r\n            context.commit('resetEventsToShowIDs');\r\n        },\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getNextEventsPage', {\r\n                    lastEventShowed: context.getters.getLastEventShowed,\r\n                    limit: Constants.EVENTS_PAGE_SIZE,\r\n                    filters: filters\r\n                })\r\n                    .then((data) => {\r\n                        context.commit('setLastEventShowed', data.newLastEventShowed);\r\n\r\n                        data.events.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                                distance = distance / 1000;\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                distance: distance\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addEventToShow', event.id);\r\n                        });\r\n\r\n                        if (data.events.length > 0) {\r\n                            context.dispatch('database/isNextEventsPageEmpty', {\r\n                                lastEventShowed: context.getters.getLastEventShowed,\r\n                                limit: Constants.EVENTS_PAGE_SIZE,\r\n                                filters: filters\r\n                            })\r\n                                .then((isEmpty) => {\r\n                                    resolve(!isEmpty);\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                        else{\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAllEvents ~                                                            >\r\n        // To get all events that will be celebrated                                   >\r\n        //----------------------------------------------------------------------------->\r\n        getAllEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getEventsToBeCelebrated')\r\n                    .then((eventsRetrieved) => {\r\n\r\n                        eventsRetrieved.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addMapEventToShow', event.id);\r\n                        });\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEventParticipants(context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let event = context.getters.getEventByID(eventID);\r\n                context.dispatch('database/getMultipleProfilesByUID', event.participants)\r\n                    .then((userProfiles) => {\r\n                        userProfiles.forEach(user => {\r\n                            context.commit('users/addUser', user);\r\n                        });\r\n                        resolve(userProfiles);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add user to an Event                                                     >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/addParticipantToEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"addParticipantToEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove user from an Event                                                >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/removeParticipantFromEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"removeParticipantFromEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getEventByID', id)\r\n                    .then((event) => {\r\n                        if (event) {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                distance: distance / 1000\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            resolve(event);\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting event by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n    },\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                  CHATS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        chats: {},\r\n        chatsToShowIDs: [],\r\n\r\n        chatListListener: null,\r\n        chatMessagesListeners: [],\r\n\r\n        usernameFilter: null\r\n    },\r\n    getters: {\r\n        getChatByID: (state) => (id) => {\r\n            return state.chats[id];\r\n        },\r\n        getChatsToShowIDs: (state) => {\r\n            return state.chatsToShowIDs;\r\n        },\r\n        getChatMessagesByChatID: (state, getters) => (chatID) => {\r\n            if (state.chats[chatID] != undefined) {\r\n                return state.chats[chatID].messages;\r\n            } else {\r\n                return [];\r\n            }\r\n        },\r\n        getUnreadMessagesByChatID: (state, getters) => (chatID) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n            let unreadMessages = [];\r\n\r\n            if (state.chats[chatID] != undefined) {\r\n                for (i = state.chats[chatID].messages.length - 1; i >= 0; i--) {\r\n                    if (state.chats[chatID].messages[i].sender != myID && !state.chats[chatID].messages[i].read) {\r\n                        unreadMessages.push(state.chats[chatID].messages[i].id);\r\n                    } else if (state.chats[chatID].messages[i].sender != myID && state.chats[chatID].messages[i].read) {\r\n                        break;\r\n                    } else if (state.chats[chatID].messages[i].sender == myID) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unreadMessages;\r\n        },\r\n        getUnreadMessages: (state, getters) => {\r\n            let i, count = 0;\r\n\r\n            state.chatsToShowIDs.forEach(c => {\r\n                count += getters.getUnreadMessagesByChatID(c).length;\r\n            });\r\n\r\n            return count;\r\n        },\r\n        getChatsToShow: (state, getters) => {\r\n            let chatsToShow = [];\r\n            let self = this;\r\n\r\n            if (state.usernameFilter == null) {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n                    auxChat.id = state.chats[chatID].id;\r\n                    auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                    chatsToShow.push(auxChat)\r\n                });\r\n            } else {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n\r\n                    let lowNotMe = getters.getUserByChatID(chatID).username.toLowerCase();\r\n\r\n                    if (lowNotMe.includes(state.usernameFilter.toLowerCase())) {\r\n                        auxChat.id = state.chats[chatID].id;\r\n                        auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                        chatsToShow.push(auxChat)\r\n                    }\r\n                });\r\n            }\r\n\r\n            return chatsToShow;\r\n        },\r\n        getUserByChatID: (state, getters) => (chatID) => {\r\n            let userID;\r\n            if (state.chats[chatID].users[0] == getters['user/getID']) {\r\n                userID = state.chats[chatID].users[1];\r\n            } else {\r\n                userID = state.chats[chatID].users[0];\r\n            }\r\n\r\n            return getters['users/getUserByID'](userID);\r\n        },\r\n\r\n        getNotReadMessagesCountByChatID: (state, getters) => (id) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n\r\n            for (i = state.chats[id].messages.length - 1; i >= 0; i--) {\r\n                if (state.chats[id].messages[i].sender != myID && !state.chats[id].messages[i].read) {\r\n                    count++;\r\n                } else if (state.chats[id].messages[i].sender != myID && state.chats[id].messages[i].read) {\r\n                    break;\r\n                } else if (state.chats[id].messages[i].sender == myID) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return count;\r\n        },\r\n\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.chats = {};\r\n            state.chatsToShowIDs.splice(0, state.chatsToShowIDs.length);\r\n\r\n            if (state.chatListListener != null && state.chatListListener != undefined) {\r\n                state.chatListListener();\r\n                state.chatListListener = null;\r\n            }\r\n\r\n            state.chatMessagesListeners.forEach(l => {\r\n                if (l != null && l != undefined) {\r\n                    l();\r\n                }\r\n            });\r\n\r\n            state.chatMessagesListeners.splice(0, state.chatMessagesListeners.length);\r\n        },\r\n        addChatMessagesListener(state, listener) {\r\n            state.chatMessagesListeners.push(listener);\r\n        },\r\n        addChat(state, chat) {\r\n            if (!state.chats[chat.id] || chat.messages.length > state.chats[chat.id].messages.length) {\r\n                Vue.set(state.chats, chat.id, chat);\r\n            }\r\n        },\r\n        updateChatMessages(state, data) {\r\n            for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n\r\n                let index = data.messages.findIndex(function (mMessage) {\r\n                    return mMessage.id === state.chats[data.chatID].messages[i].id;\r\n                });\r\n\r\n                if (index != -1) {\r\n                    Vue.set(state.chats[data.chatID].messages, i, data.messages[index]);\r\n                    data.messages.splice(index, 1);\r\n                    if (data.messages.length == 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        sortChatMessagesByDate(state, chatID) {\r\n\r\n            function compareChatMessagesByDate(a, b) {\r\n                let dateA = a.date;\r\n                let dateB = b.date;\r\n\r\n                if (dateA === null) {\r\n                    return 1;\r\n                } else if (dateB === null) {\r\n                    return -1;\r\n                }\r\n                if (dateB < dateA) {\r\n                    return 1;\r\n                }\r\n                if (dateB > dateA) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chats[chatID].messages.sort(compareChatMessagesByDate);\r\n        },\r\n        addChatToShow(state, chatID) {\r\n            if (-1 == state.chatsToShowIDs.findIndex(id => id == chatID)) {\r\n                state.chatsToShowIDs.push(chatID);\r\n            }\r\n        },\r\n        sortChatsToShowByLastMessage(state) {\r\n            function compareChatsByLastMessageDate(a, b) {\r\n                let chatALastMessageDate = null;\r\n                let chatBLastMessageDate = null;\r\n\r\n                if(state.chats[a].messages[state.chats[a].messages.length - 1]){\r\n                    chatALastMessageDate = state.chats[a].messages[state.chats[a].messages.length - 1].date;\r\n                }\r\n\r\n                if(state.chats[b].messages[state.chats[b].messages.length - 1]){\r\n                    chatBLastMessageDate = state.chats[b].messages[state.chats[b].messages.length - 1].date;\r\n                }\r\n\r\n                if (chatALastMessageDate < chatBLastMessageDate) {\r\n                    return 1;\r\n                }\r\n                if (chatALastMessageDate > chatBLastMessageDate) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chatsToShowIDs.sort(compareChatsByLastMessageDate);\r\n        },\r\n\r\n        setUsernameFilter(state, usernameFilter) {\r\n            state.usernameFilter = usernameFilter;\r\n        },\r\n\r\n        setChatListListener(state, chatListListener) {\r\n            state.chatListListener = chatListListener;\r\n        },\r\n\r\n        pushChatMessages(state, data) {\r\n            data.messages.forEach((mp) => {\r\n                if (mp.date != null && mp.date != undefined) {\r\n                    if (state.chats[data.chatID].messages.length == 0) {\r\n                        Vue.set(state.chats[data.chatID].messages, 0, mp);\r\n                    } else {\r\n                        let alreadyAdded = false;\r\n\r\n                        for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n                            if (mp.date != null && mp.date != undefined && (\r\n                                (state.chats[data.chatID].messages[i].date < mp.date && !state.chats[data.chatID].messages[i + 1] && state.chats[data.chatID].messages[i].id != mp.id)\r\n                                || (state.chats[data.chatID].messages[i].date < mp.date && state.chats[data.chatID].messages[i + 1].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id && state.chats[data.chatID].messages[i + 1].id != mp.id))) {\r\n                                state.chats[data.chatID].messages.splice(i + 1, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            } else if (mp.date != null && mp.date != undefined && i == 0 && state.chats[data.chatID].messages[i].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id) {\r\n                                state.chats[data.chatID].messages.splice(i, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!alreadyAdded && state.chats[data.chatID].messages.length == 0) {\r\n                            state.chats[data.chatID].messages.push(mp);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            //state.chats[data.chatID].messages = state.chats[data.chatID].messages.concat(data.messages);\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init chats state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context, getters) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('createChatListeners', context.getters['user/getChats'])\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatListChange ~                                                    >\r\n        // To manage the event of changes in a chat-list                               >\r\n        // parameters required: user whose chat list we are managing                   >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatListChange(context, user) {\r\n            return new Promise(async function (resolve, reject) {\r\n\r\n                for (const chatID of user.chats) {\r\n                    if (-1 == context.getters.getChatsToShowIDs.findIndex(id => id == chatID) &&\r\n                        (!context.state.chats.hasOwnProperty(chatID) || context.state.chats[chatID].messages.length == 0)) {\r\n                        // It is new\r\n                        await context.dispatch('database/getChatByID', chatID)\r\n                            .then(async (chat) => {\r\n                                chat = {\r\n                                    ...chat,\r\n                                    messages: []\r\n                                }\r\n\r\n                                let userID;\r\n\r\n                                if (chat.users[0] == context.getters['user/getID']) {\r\n                                    userID = chat.users[1];\r\n                                } else {\r\n                                    userID = chat.users[0];\r\n                                }\r\n\r\n                                await context.dispatch('users/getUserByID', userID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChat\", chat);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                        cch\r\n                                    });\r\n\r\n\r\n                                // Create messages listener\r\n                                await context.dispatch('database/createChatMessagesListener', chatID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChatToShow\", chat.id);\r\n                                        context.commit(\"sortChatsToShowByLastMessage\");\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatMessagesChange ~                                                >\r\n        // To manage the event of changes in user chat messages                        >\r\n        // parameters required: chatMessages                                           >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatMessagesChange(context, chatMessages) {\r\n            return new Promise(function (resolve, reject) {\r\n                    context.commit('addChatMessagesListener', chatMessages.listener);\r\n\r\n                    let newMessages = [];\r\n                    let modifiedMessagesToRead = [];\r\n                    let modifiedMessagesDated = [];\r\n\r\n                    chatMessages.messages.forEach((m) => {\r\n                        if (m.change == \"added\" && m.date) {\r\n                            newMessages.push(m);\r\n                        } else if (m.change == \"modified\" && m.read && m.date) {\r\n                            modifiedMessagesToRead.push(m);\r\n                        } else if (m.change == \"modified\" && !m.read && m.date) {\r\n                            modifiedMessagesDated.push(m);\r\n                        }\r\n                    });\r\n\r\n                    if (newMessages.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: newMessages});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesDated.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesDated});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesToRead.length > 0) {\r\n                        context.commit('updateChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesToRead});\r\n                    }\r\n\r\n                    context.commit(\"sortChatsToShowByLastMessage\");\r\n                    resolve();\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setChatMessagesToReadByChatID ~                                           >\r\n        // To set messages in chat to read state                                       >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setChatMessagesToReadByChatID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let unreadMessages = context.getters.getUnreadMessagesByChatID(chatID);\r\n\r\n                context.dispatch('database/setMessagesToRead', {chatID: chatID, messages: unreadMessages})\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendNewChatMessage ~                                                      >\r\n        // To send a chat message                                                      >\r\n        // parameters required: {chatID, users, messageText}                           >\r\n        //----------------------------------------------------------------------------->\r\n        sendNewChatMessage(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let chat = context.getters.getChatByID(data.chatID);\r\n\r\n                let result;\r\n\r\n                if (context.getters.getChatByID(data.chatID).messages.length == 0) {\r\n                    result = context.dispatch('database/addChat', {id: data.chatID, users: chat.users});\r\n                } else {\r\n                    result = Promise.resolve();\r\n                }\r\n\r\n                result.then(() => {\r\n                    context.dispatch('database/addMessagesToChat', {\r\n                        chatID: data.chatID,\r\n                        message: {sender: context.getters['user/getID'], text: data.messageText}\r\n                    }).then(function () {\r\n                        resolve();\r\n                    }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatListeners ~                                                     >\r\n        // To create listeners for the chats of the user                               >\r\n        //----------------------------------------------------------------------------->\r\n        createChatListeners: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccountListener', context.getters['user/getID'])\r\n                    .then(() => {\r\n                        if (context.state.chatListListener != null && context.state.chatListListener != undefined) {\r\n                            context.state.chatListListener();\r\n                        }\r\n                        context.commit('setChatListListener', user.listener);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        }\r\n    },\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n\r\n////////////////////////////////////////////////////////\r\n//-----               APP RANKING                -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions,\r\n        users,\r\n        user\r\n    },\r\n    state: {\r\n        lastUserShowed: -1,\r\n        rankingUsers: [],\r\n        rankingUsersIDs: [],\r\n        rankingUser: null,\r\n    },\r\n    getters: {\r\n\r\n        getRankingUsersToShow: (state, getters) => {\r\n            let rus = [];\r\n\r\n            let i = 0;\r\n            state.rankingUsersIDs.forEach(uid => {\r\n                let ru = {\r\n                    ...getters['users/getUserByID'](uid)\r\n                };\r\n\r\n                ru[\"score\"] = state.rankingUsers[i].score;\r\n                ru[\"position\"] = state.rankingUsers[i].position;\r\n\r\n                rus.push(ru);\r\n                i++;\r\n            });\r\n\r\n            return rus;\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getRankedUserByIndex: (state) => (index) => {\r\n            return state.rankingUsers[index];\r\n        },\r\n        getRankingUsers: (state) => {\r\n            return state.rankingUsers;\r\n        },\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.lastUserShowed = -1;\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n            state.rankingUser = null;\r\n        },\r\n        setRankingUser(state, rankingUser) {\r\n            state.rankingUser = rankingUser;\r\n        },\r\n        setRankingUsers(state, rankingUsers) {\r\n            rankingUsers.forEach(r => {\r\n                state.rankingUsers.push(r);\r\n            });\r\n        },\r\n        resetRankingUsers(state, rankingUsers) {\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n        },\r\n        resetRankingUsersIDs(state, rankingUsers) {\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n        },\r\n\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRankingUserID(state, rankingUserID) {\r\n            if (-1 == state.rankingUsersIDs.findIndex(id => {\r\n                return id == rankingUserID;\r\n            })) {\r\n                state.rankingUsersIDs.push(rankingUserID);\r\n            }\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init ranking state info with the appropriate data                        >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getRankingUsers')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRankingUsers ~                                                         >\r\n        // To get top 100 ranking users and current user position in ranking           >\r\n        //----------------------------------------------------------------------------->\r\n        getRankingUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getTop100RankingUsers')\r\n                    .then((top100Users) => {\r\n                        let userID = context.getters['user/getID'];\r\n\r\n                        let userIndex = top100Users.findIndex(user => {\r\n                            return user.id == userID;\r\n                        });\r\n\r\n                        context.commit('setRankingUsers', top100Users);\r\n\r\n                        if (userIndex == -1) {\r\n                            context.dispatch('database/getUserRankingPositionByID', userID)\r\n                                .then((user) => {\r\n                                    context.commit('setRankingUser', user);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getPagedRankingUsers ~                                                    >\r\n        // To get page-size users from the group of ranking users retrieved            >\r\n        //----------------------------------------------------------------------------->\r\n        getPagedRankingUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                let pageEnding = newUserShowed + Constants.RANKING_PAGE_SIZE;\r\n                if (newUserShowed == context.getters.getRankingUsers) {\r\n                    resolve(false);\r\n                }\r\n                while (newUserShowed < pageEnding && newUserShowed < context.getters.getRankingUsers.length) {\r\n                    let user = context.getters.getRankedUserByIndex(newUserShowed);\r\n\r\n                    await context.dispatch('users/getUserByID', user.id)\r\n                        .then(() => {\r\n                            context.commit(\"addRankingUserID\", user.id);\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                    newUserShowed++;\r\n                }\r\n\r\n                context.commit('setLastUserShowed', newUserShowed - 1);\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreRankingUsersToShow ~                                          >\r\n        // To check if there are ranking users left to show                            >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreRankingUsersToShow(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport users from \"./modules/users\";\r\nimport events from \"./modules/events\";\r\nimport user from \"./modules/user\";\r\nimport chats from \"./modules/chats\";\r\nimport ranking from \"./modules/ranking\";\r\nimport database from \"./modules/database\";\r\nimport permissions from \"./modules/permissions\";\r\n\r\nexport default new Vuex.Store({\r\n    modules: {\r\n        user,\r\n        users,\r\n        events,\r\n        chats,\r\n        ranking,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        appInfoLoaded: false,\r\n    },\r\n    getters: {\r\n        getAppInfoLoaded: (state) => {\r\n            return state.appInfoLoaded;\r\n        },\r\n    },\r\n    mutations: {\r\n        setAppInfoLoaded(state, appInfoLoaded) {\r\n            state.appInfoLoaded = appInfoLoaded;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLoggedUser ~                                                           >\r\n        // To get user logged                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getLoggedUser: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((user) => {\r\n                        resolve(user);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset all modules state info                                             >\r\n        //----------------------------------------------------------------------------->\r\n        resetAppState: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                if (context.getters.getAppInfoLoaded) {\r\n                    let promises = [];\r\n\r\n                    promises.push(context.dispatch('user/resetState'));\r\n                    promises.push(context.dispatch('users/resetState'));\r\n                    promises.push(context.dispatch('chats/resetState'));\r\n                    promises.push(context.dispatch('events/resetState'));\r\n                    promises.push(context.dispatch('ranking/resetState'));\r\n                    promises.push(context.dispatch('permissions/resetState'));\r\n\r\n                    Promise.all(promises).then(() => {\r\n                        console.log('state successfully reseted.');\r\n                        context.commit('setAppInfoLoaded', false);\r\n                        resolve();\r\n                    })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            console.log('Error resetting state.');\r\n                            reject(this.$i18n.t('messages.ERROR_GENERIC_PROBLEM'));\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initAppInfo ~                                                             >\r\n        // To init the necessary info to init the app for a logged user                >\r\n        //----------------------------------------------------------------------------->\r\n        initAppInfo: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('user/isUserLogged')\r\n                    .then((isUserLogged) => {\r\n                        if (isUserLogged && !context.getters.getAppInfoLoaded) {\r\n                            context.dispatch('user/initState')\r\n                                .then(() => {\r\n                                    console.log('user module state successfully initiated.');\r\n                                    context.dispatch('chats/initState')\r\n                                        .then(() => {\r\n                                            console.log('chats module state successfully initiated.');\r\n                                            context.dispatch('ranking/initState')\r\n                                                .then(() => {\r\n                                                    console.log('ranking module state successfully initiated.');\r\n                                                    context.dispatch('events/initState')\r\n                                                        .then(() => {\r\n                                                            console.log('events module state successfully initiated.');\r\n                                                            context.commit('setAppInfoLoaded', true);\r\n                                                            resolve();\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                })\r\n                                                .catch((error) => {\r\n                                                    reject(error);\r\n                                                });\r\n                                        })\r\n                                        .catch((error) => {\r\n                                            reject(error);\r\n                                        });\r\n\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error initiating users module state.');\r\n                        reject(error);\r\n                    });\r\n            })\r\n\r\n        },\r\n\r\n\r\n    },\r\n});\r\n","import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport firebase from \"firebase\";\r\nimport Home from './views/Home.vue'\r\nimport store from './store/store.js'\r\n\r\nVue.use(Router)\r\n\r\nconst router = new Router({\r\n    /*mode: 'history',*/\r\n    base: process.env.BASE_URL,\r\n    routes: [\r\n        {\r\n            //To redirect all routes that do not exist to /home\r\n            path: '*',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            //To redirect root route to /home\r\n            path: '/',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            path: '/home',\r\n            name: 'home',\r\n            component: Home\r\n        },\r\n        {\r\n            path: '/login',\r\n            name: 'login',\r\n            component: () => import('./views/Accounts/Login.vue'),\r\n        },\r\n        {\r\n            path: '/sign-up',\r\n            name: 'signUp',\r\n            component: () => import('./views/Accounts/SignUp.vue'),\r\n        },\r\n        {\r\n            path: '/email-verification',\r\n            name: 'emailVerification',\r\n            component: () => import('./views/Accounts/EmailVerification.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-profile-info',\r\n            name: 'fillYourProfileInfo',\r\n            component: () => import('./views/Accounts/FillYourProfileInfo.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-languages',\r\n            name: 'fillYourLanguages',\r\n            component: () => import('./views/Accounts/FillYourLanguages.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/set-your-profile-image',\r\n            name: 'setYourProfileImage',\r\n            component: () => import('./views/Accounts/SetYourProfileImage.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/send-change-password-email',\r\n            name: 'sendChangePasswordEmail',\r\n            component: () => import('./views/Accounts/SendChangePasswordEmail.vue'),\r\n            meta: {\r\n                requiresAuth: false\r\n            }\r\n        },\r\n        {\r\n            path: '/dashboard',\r\n            name: 'dashboard',\r\n            redirect: {name: 'profileHome'},\r\n            meta: {requiresAuth: true},\r\n            component: () => import('./views/Dashboard.vue'),\r\n            children: [\r\n                {\r\n                    path: 'ranking',\r\n                    name: 'rankingHome',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/Ranking/RankingHome.vue'),\r\n                },\r\n                {\r\n                    path: 'ranking/user/:id/',\r\n                    name: 'userProfileRanking',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'events',\r\n                    name: 'eventsHome',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventsHome.vue'),\r\n                },\r\n                {\r\n                    path: 'event/:id/',\r\n                    name: 'eventDescription',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventDescription.vue'),\r\n                },\r\n                {\r\n                    path: 'search',\r\n                    name: 'searchHome',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchHome.vue'),\r\n                },\r\n                {\r\n                    path: 'search/filter',\r\n                    name: 'searchFilter',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchFilter.vue'),\r\n                },\r\n                {\r\n                    path: 'search/user/:id/',\r\n                    name: 'userProfileSearch',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'chats',\r\n                    name: 'chatHome',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatHome.vue'),\r\n                },\r\n                {\r\n                    path: 'chats/chat/:id/',\r\n                    name: 'chatWithUser',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatWithUser.vue'),\r\n                },\r\n                {\r\n                    path: 'chats/user/:id/',\r\n                    name: 'userProfileChat',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'profile',\r\n                    name: 'profileHome',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileHome.vue'),\r\n                },\r\n                {\r\n                    path: 'profile/:id/edit',\r\n                    name: 'profileEdit',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileEdit.vue')\r\n                },\r\n                {\r\n                    path: 'settings',\r\n                    name: 'settings',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsHome.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account',\r\n                    name: 'settingsAccount',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccount.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/name-and-last-name',\r\n                    name: 'settingsAccountEditNameAndLastName',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditNameAndLastName.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/email',\r\n                    name: 'settingsAccountEditEmail',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditEmail.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/password-verification',\r\n                    name: 'settingsAccountPasswordVerification',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountPasswordVerification.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/password',\r\n                    name: 'settingsAccountEditPassword',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditPassword.vue')\r\n                },\r\n                {\r\n                    path: 'settings/language',\r\n                    name: 'settingsLanguage',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsLanguage.vue')\r\n                },\r\n                {\r\n                    path: 'settings/permissions',\r\n                    name: 'settingsPermissions',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsPermissions.vue')\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n});\r\n\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n    const currentUser = firebase.auth().currentUser;\r\n    const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\r\n    if (requiresAuth && !currentUser) {\r\n        next('home');\r\n    } else if ((requiresAuth && currentUser && (to.name !== from.name) && (!to.path.startsWith('/dashboard') || !from.path.startsWith('/dashboard'))) || (!requiresAuth && currentUser)) {\r\n        store.dispatch('user/getRegistrationState').then(registrationState => {\r\n            if (to.path.startsWith('/' + registrationState)) {\r\n                next()\r\n            } else if (from.path.startsWith('/' + registrationState)) {\r\n                next({name: from.name});\r\n            } else {\r\n                next({path: '/' + registrationState});\r\n            }\r\n        });\r\n        //next()\r\n    }\r\n    else {\r\n        next();\r\n    }\r\n\r\n});\r\n\r\nexport default router;\r\n","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}firebase-messaging-sw.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","import Vue from 'vue';\nimport Vuetify from 'vuetify/lib';\n\n\nVue.use(Vuetify);\n\nexport default new Vuetify({\n    icons: {\n        iconfont: 'mdi',\n    },\n    theme: {\n        themes: {\n            light: {\n                primary: '#00abba',\n                secondary: '#003c4d',\n                thirdary: '#017394',\n                accent: '#82B1FF',\n                error: '#FF5252',\n                info: '#2196F3',\n                success: '#4CAF50',\n                warning: '#FFC107',\n            }\n        }\n    }\n});\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store/store'\r\nimport './registerServiceWorker'\r\nimport vuetify from './plugins/vuetify';\r\nimport firebase from \"firebase\";\r\nimport VueChatScroll from 'vue-chat-scroll'\r\nVue.use(VueChatScroll)\r\nimport VueI18n from 'vue-i18n'\r\nVue.use(VueI18n)\r\nimport * as VueGoogleMaps from \"vue2-google-maps\";\r\nimport $ from 'jquery'\r\nimport './assets/css/main.css';\r\nimport i18n from \"./i18n\";\r\n\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: \"AIzaSyBYhPYAZkG6ML2kRArdK8xITPrZWzF0JSw\",\r\n    libraries: \"places\" // necessary for places input\r\n  }\r\n});\r\n\r\n\r\nVue.config.productionTip = false\r\n\r\nlet app = '';\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyABGil2afckXxQ127FS8fW6y5phy1wzd6g\",\r\n  authDomain: \"tfg-vue-m3m.firebaseapp.com\",\r\n  databaseURL: \"https://tfg-vue-m3m.firebaseio.com\",\r\n  projectId: \"tfg-vue-m3m\",\r\n  storageBucket: \"tfg-vue-m3m.appspot.com\",\r\n  messagingSenderId: \"144506012173\",\r\n  appId: \"1:144506012173:web:8a58aa4b50d8b336184b44\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// Initialize Cloud Firestore through Firebase\r\nlet db = firebase.firestore();\r\n\r\n// Disable deprecated features\r\ndb.settings({\r\n  timestampsInSnapshots: true\r\n});\r\n\r\ndb.enablePersistence({experimentalTabSynchronization:true})\r\n\r\nconst storage = firebase.storage()\r\n\r\nconst messaging = firebase.messaging()\r\n\r\nexport default {\r\n  db,\r\n  storage,\r\n  messaging,\r\n  i18n,\r\n};\r\n\r\n\r\nfirebase.auth().onAuthStateChanged(() => {\r\n  if (!app) {\r\n    app = new Vue({\r\n      router,\r\n      store,\r\n      vuetify,\r\n      i18n,\r\n      render: h => h(App)\r\n    }).$mount('#app');\r\n  }\r\n})","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport AuxMethods from \"../AuxMethods\";\r\nimport database from \"./database\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----        APP PERMISSIONS MANAGEMENT        -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database\r\n    },\r\n    state: {\r\n        isGeolocationPermissionGranted: false,\r\n        isPushNotificationPermissionGranted: false,\r\n    },\r\n    getters: {\r\n        getIsGeolocationPermissionGranted: (state) => {\r\n            return state.isGeolocationPermissionGranted;\r\n        },\r\n        getIsPushNotificationPermissionGranted: (state) => {\r\n            return state.isPushNotificationPermissionGranted;\r\n        },\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.isGeolocationPermissionGranted = false;\r\n            state.isPushNotificationPermissionGranted = false;\r\n        },\r\n        setIsGeolocationPermissionGranted(state, isGeolocationPermissionGranted) {\r\n            state.isGeolocationPermissionGranted = isGeolocationPermissionGranted;\r\n        },\r\n        setIsPushNotificationPermissionGranted(state, isPushNotificationPermissionGranted) {\r\n            state.isPushNotificationPermissionGranted = isPushNotificationPermissionGranted;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForGeolocationPermission ~                                           >\r\n        // To check if geolocation permission has been granted by the user             >\r\n        //----------------------------------------------------------------------------->\r\n        checkForGeolocationPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                navigator.permissions.query({name: 'geolocation'}).then(function (result) {\r\n                    if (result.state == 'granted') {\r\n                        // Permission is already granted\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                        context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n\r\n                        resolve(true);\r\n                    } else if (result.state == 'prompt') {\r\n                        // Navigator will ask for permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n                    } else if (result.state == 'denied') {\r\n                        // User has denied permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n\r\n                    result.onchange = function () {\r\n                        // Whenever permission state changes\r\n\r\n                        if (result.state == 'granted') {\r\n                            // Permission is already granted\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                            context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n\r\n                            resolve(true);\r\n                        } else if (result.state == 'prompt') {\r\n                            // Navigator will ask for permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n\r\n                        } else if (result.state == 'denied') {\r\n                            // User has denied permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForPushNotificationsPermission ~                                     >\r\n        // To check if push notifications permission has been granted by the user      >\r\n        //----------------------------------------------------------------------------->\r\n        checkForPushNotificationsPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch(\"database/askForMessagingPermission\").then(function (isPermissionGranted) {\r\n                    if (isPermissionGranted) {\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", true);\r\n                        context.dispatch('user/generateNotificationToken', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                        resolve(true);\r\n                    } else{\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"img/WhiteLogoWeBabble.7ac0fe89.png\";","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                APP USERS                 -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        /* All users retrieved */\r\n        users: {},\r\n\r\n        /* User IDs result of the searching process */\r\n        searchedUsersIDs: [],\r\n        lastUserShowed: null,\r\n        genderFilter: \"O\",\r\n        ageRangeFilter: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n        languageFilter: {\r\n            filterBy: \"languageToLearn\",\r\n            knownLanguage: \"all\",\r\n            languageToLearn: \"all\"\r\n        },\r\n        searchByUsernameFilter: null,\r\n        maxDistanceFilter: 3,\r\n        maxDistanceRanges: [1, 5, 10, null],\r\n        maxDistanceRangesText: ['1 km', '5 km', '10 km', '∞'],\r\n        locationFilter: null,\r\n        nearbyUsersIDs: null,\r\n\r\n        /* Filtering fields */\r\n        distanceSearchFilter: null,\r\n    },\r\n    getters: {\r\n\r\n        getUsers: (state) => {\r\n            return state.users;\r\n        },\r\n        getLanguagesByUserID: (state) => (id) => {\r\n            return state.users[id].knownLanguages.concat(state.users[id].languagesToLearn);\r\n        },\r\n        getGenderFilter: (state) => {\r\n            return state.genderFilter;\r\n        },\r\n        getAgeRangeFilter: (state) => {\r\n            return state.ageRangeFilter;\r\n        },\r\n        getLanguageFilter: (state) => {\r\n            return state.languageFilter;\r\n        },\r\n        getSearchByUsernameFilter: (state) => {\r\n            return state.searchByUsernameFilter;\r\n        },\r\n        getMaxDistanceFilter: (state) => {\r\n            return state.maxDistanceFilter;\r\n        },\r\n        getMaxDistanceRanges: (state) => {\r\n            return state.maxDistanceRanges;\r\n        },\r\n        getMaxDistanceRangesText: (state) => {\r\n            return state.maxDistanceRangesText;\r\n        },\r\n        getUserByID: (state) => (id) => {\r\n            return state.users[id];\r\n        },\r\n        getNearbyUsersIDs: (state) => {\r\n            return state.nearbyUsersIDs;\r\n        },\r\n        getNearbyUsersIDsLength: (state) => {\r\n            return state.nearbyUsersIDs.length;\r\n        },\r\n        areThereFiltersOn: (state, getters) => {\r\n            let filters = getters.getFilters;\r\n            let filtersOn = false;\r\n\r\n            if (filters.gender === \"M\" || filters.gender === \"W\"\r\n                || filters.ageRange[0] > Constants.MIN_USER_AGE\r\n                || filters.ageRange[1] < Constants.MAX_USER_AGE\r\n                || (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\")\r\n                || (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\")\r\n                || filters.maxDistance != null) {\r\n                filtersOn = true;\r\n            }\r\n\r\n            return filtersOn;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                gender: state.genderFilter,\r\n                ageRange: state.ageRangeFilter,\r\n                language: state.languageFilter,\r\n                maxDistance: state.maxDistanceRanges[state.maxDistanceFilter],\r\n                location: state.locationFilter,\r\n                username: state.searchByUsernameFilter\r\n            };\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getSearchedUsers: (state) => {\r\n\r\n            let searchedUsersReturn = [];\r\n\r\n            state.searchedUsersIDs.forEach(userID => {\r\n                searchedUsersReturn.push({\r\n                    id: userID,\r\n                    ...state.users[userID]\r\n                });\r\n            });\r\n\r\n            return searchedUsersReturn;\r\n        },\r\n        getSearchedUsersIDsLength: (state) => {\r\n            return state.searchedUsersIDs.length;\r\n        },\r\n        getSearchedUsersIDs: (state) => {\r\n            return state.searchedUsersIDs;\r\n        },\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            /* All users retrieved */\r\n            state.users = {};\r\n\r\n            /* User IDs result of the searching process */\r\n            state.searchedUsersIDs = [];\r\n            state.lastUserShowed = null;\r\n            state.genderFilter = \"O\";\r\n            state.ageRangeFilter = [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE];\r\n            state.languageFilter = {\r\n                filterBy: \"languageToLearn\",\r\n                knownLanguage: \"all\",\r\n                languageToLearn: \"all\"\r\n            };\r\n            state.searchByUsernameFilter = null;\r\n            state.maxDistanceFilter = 3;\r\n            state.maxDistanceRanges = [1000, 5000, 10000, null];\r\n            state.maxDistanceRangesText = ['1 km', '5 km', '10 km', '∞'];\r\n            state.locationFilter = null;\r\n            state.nearbyUsersIDs = null;\r\n\r\n            /* Filtering fields */\r\n            state.distanceSearchFilter = null;\r\n        },\r\n        setUsers(state, users) {\r\n            state.users = users;\r\n        },\r\n        setGenderFilter: (state, genderFilter) => {\r\n            state.genderFilter = genderFilter;\r\n        },\r\n        setAgeRangeFilter: (state, ageRangeFilter) => {\r\n            state.ageRangeFilter = ageRangeFilter;\r\n        },\r\n        setNearbyUsersIDs: (state, nearbyUsersIDs) => {\r\n            state.nearbyUsersIDs = nearbyUsersIDs;\r\n        },\r\n        setLanguageFilter: (state, languageFilter) => {\r\n            state.languageFilter = languageFilter;\r\n        },\r\n        setLocationFilter: (state, locationFilter) => {\r\n            state.locationFilter = locationFilter;\r\n        },\r\n        setSearchByUsernameFilter: (state, searchByUsernameFilter) => {\r\n            state.searchByUsernameFilter = searchByUsernameFilter;\r\n        },\r\n        setMaxDistanceFilter: (state, maxDistanceFilter) => {\r\n            state.maxDistanceFilter = maxDistanceFilter;\r\n        },\r\n        addUser(state, user) {\r\n            state.users[user.id] = user;\r\n        },\r\n        addSearchedUserID(state, userID) {\r\n            if (-1 == state.searchedUsersIDs.findIndex(id => {\r\n                return id == userID;\r\n            })) {\r\n                state.searchedUsersIDs.push(userID);\r\n            }\r\n        },\r\n        resetSearchedUsersIDs(state) {\r\n            state.searchedUsersIDs = [];\r\n        },\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRating(state, data) {\r\n            let userTo = state.users[data.id];\r\n\r\n            if (data.prev == null) {\r\n                //new rate\r\n                let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                newAvgRating += data.rating;\r\n                newAvgRating /= (userTo.numRatings + 1);\r\n                state.users[data.id].avgRating = newAvgRating;\r\n                state.users[data.id].numRatings = userTo.numRatings + 1;\r\n            } else {\r\n                if (data.rating == null) {\r\n                    //remove rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating - data.prev;\r\n                    if ((userTo.numRatings - 1) != 0)\r\n                        newAvgRating /= (userTo.numRatings - 1);\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                    state.users[data.id].numRatings = userTo.numRatings - 1;\r\n                } else {\r\n                    //modify rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating + data.rating - data.prev;\r\n                    if (userTo.numRatings != 0)\r\n                        newAvgRating /= userTo.numRatings;\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                }\r\n\r\n            }\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            context.commit('resetState');\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getSearchedUsers ~                                                        >\r\n        // To list searched users using pagination                                     >\r\n        // return: true/false (are there more users to show?)                          >\r\n        //----------------------------------------------------------------------------->\r\n        getSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                if (filters.location != null && filters.location != undefined && filters.maxDistance != null) {\r\n                    if (context.getters.getLastUserShowed == null) {\r\n                        context.dispatch('database/getNearbyUserIDs', {\r\n                            location: filters.location,\r\n                            maxDistance: filters.maxDistance\r\n                        })\r\n                            .then((ids) => {\r\n                                context.commit('setNearbyUsersIDs', ids);\r\n                                context.dispatch('getNearbyUsersProfiles')\r\n                                    .then(() => {\r\n                                        context.dispatch('areThereMoreNearbyUsers')\r\n                                            .then((areThereMore) => {\r\n                                                resolve(areThereMore);\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    } else {\r\n                        context.dispatch('getNearbyUsersProfiles')\r\n                            .then(() => {\r\n                                context.dispatch('areThereMoreNearbyUsers')\r\n                                    .then((areThereMore) => {\r\n                                        resolve(areThereMore);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    }\r\n                } else {\r\n                    context.dispatch('database/getNextUsersPage', {\r\n                        lastUserShowed: context.getters.getLastUserShowed,\r\n                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                        filters: filters\r\n                    })\r\n                        .then((data) => {\r\n                            context.commit('setLastUserShowed', data.newLastUserShowed);\r\n\r\n                            data.users.forEach(user => {\r\n                                context.commit('addUser', user);\r\n                                context.commit('addSearchedUserID', user.id);\r\n                            });\r\n                            if (data.users.length > 0) {\r\n\r\n                                context.dispatch('database/isNextUsersPageEmpty', {\r\n                                    lastUserShowed: context.getters.getLastUserShowed,\r\n                                    limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                    filters: filters\r\n                                })\r\n                                    .then((isEmpty) => {\r\n                                        if (data.users.length > 0 && data.users.length < Constants.SEARCHED_USERS_PAGE_SIZE\r\n                                            && !isEmpty) {\r\n                                            context.dispatch('database/getNextUsersPage', {\r\n                                                lastUserShowed: context.getters.getLastUserShowed,\r\n                                                limit: Constants.SEARCHED_USERS_PAGE_SIZE - data.users.length,\r\n                                                filters: filters\r\n                                            })\r\n                                                .then((data2) => {\r\n                                                    context.commit('setLastUserShowed', data2.newLastUserShowed);\r\n                                                    data2.users.forEach(user => {\r\n                                                        context.commit('addUser', user);\r\n                                                        context.commit('addSearchedUserID', user.id);\r\n                                                    });\r\n                                                    context.dispatch('database/isNextUsersPageEmpty', {\r\n                                                        lastUserShowed: context.getters.getLastUserShowed,\r\n                                                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                                        filters: filters\r\n                                                    })\r\n                                                        .then((isEmpty2) => {\r\n                                                            resolve(!isEmpty2);\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                }).catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                        } else {\r\n                                            resolve(!isEmpty);\r\n                                        }\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreNearbyUsers ~                                                 >\r\n        // To check if there are valid nearby users to show yet                        >\r\n        // return: true/false (are there more valid nearby users to show?)             >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreNearbyUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n                let lastUserShowed = context.getters.getLastUserShowed;\r\n                let i;\r\n\r\n                while (lastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    let aux = Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1;\r\n\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n\r\n                    }\r\n\r\n                    lastUserShowed = i - 1;\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then((userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (!user.registrationCompleted) {\r\n                                    isValid = false;\r\n                                }\r\n\r\n                                if (isValid) {\r\n                                    resolve(true);\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n\r\n                resolve(false);\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUsersProfiles ~                                                  >\r\n        // To show valid nearby users with pagination                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUsersProfiles(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let usersAdded = 0;\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n\r\n                while (usersAdded < Constants.SEARCHED_USERS_PAGE_SIZE && context.getters.getLastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    let i;\r\n                    let lastUserShowed = context.getters.getLastUserShowed;\r\n\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                        lastUserShowed = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n                    }\r\n\r\n                    context.commit('setLastUserShowed', i - 1);\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then(async (userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (isValid) {\r\n                                    context.commit('addUser', user);\r\n                                    context.commit('addSearchedUserID', user.id);\r\n                                    usersAdded++;\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetSearchedUsers ~                                                      >\r\n        // To reset variables related to user searching                                >\r\n        //----------------------------------------------------------------------------->\r\n        resetSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"resetSearchedUsersIDs\");\r\n                context.commit('setLastUserShowed', null);\r\n\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setFilters ~                                                              >\r\n        // To set the filtering values selected by the user for the searching          >\r\n        //----------------------------------------------------------------------------->\r\n        setFilters(context, filters) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"setGenderFilter\", filters.gender);\r\n                context.commit(\"setAgeRangeFilter\", filters.ageRange);\r\n                context.commit(\"setLanguageFilter\", filters.language);\r\n                context.commit(\"setMaxDistanceFilter\", filters.maxDistance);\r\n                context.commit(\"setLocationFilter\", filters.location);\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getUserByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfileByUID', id)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            context.commit('addUser', profileInfo);\r\n                            resolve(profileInfo);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting user by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetFilters ~                                                            >\r\n        // To reset the filtering values to default                                    >\r\n        //----------------------------------------------------------------------------->\r\n        resetFilters(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"setGenderFilter\", \"O\");\r\n                context.commit(\"setAgeRangeFilter\", [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE]);\r\n                context.commit('setLanguageFilter', {\r\n                    filterBy: \"languageToLearn\",\r\n                    knownLanguage: \"all\",\r\n                    languageToLearn: \"all\"\r\n                });\r\n\r\n                context.commit(\"setLocationFilter\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setMaxDistanceFilter\", 3)\r\n                context.commit(\"setSearchByUsernameFilter\", null)\r\n\r\n                let filters = context.getters.getFilters;\r\n                filters[\"maxDistance\"] = null;\r\n\r\n                resolve(filters);\r\n            });\r\n        },\r\n\r\n\r\n    }\r\n}","\r\nexport default {\r\n    messages: {\r\n        es: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'Parece que ha habido un problema con tu petición. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'Parece que ha habido un problema de conexión. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'Parece que ha habido un problema con la base de datos. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'Ya existe una cuenta registrada con ese E-mail. Si es tuya, prueba a iniciar sesión-',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'Ya existe un usuario con ese nombre.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'No existe una cuenta registrada con este E-mail o la contraseña es incorrecta.',\r\n                ERROR_UPLOADING_IMAGE: 'Error subiendo la imagen.',\r\n                ERROR_SOMETHING_HAPPENED: 'Parece que ha ocurrido un error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'Lo sentimos, la API FileReader no está soportada.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Las contraseñas no coinciden',\r\n                ERROR_TOO_MANY_REQUESTS: 'Parece que has realizado demasiadas peticiones en poco tiempo. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'Parece que la contraseña introducida no coincide con su contraseña actual.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'Parece que no hay ninguna cuenta registrada con este E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema accediendo a su ubicación actual.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'Parece que ha habido un problema: No se ha podido guardar su valoración.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'Parece que ha habido un problema al cargar el ranking. Por favor, comprueba tu conexión.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema: no se ha podido obtener tu localizacion actual.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'Parece que ha habido un problema: no se han podido obtener los usuarios cercanos.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'Parece que ha habido un problema: no se han podido obtener los eventos.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'Este campo es obligatorio',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Mínimo 5 caracteres',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Máximo 14 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Mínimo 5 caracteres para realizar la búsqueda',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Mínimo 20 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Mínimo 8 caracteres',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'Debes tener al menos {age} años.',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Por favor, selecciona una imagen',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'Para poder continuar, completa el proceso de verificación a través del enlace que hemos enviado a tu E-mail:',\r\n\r\n                /* TEXTS */\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: '¿Qué idiomas buscas mejorar?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Idiomas que quieres practicar',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: '¿Qué idiomas hablas con soltura?',\r\n                TEXT_MOTHER_LANGUAGES: 'Idiomas maternos',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Idioma que busca mejorar',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Idioma que quiere practicar',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Idioma que habla con soltura',\r\n                TEXT_MOTHER_LANGUAGE: 'Idioma materno',\r\n                TEXT_LANGUAGE: 'Idioma',\r\n                TEXT_GENDER: 'Género',\r\n                TEXT_DISTANCE: 'Distancia',\r\n                TEXT_AGE: 'Edad',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filtrar por idioma materno',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filtrar por idioma que quiere practicar',\r\n                TEXT_SEARCH: 'Buscar',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No se han encontrado usuarios que cumplan con los requisitos.',\r\n                TEXT_FILTERS: 'Filtros',\r\n                TEXT_RATE_USER: 'Valora al usuario',\r\n                TEXT_YOU: 'Tú',\r\n                TEXT_CANCEL: 'Cancelar',\r\n                TEXT_RATE: 'Valorar',\r\n                TEXT_REMOVE: 'Eliminar',\r\n                TEXT_NO_LIMIT: 'Sin límite',\r\n                TEXT_REMOVE_FILTERS: 'Eliminar filtros',\r\n                TEXT_YOUR_PROFILE: 'Tu perfil',\r\n                TEXT_EDIT: 'Editar',\r\n                TEXT_EDIT_PROFILE: 'Editar perfil',\r\n                TEXT_USERS: 'Usuarios',\r\n                TEXT_TO_FILTER: 'Filtrar',\r\n                TEXT_EVENTS: 'Eventos',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Cerrar',\r\n                TEXT_SHOW_USERS: 'Mostrar usuarios',\r\n                TEXT_OF: 'de',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Crea tu cuenta',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Crear una cuenta',\r\n                TEXT_NAME: 'Nombre',\r\n                TEXT_LASTNAME: 'Apellidos',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'Correo electrónico',\r\n                TEXT_PASSWORD: 'Contraseña',\r\n                TEXT_REPEAT_PASSWORD: 'Repite la contraseña',\r\n                TEXT_REGISTER: 'Registrar',\r\n                TEXT_REGISTER_NOW: '¡Regístrate ahora!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: '¿Ya tienes una cuenta?',\r\n                TEXT_ACCESS_NOW: '¡Accede ahora!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Accede a tu cuenta',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verifica tu E-mail',\r\n                TEXT_USERNAME: 'Nombre de usuario',\r\n                TEXT_FILL_YOUR_PROFILE: 'Rellena tu perfil',\r\n                TEXT_BIRTHDATE: 'Fecha de nacimiento',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Cuéntanos un poco sobre ti',\r\n                TEXT_TO_CONTINUE: 'Continuar',\r\n                TEXT_YOUR_LANGUAGES: 'Tus idiomas',\r\n                TEXT_WOMAN: 'Mujer',\r\n                TEXT_MAN: 'Hombre',\r\n                TEXT_ANY: 'Cualquiera',\r\n                TEXT_OTHER: 'Otro',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Elige tu foto de perfil',\r\n                TEXT_PROFILE_IMAGE: 'Foto de perfil',\r\n                TEXT_EMAIL_NOT_VALID: 'E-mail no válido',\r\n                TEXT_USERNAME_NOT_VALID: 'Nombre de usuario no válido',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: '¿Todavía no tienes una cuenta?',\r\n                TEXT_TO_LOG_IN: 'Iniciar sesión',\r\n                TEXT_TO_LOG_OUT: 'Cerrar sesión',\r\n                TEXT_RESEND_EMAIL: 'Volver a enviar E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'Va a salir de su cuenta',\r\n                TEXT_CONFIRM: 'Confirmar',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: '¿Está seguro de que quiere cerrar sesión?',\r\n                TEXT_PROFILE_INFO: 'Información de perfil',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Idiomas a practicar',\r\n                TEXT_SAVE: 'Guardar',\r\n                TEXT_SETTINGS: 'Configuración e información',\r\n                TEXT_ACCOUNT: 'Cuenta',\r\n                TEXT_PERMISSIONS: 'Permisos',\r\n                TEXT_NAME_AND_LASTNAME: 'Nombre y apellidos',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Cambiar nombre y apellidos',\r\n                TEXT_CHANGE_EMAIL: 'Cambiar correo electrónico',\r\n                TEXT_UPDATE: 'Actualizar',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verifica tu contraseña',\r\n                TEXT_REMOVE_ACCOUNT: 'Borrar cuenta',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Vuelve a introducir tu contraseña de WeBabble para continuar.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Tu dirección de correo electrónico ha sido actualizada.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Tu contraseña ha sido actualizada.',\r\n                TEXT_CHANGE_PASSWORD: 'Cambiar contraseña',\r\n                TEXT_CURRENT_PASSWORD: 'Contraseña actual',\r\n                TEXT_NEW_PASSWORD: 'Nueva contraseña',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirmar la contraseña',\r\n                TEXT_UPDATE_PASSWORD: 'Actualizar contraseña',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Introduce tu E-mail y te ayudaremos a recuperar la contraseña:',\r\n                TEXT_RESET_PASSWORD: 'Restablecer contraseña',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'En un breve período de tiempo recibirás un email. Ábrelo y sigue las instrucciones para restablecer tu contraseña.',\r\n                TEXT_SPACE_YEARS: ' años',\r\n                TEXT_PARTICIPANTS: 'Participantes',\r\n                TEXT_NO_PARTICIPANTS_YET: 'Parece que todavía no se ha apuntado nadie. ¡Sé el primero!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'E-mail de verificación enviado.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'Parece que no hay usuarios que coincidan con tu búsqueda.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'Parece que no hay eventos disponibles.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'Parece que no tienes ningún chat todavía. ¡Comienza a hablar con algún usuario!',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'Parece que no tienes chats con usuarios que coincidan con tu búsqueda.',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Idiomas de los eventos',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'Parece que no has dado permiso para acceder a tu localización. Concédelo para poder disponer de esta funcionalidad.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'Te has apuntado a este evento.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'Has cancelado tu participación en este evento.',\r\n                TEXT_APP_LANGUAGE: 'Idioma',\r\n                TEXT_LANGUAGE_OF_APP: 'Idioma de la aplicación',\r\n                TEXT_LANGUAGE_DE: 'Alemán',\r\n                TEXT_LANGUAGE_ZH: 'Chino',\r\n                TEXT_LANGUAGE_ES: 'Español',\r\n                TEXT_LANGUAGE_FR: 'Francés',\r\n                TEXT_LANGUAGE_EN: 'Inglés',\r\n                TEXT_LANGUAGE_IT: 'Italiano',\r\n                TEXT_LANGUAGE_JA: 'Japonés',\r\n                TEXT_LANGUAGE_PT: 'Portugués',\r\n                TEXT_LANGUAGE_ALL: 'Cualquier idioma',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Aprender idiomas ahora es más fácil',\r\n                TEXT_LOCATION: 'Ubicación',\r\n                TEXT_NOTIFICATIONS: 'Notificaciones',\r\n                TEXT_GRANTED: 'Concedido',\r\n                TEXT_NOT_GRANTED: 'No concedido',\r\n            }\r\n        },\r\n        en: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'It seems that there has been a problem with your request. Please, try again later.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'It seems that there has been a connection problem. Please, try again later.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'It seems that there has been a database problem. Please, try again later.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'There is already an account registered with this E-mail. If this account is yours, try to log in.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'This username is already in use.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'There is no account registered with this E-mail or the password is incorrect.',\r\n                ERROR_UPLOADING_IMAGE: 'Error uploading the image.',\r\n                ERROR_SOMETHING_HAPPENED: 'It seems that there has been an error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'We are sorry, the FileReader API is not supported by your browser.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Passwords do not match.',\r\n                ERROR_TOO_MANY_REQUESTS: 'It seems that you made several request in a short time. Please, try again later.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'It seems that the introduced password does not match your current password.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'It seems that there is no account registered with this E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'It seems that there was a problem accessing your current location.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'It seems that there was a problem: your rate could not be submitted.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'It seems that there was a problem while loading Ranking. Please, check your connection.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'It seems that there was a problem: we could not access your current location.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'It seems that there was a problem: we could not retrieve nearby users.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'It seems that there was a problem: we could not retrieve events.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'This field is required.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Minimum 5 characters.',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Maximum 14 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Write at least 5 to search.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Minimum 20 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Minimum 8 characters.',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'You have to be at least {age} years old.',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Please, select an image.',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'In order to continue, complete the verification process through the link we have sent to your E-mail:',\r\n\r\n                /* TEXTS */\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: 'What languages do you want to improve?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Languages ​​you want to practice',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: 'What languages ​​do you speak fluently?',\r\n                TEXT_MOTHER_LANGUAGES: 'First languages',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Language you are looking to improve',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Language you want to practice',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Language you speak fluently',\r\n                TEXT_MOTHER_LANGUAGE: 'First language',\r\n                TEXT_LANGUAGE: 'Language',\r\n                TEXT_GENDER: 'Gender',\r\n                TEXT_DISTANCE: 'Distance',\r\n                TEXT_AGE: 'Age',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filter by mother tongue',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filter by language they want to practice.',\r\n                TEXT_SEARCH: 'Search',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No users found that meet the requirements.',\r\n                TEXT_FILTERS: 'Filters',\r\n                TEXT_RATE_USER: 'Rate user',\r\n                TEXT_YOU: 'You',\r\n                TEXT_CANCEL: 'Cancel',\r\n                TEXT_RATE: 'Rate',\r\n                TEXT_REMOVE: 'Remove',\r\n                TEXT_NO_LIMIT: 'Limitless',\r\n                TEXT_REMOVE_FILTERS: 'Remove filters',\r\n                TEXT_YOUR_PROFILE: 'Your profile',\r\n                TEXT_EDIT: 'Edit',\r\n                TEXT_EDIT_PROFILE: 'Edit profile',\r\n                TEXT_USERS: 'Users',\r\n                TEXT_TO_FILTER: 'Filter',\r\n                TEXT_EVENTS: 'Events',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Close',\r\n                TEXT_SHOW_USERS: 'Show users',\r\n                TEXT_OF: 'of',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Create your account',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Create an account',\r\n                TEXT_NAME: 'Name',\r\n                TEXT_LASTNAME: 'Last name',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'E-mail',\r\n                TEXT_PASSWORD: 'Password',\r\n                TEXT_REPEAT_PASSWORD: 'Repeat password',\r\n                TEXT_REGISTER: 'Sign up',\r\n                TEXT_REGISTER_NOW: 'Sign up now!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: 'Do you already have an account?',\r\n                TEXT_ACCESS_NOW: 'Access now!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Log in into your account',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verify your E-mail',\r\n                TEXT_USERNAME: 'Username',\r\n                TEXT_PROFILE_IMAGE: 'Profile image',\r\n                TEXT_FILL_YOUR_PROFILE: 'Fill your profile',\r\n                TEXT_BIRTHDATE: 'Date of birth',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Tell us a bit about yourself',\r\n                TEXT_TO_CONTINUE: 'Continue',\r\n                TEXT_YOUR_LANGUAGES: 'Your languages',\r\n                TEXT_WOMAN: 'Woman',\r\n                TEXT_MAN: 'Man',\r\n                TEXT_ANY: 'Any',\r\n                TEXT_OTHER: 'Other',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Choose your profile picture',\r\n                TEXT_EMAIL_NOT_VALID: 'Invalid E-mail',\r\n                TEXT_USERNAME_NOT_VALID: 'Invalid username',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: 'Have you forgotten your password?',\r\n                TEXT_TO_LOG_IN: 'Sign in',\r\n                TEXT_TO_LOG_OUT: 'Log out',\r\n                TEXT_RESEND_EMAIL: 'Resend E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'You are going to log out of your account.',\r\n                TEXT_CONFIRM: 'Confirm',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: 'Are you sure you want to log out?',\r\n                TEXT_PROFILE_INFO: 'Profile information',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Languages to practice',\r\n                TEXT_SAVE: 'Save',\r\n                TEXT_SETTINGS: 'Settings and information',\r\n                TEXT_ACCOUNT: 'Account',\r\n                TEXT_PERMISSIONS: 'Permissions',\r\n                TEXT_NAME_AND_LASTNAME: 'Name and last name',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Edit name and last name',\r\n                TEXT_CHANGE_EMAIL: 'Edit E-mail',\r\n                TEXT_UPDATE: 'Update',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verify your password',\r\n                TEXT_REMOVE_ACCOUNT: 'Remove account',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Re-enter your WeBabble password to continue.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Your E-mail address has been updated.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Your password address has been updated.',\r\n                TEXT_CHANGE_PASSWORD: 'Edit password',\r\n                TEXT_CURRENT_PASSWORD: 'Current password',\r\n                TEXT_NEW_PASSWORD: 'New password',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirm password',\r\n                TEXT_UPDATE_PASSWORD: 'Update password',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Enter your E-mail and we will help you recover your password:',\r\n                TEXT_RESET_PASSWORD: 'Restore password',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'In a short period of time you will receive an E-mail. Open it and follow the instructions to reset your password.',\r\n                TEXT_SPACE_YEARS: ' years old',\r\n                TEXT_PARTICIPANTS: 'Participants',\r\n                TEXT_NO_PARTICIPANTS_YET: 'It seems that no one has signed up yet. Be the first!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'Verification E-mail sent.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'There appear to be no users matching your search.',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'There appear to be no chats with users matching your search.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'There seem to be no events available.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'It looks like you do not have any chat yet. Start talking to a user!',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Events languages',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'It seems that you have not given permission to access your location. Grant it to have this functionality.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'You have signed up for this event.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'You have canceled your participation in this event.',\r\n                TEXT_APP_LANGUAGE: 'Language',\r\n                TEXT_LANGUAGE_OF_APP: 'Application language',\r\n                TEXT_LANGUAGE_DE: 'German',\r\n                TEXT_LANGUAGE_ZH: 'Chinese',\r\n                TEXT_LANGUAGE_ES: 'Spanish',\r\n                TEXT_LANGUAGE_FR: 'French',\r\n                TEXT_LANGUAGE_EN: 'English',\r\n                TEXT_LANGUAGE_IT: 'Italian',\r\n                TEXT_LANGUAGE_JA: 'Japanese',\r\n                TEXT_LANGUAGE_PT: 'Portuguese',\r\n                TEXT_LANGUAGE_ALL: 'Any language',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Learning languages is now easier',\r\n                TEXT_LOCATION: 'Location',\r\n                TEXT_NOTIFICATIONS: 'Notifications',\r\n                TEXT_GRANTED: 'Granted',\r\n                TEXT_NOT_GRANTED: 'Not granted',\r\n            }\r\n        }\r\n    },\r\n    dateTimeFormats: {\r\n        'en': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        },\r\n        'es': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        }\r\n    }\r\n}","import Vue from 'vue';\r\nimport VueI18n from 'vue-i18n';\r\nimport I18NMessages from \"./I18NMessages\";\r\nVue.use(VueI18n);\r\n\r\nlet localeLanguage = 'es';\r\n\r\nif(navigator.language === 'es' || navigator.language === 'es-ES'){\r\n    localeLanguage = 'es';\r\n}\r\nelse if(navigator.language === 'en' || navigator.language === 'en-US'){\r\n    localeLanguage = 'en';\r\n}\r\n\r\nconst i18n = new VueI18n({\r\n    locale: localeLanguage, // set locale\r\n    messages: I18NMessages.messages, // set locale messages\r\n    dateTimeFormats: I18NMessages.dateTimeFormats\r\n});\r\n\r\nexport default i18n;","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport * as firebase from \"firebase\";\r\nimport Constants from \"../Constants\";\r\nimport {GeoFirestore} from \"geofirestore\";\r\nimport i18n from \"../../i18n\";\r\n\r\nconst genericDatabaseError = i18n.t('messages.ERROR_GENERIC_DATABASE_PROBLEM');\r\nconst alreadyRegisteredEmailError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL');\r\nconst emailPasswordCombinationError = i18n.t('messages.ERROR_WRONG_EMAIL_PASSWORD_COMBINATION');\r\nconst tooManyRequestsError = i18n.t('messages.ERROR_TOO_MANY_REQUESTS');\r\nconst genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nconst uploadingImageError = i18n.t('messages.ERROR_UPLOADING_IMAGE');\r\nconst genericConnectionError = i18n.t('messages.ERROR_GENERIC_CONNECTION_PROBLEM');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----     DATABASE (Firebase) INTERACTION      -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {},\r\n    getters: {},\r\n    mutations: {},\r\n    actions: {\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- ACCOUNTS ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserAuth ~                                                              >\r\n        // To determine if user is or is not authenticated                             >\r\n        //----------------------------------------------------------------------------->\r\n        isUserAuth: function () {\r\n            return firebase.auth().currentUser;\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setAccount ~                                                              >\r\n        // To set user account info                                                    >\r\n        // parameters required: data {email, password, name, lastName, role}           >\r\n        //----------------------------------------------------------------------------->\r\n        setAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        name: data.name,\r\n                        lastName: data.lastName,\r\n                        role: 'user',\r\n                        chats: [],\r\n                        tokens: []\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Account info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ askForMessagingPermission ~                                               >\r\n        // To asf for messaging push notifications permission                          >\r\n        //----------------------------------------------------------------------------->\r\n        askForMessagingPermission(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.messaging().requestPermission()\r\n                    .then(() => {\r\n                        resolve(true);\r\n                    })\r\n                    .catch(() => {\r\n                        resolve(false);\r\n                    });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generatePushNotificationToken ~                                           >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generatePushNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                firebase.messaging().getToken().then(async (token) => {\r\n                    if (token) {\r\n                        const currentMessageToken = await window.localStorage.getItem('messagingToken');\r\n\r\n                        console.log('token will be updated', currentMessageToken != token)\r\n                        if (currentMessageToken != token) {\r\n                            console.log(\"token\")\r\n                            let firestoreDB = firebase.firestore();\r\n                            firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayUnion(token)}\r\n                            )\r\n                                .then(() => {\r\n                                    resolve();\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.error(error);\r\n                                    reject(genericDatabaseError);\r\n                                });\r\n                        }\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAccount ~                                                              >\r\n        // To get user auth account info                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getAccount() {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"Account info successfully retrieved from firebase\");\r\n                        resolve({\r\n                            id: doc.id,\r\n                            email: firebase.auth().currentUser.email,\r\n                            ...doc.data()\r\n                        });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccountListener ~                                                   >\r\n        // To listen on changes on user account info                                   >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccountListener: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Accounts\").doc(userID)\r\n                        .onSnapshot(function (user) {\r\n                            let formattedUser = {\r\n                                id: userID,\r\n                                ...user.data(),\r\n                                listener: docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatListChange\", formattedUser, {root: true}).then(() => {\r\n                                resolve(formattedUser);\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                    firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n                        .then(() => {\r\n                            console.log(\"Success creating account in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            if (error.code == 'auth/email-already-in-use') {\r\n                                reject(alreadyRegisteredEmailError);\r\n                            } else {\r\n                                reject(genericDatabaseError);\r\n                            }\r\n                        });\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setPersistance ~                                                          >\r\n        // To set firebase account persistance                                         >\r\n        //----------------------------------------------------------------------------->\r\n        setPersistance: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(() => {\r\n                        console.log(\"Success setting firebase account persistence.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error)\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log in firebase user account                                             >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n                    .then(() => {\r\n                        console.log(\"Success logging user in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        if (error.code == 'auth/wrong-password' || error.code == \"auth/user-not-found\") {\r\n                            reject(emailPasswordCombinationError);\r\n                        } else if (error.code == \"auth/too-many-requests\") {\r\n                            reject(tooManyRequestsError);\r\n                        } else {\r\n                            reject(genericError);\r\n                        }\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log out of firebase user account                                         >\r\n        //----------------------------------------------------------------------------->\r\n        logout: function () {\r\n            return new Promise(async function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                if (firebase.auth() != null) {\r\n                    await firebase.messaging().getToken().then(async (token) => {\r\n                        if (token) {\r\n                            await firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayRemove(token)}\r\n                            )\r\n                                .catch(function (error) {\r\n                                    console.error(error);\r\n                                    reject(genericDatabaseError);\r\n                                });\r\n                        }\r\n\r\n                    }).catch(function (error) {\r\n                        console.error(error);\r\n\r\n                        if (error.code != 'messaging/failed-serviceworker-registration') {\r\n                            reject(genericDatabaseError);\r\n                        }\r\n                    });\r\n\r\n                    firebase.auth().signOut()\r\n                        .then(() => {\r\n                            resolve();\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(err);\r\n                            reject(genericError);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send firebase account email verification                                 >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.sendEmailVerification().then(function () {\r\n                    console.log('Firebase verification email sent.');\r\n                    resolve();\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    if (error.code == \"auth/too-many-requests\") {\r\n                        reject(tooManyRequestsError);\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isEmailVerified ~                                                         >\r\n        // To check if firebase account email is verified                              >\r\n        //----------------------------------------------------------------------------->\r\n        isEmailVerified: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.reload().then(() => {\r\n                    if (firebase.auth().currentUser.emailVerified) {\r\n                        console.log(\"Firebase account email is verified.\");\r\n                        resolve(true);\r\n                    } else {\r\n                        resolve(false);\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendPasswordResetEmail ~                                                  >\r\n        // To send firebase account password reset email                               >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().sendPasswordResetEmail(email).then(function () {\r\n                    console.log(\"Password reset email sent.\");\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    // An error happened.\r\n                    if (error.code == 'auth/user-not-found') {\r\n                        console.log(\"No account attached to the specified email.\");\r\n                        resolve();\r\n                    } else {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountData ~                                                       >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName], [email]}                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountData: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('name')) {\r\n                    batch.update(docRef, {\"name\": data.name});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('lastName')) {\r\n                    batch.update(docRef, {\"lastName\": data.lastName});\r\n                    infoToUpdate = true;\r\n                }\r\n\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Account info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updateEmail(email).then(function () {\r\n                    console.log(\"Account email successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword: function (context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updatePassword(password).then(function () {\r\n                    console.log(\"Account password successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- PROFILES ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUID ~                                                         >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUID(context, uid) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(uid).get()\r\n                    .then((doc) => {\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            if (doc.data().hasOwnProperty(\"birthDate\")) {\r\n                                doc.data()[\"birthDate\"] = doc.data()[\"birthDate\"].toDate().setHours(0, 0, 0,);\r\n                            }\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfile ~                                                              >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfile(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('getProfileByUID', firebase.auth().currentUser.uid)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo && profileInfo.hasOwnProperty(\"birthDate\")) {\r\n                            profileInfo[\"birthDate\"] = profileInfo[\"birthDate\"].toDate().setHours(0, 0, 0,);\r\n                        }\r\n\r\n                        console.log(\"Profile info successfully retrieved from firebase\");\r\n                        resolve(profileInfo);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getMultipleProfilesByUID ~                                                >\r\n        // To get multiple user profiles by their uids                                 >\r\n        // parameters required: ids[]                                                  >\r\n        // return: userProfiles[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getMultipleProfilesByUID(context, ids) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let promises = [];\r\n                let userProfiles = [];\r\n\r\n                ids.forEach(id => {\r\n                    promises.push(\r\n                        context.dispatch('getProfileByUID', id)\r\n                            .then((profileInfo) => {\r\n                                userProfiles.push({\r\n                                    id: id,\r\n                                    ...profileInfo\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(genericDatabaseError);\r\n                            })\r\n                    );\r\n                });\r\n                Promise.all(promises).then(function () {\r\n                    resolve(userProfiles);\r\n                })\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUsername ~                                                    >\r\n        // To get user profile info by its username                                    >\r\n        // parameters required: username                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").where(\"username\", \"==\", username).get()\r\n                    .then((querySnapshot) => {\r\n                        if (querySnapshot.size > 0) {\r\n                            console.log(\"Profile info successfully retrieved from firebase\");\r\n                            resolve(querySnapshot.docs);\r\n                        } else {\r\n                            console.log(\"Profile info was not found in firebase\");\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfile ~                                                              >\r\n        // To set user profile info                                                    >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        setProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        username: data.username.toLowerCase(),\r\n                        birthDate: new Date(new Date(data.birthDate).setHours(0, 0, 0,)),\r\n                        gender: data.gender,\r\n                        description: data.description,\r\n                        avgRating: 0,\r\n                        numRatings: 0,\r\n                        score: 0\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Profile info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        registrationCompleted: true\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Registration state successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile info                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('username')) {\r\n                    batch.update(docRef, {\"username\": data.username});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('description')) {\r\n                    batch.update(docRef, {\"description\": data.description});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('gender')) {\r\n                    batch.update(docRef, {\"gender\": data.gender});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('birthDate')) {\r\n                    batch.update(docRef, {\"birthDate\": new Date(new Date(data.birthDate).setHours(0, 0, 0,))});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('knownLanguages')) {\r\n                    batch.update(docRef, {\"knownLanguages\": data.knownLanguages});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('languagesToLearn')) {\r\n                    batch.update(docRef, {\"languagesToLearn\": data.languagesToLearn});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Profile info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        knownLanguages: data.knownLanguages,\r\n                        languagesToLearn: data.languagesToLearn,\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User languages info successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadProfileImg ~                                                        >\r\n        // To upload a profile image to firebase storage                               >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        uploadProfileImg: function (context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let userID = firebase.auth().currentUser.uid;\r\n                let path = \"UserProfileImages/\" + userID;\r\n\r\n                let data = {\r\n                    img: img,\r\n                    path: path\r\n                };\r\n\r\n                context.dispatch('uploadImg', data)\r\n                    .then((url) => {\r\n                        resolve(url);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadImg ~                                                               >\r\n        // To upload an image to firebase storage                                      >\r\n        // parameters required: data {path, img}                                       >\r\n        //----------------------------------------------------------------------------->\r\n        uploadImg: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let storageDB = firebase.storage().ref().child(data.path);\r\n                storageDB.putString(data.img, 'base64')\r\n                    .then(() => {\r\n                        storageDB.getDownloadURL().then((url) => {\r\n                            console.log('User profile image uploaded.');\r\n                            resolve(url)\r\n                        })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(uploadingImageError);\r\n                            });\r\n                    }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image url in firebase profile                           >\r\n        // parameters required: url                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg: function (context, url) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        profileImg: url\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User profile image successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateUserLocation ~                                                      >\r\n        // To update user location in firebase using GeoFirestore library              >\r\n        // parameters required: location{lat, lng}                                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateUserLocation: function (context, location) {\r\n            let geoFirestore = new GeoFirestore(firebase.firestore());\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                geoFirestore.collection('UserLocations').doc(firebase.auth().currentUser.uid).set({\r\n                    coordinates: new firebase.firestore.GeoPoint(location.lat, location.lng),\r\n                    date: new Date()\r\n                }).then(function () {\r\n                    console.log(\"User location successfully written in firebase.\");\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get user location                                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UserLocations\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"User location successfully retrieved from firebase.\");\r\n                        let location = {\r\n                            lat: doc.data().l[0],\r\n                            lng: doc.data().l[1]\r\n                        };\r\n                        resolve(location);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------  RATINGS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        // return: ratingsInfo/null                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings: function () {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).get().then(function (doc) {\r\n                    console.log(\"User ratings successfully retrieved from firebase.\");\r\n\r\n                    if (doc.exists) {\r\n                        resolve(doc.data());\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRating ~                                                              >\r\n        // To set user rating given by the logged user                                 >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        setRating: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let newRating = {};\r\n\r\n                newRating[data.id] = data.rating;\r\n                if (data.rating) {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).set(newRating, {merge: true})\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully written in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).update({\r\n                        [data.id]: firebase.firestore.FieldValue.delete()\r\n                    })\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully deleted in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------  SEARCH ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextUsersPageEmpty ~                                                    >\r\n        // To check that if we search users with pagination, next page won't be empty  >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextUsersPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let geoFirestore = new GeoFirestore(firestoreDB);\r\n                let page;\r\n                let lastUserShowed = data.lastUserShowed;\r\n                let newLastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextUsersPage ~                                                        >\r\n        // To get search users with pagination                                         >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: {newLastUserShowed, users}                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getNextUsersPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let geoFirestore = new GeoFirestore(firestoreDB);\r\n                let page;\r\n                let newLastUserShowed;\r\n                let lastUserShowed = data.lastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> END USERNAME FILTERING\r\n\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n\r\n                if (data.lastUserShowed == null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAt(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else if (data.lastUserShowed != null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n                        newLastUserShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n\r\n                        resolve({\r\n                            newLastUserShowed: newLastUserShowed,\r\n                            users: newDocs\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUserIDs ~                                                        >\r\n        // To get IDs of nearby users                                                  >\r\n        // parameters required: data{location, maxDistance}                            >\r\n        // return: ids[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUserIDs(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUsersWithSimilarUsername ~                                             >\r\n        // To get profiles of users which username starts with the one passed as a     >\r\n        // parameter.                                                                  >\r\n        // parameters required: username                                               >\r\n        // return: userProfiles[]                                                      >\r\n        //----------------------------------------------------------------------------->\r\n        getUsersWithSimilarUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- EVENTS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                            >\r\n        // To get an event by its id                                                   >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(id).get()\r\n                    .then((doc) => {\r\n\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextEventsPage ~                                                       >\r\n        // To get events with pagination                                               >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: {newLastEventShowed, events}                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getNextEventsPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                if (lastEventShowed == null) {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAt(lastEventShowed);\r\n                } else {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                }\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        newLastEventShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve({\r\n                            newLastEventShowed: newLastEventShowed,\r\n                            events: eventsRetrieved\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventsToBeCelebrated ~                                                 >\r\n        // To get events which will be celebrated in the future                        >\r\n        // return: events[]                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getEventsToBeCelebrated: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\");\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(eventsRetrieved);\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextEventsPageEmpty ~                                                   >\r\n        // To check if next page of events is empty                                    >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextEventsPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        resolve(documentSnapshots.docs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add the logged user to an Event                                          >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayUnion(firebase.auth().currentUser.uid)\r\n                }).then(function (documentSnapshots) {\r\n                    console.log(\"User successfully added to event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove the logged user from an Event                                     >\r\n        // parameters required: eventID                                                >\r\n        // return: userID                                                              >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayRemove(firebase.auth().currentUser.uid)\r\n                }).then(function (documentSnapshots) {\r\n                    console.log(\"User successfully remove from event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*--------------------------  CHATS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatMessagesListener ~                                              >\r\n        // To create a listener for chat messages by chat id                           >\r\n        // parameters required: chatID                                                 >\r\n        // return: messages                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        createChatMessagesListener: function (context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\")\r\n                        .onSnapshot(function (chatMessages) {\r\n\r\n                            let messages = chatMessages.docChanges().map(change => {\r\n                                const id = change.doc.id;\r\n                                const dataDocs = change.doc.data();\r\n                                return {id, change: change.type, ...dataDocs};\r\n                            });\r\n\r\n                            let formattedChatMessages = {\r\n                                id: chatID,\r\n                                messages: messages,\r\n                                listener: docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatMessagesChange\", formattedChatMessages, {root: true}).then(() => {\r\n                                resolve();\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setMessagesToRead ~                                                       >\r\n        // To set messages unread in chat to read state                                >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setMessagesToRead(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let promises = [];\r\n\r\n                let batch = firestoreDB.batch();\r\n\r\n                data.messages.forEach(message => {\r\n                    batch.update(firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc(message),\r\n                        {\r\n                            'read': true\r\n                        });\r\n                });\r\n\r\n                batch.commit().then(function () {\r\n                    resolve();\r\n                })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addMessagesToChat ~                                                       >\r\n        // To add a new message to a chat in firebase                                  >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        addMessagesToChat(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newMessage = {\r\n                    date: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    sender: data.message.sender,\r\n                    read: false,\r\n                    text: data.message.text,\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc().set(newMessage)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding message\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addChat ~                                                                 >\r\n        // To create a new chat and add it to the user chat list                       >\r\n        // parameters required: chat{id, users[]}                                      >\r\n        //----------------------------------------------------------------------------->\r\n        addChat(context, chat) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newChat = {\r\n                    users: chat.users,\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chat.id).set(newChat)\r\n                    .then(() => {\r\n                        firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update({chats: firebase.firestore.FieldValue.arrayUnion(chat.id)})\r\n                            .then(() => {\r\n                                resolve();\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding chat\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getChatByID ~                                                             >\r\n        // To get a chat by its id                                                     >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getChatByID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chatID).get()\r\n                    .then((doc) => {\r\n                        resolve({\r\n                            id: doc.id,\r\n                            ...doc.data()\r\n                        });\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- RANKING ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getTop100RankingUsers ~                                                   >\r\n        // To get the top 100 ranked users in the app                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getTop100RankingUsers: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page = firestoreDB.collection(\"Ranking\");\r\n                page = page.orderBy(\"position\").limit(Constants.MAX_RANKING_PAGE_SIZE);\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserRankingPositionByID ~                                              >\r\n        // To get user position in app ranking                                         >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getUserRankingPositionByID: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Ranking\").where(\"id\", \"==\", userID).get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        if (newDocs.length > 1 || newDocs.length < 1) {\r\n                            resolve(null);\r\n                        } else {\r\n                            resolve(newDocs[0]);\r\n                        }\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n    },\r\n\r\n}"],"sourceRoot":""}