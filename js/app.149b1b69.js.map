{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?9745","webpack:///./src/views/Home.vue?cbb6","webpack:///./src/store/Constants.js","webpack:///./src/store/AuxMethods.js","webpack:///./src/App.vue?4635","webpack:///src/App.vue","webpack:///./src/App.vue?0bd2","webpack:///./src/App.vue","webpack:///./src/views/Home.vue?af25","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?f351","webpack:///./src/views/Home.vue","webpack:///./src/I18NMessages.js","webpack:///./src/i18n.js","webpack:///./src/store/modules/database.js","webpack:///./src/store/modules/permissions.js","webpack:///./src/store/modules/users.js","webpack:///./src/store/modules/user.js","webpack:///./src/store/modules/events.js","webpack:///./src/store/modules/chats.js","webpack:///./src/store/modules/ranking.js","webpack:///./src/store/store.js","webpack:///./src/router.js","webpack:///./src/registerServiceWorker.js","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js","webpack:///./src/assets/WhiteLogoWeBabble.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","RULE_MIN_VALUE_CHARACTERS_USERNAME","RULE_MAX_VALUE_CHARACTERS_USERNAME","RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_MIN_VALUE_AGE","RANKING_PAGE_SIZE","MAX_RANKING_PAGE_SIZE","SEARCHED_USERS_PAGE_SIZE","EVENTS_PAGE_SIZE","MIN_USER_AGE","MAX_USER_AGE","IMG_USER_PROFILE_HEADER","IMG_EMOJI_SAD_FACE","arraysContainSameElements","arr1","arr2","Array","isArray","arr1_aux","concat","sort","arr2_aux","shuffle","array","Math","random","emptyCallback","angleInRad","x","PI","generateChatID","id1","id2","chatID","_vm","this","_h","$createElement","_c","_self","staticStyle","_e","staticRenderFns","component","VApp","staticClass","attrs","_v","_s","sloganText","on","$event","$router","createAnAccountText","toLogInText","VBtn","VContainer","messages","es","ERROR_GENERIC_PROBLEM","ERROR_GENERIC_CONNECTION_PROBLEM","ERROR_GENERIC_DATABASE_PROBLEM","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME","ERROR_WRONG_EMAIL_PASSWORD_COMBINATION","ERROR_UPLOADING_IMAGE","ERROR_SOMETHING_HAPPENED","ERROR_API_FILEREADER_NOT_SUPPORTED","ERROR_PASSWORDS_DONT_MATCH","ERROR_TOO_MANY_REQUESTS","ERROR_TEXT_WRONG_PASSWORD","ERROR_NO_ACCOUNT_WITH_THIS_EMAIL","ERROR_GETTING_CURRENT_LOCATION","ERROR_COULD_NOT_SET_YOUR_RATING","ERROR_PROBLEM_RETRIEVING_RANKING","ERROR_PROBLEM_GETTING_CURRENT_LOCATION","ERROR_PROBLEM_GETTING_NEARBY_USERS","ERROR_PROBLEM_GETTING_EVENTS","RULE_TEXT_MANDATORY_FIELD","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING","RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD","RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER","ASK_FOR_IMAGE_SELECTION","TEXT_VERIFICATION_EMAIL_SENT_TO","TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE","TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE","TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGES","TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE","TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE","TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGE","TEXT_LANGUAGE","TEXT_GENDER","TEXT_DISTANCE","TEXT_AGE","TEXT_FILTER_BY_MOTHER_LANGUAGE","TEXT_FILTER_BY_LANGUAGE_TO_LEARN","TEXT_SEARCH","TEXT_NO_FIT_USERS_TO_LIST","TEXT_FILTERS","TEXT_RATE_USER","TEXT_YOU","TEXT_CANCEL","TEXT_RATE","TEXT_REMOVE","TEXT_NO_LIMIT","TEXT_REMOVE_FILTERS","TEXT_YOUR_PROFILE","TEXT_EDIT","TEXT_EDIT_PROFILE","TEXT_USERS","TEXT_TO_FILTER","TEXT_EVENTS","TEXT_RANKING","TEXT_CHATS","TEXT_CLOSE","TEXT_SHOW_USERS","TEXT_OF","TEXT_CREATE_YOUR_ACCOUNT","TEXT_CREATE_AN_ACCOUNT","TEXT_NAME","TEXT_LASTNAME","TEXT_EMAIL","TEXT_EMAIL_DIRECTION","TEXT_PASSWORD","TEXT_REPEAT_PASSWORD","TEXT_REGISTER","TEXT_REGISTER_NOW","TEXT_ALREADY_HAVE_AN_ACCOUNT","TEXT_ACCESS_NOW","TEXT_ACCESS_TO_YOUR_ACCOUNT","TEXT_VERIFY_YOUR_EMAIL","TEXT_USERNAME","TEXT_FILL_YOUR_PROFILE","TEXT_BIRTHDATE","TEXT_TELL_US_A_LITTLE_ABOUT_YOU","TEXT_TO_CONTINUE","TEXT_YOUR_LANGUAGES","TEXT_WOMAN","TEXT_MAN","TEXT_ANY","TEXT_OTHER","TEXT_CHOOSE_YOUR_PROFILE_IMAGE","TEXT_PROFILE_IMAGE","TEXT_EMAIL_NOT_VALID","TEXT_USERNAME_NOT_VALID","TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD","TEXT_STILL_DONT_HAVE_AN_ACCOUNT","TEXT_TO_LOG_IN","TEXT_TO_LOG_OUT","TEXT_RESEND_EMAIL","TEXT_YOU_ARE_ABOUT_TO_LOG_OUT","TEXT_CONFIRM","TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT","TEXT_PROFILE_INFO","TEXT_LANGUAGES_TO_PRACTICE","TEXT_SAVE","TEXT_SETTINGS","TEXT_ACCOUNT","TEXT_PERMISSIONS","TEXT_NAME_AND_LASTNAME","TEXT_CHANGE_NAME_AND_LASTNAME","TEXT_CHANGE_EMAIL","TEXT_UPDATE","TEXT_VERIFY_YOUR_PASSWORD","TEXT_REMOVE_ACCOUNT","TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE","TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED","TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED","TEXT_CHANGE_PASSWORD","TEXT_CURRENT_PASSWORD","TEXT_NEW_PASSWORD","TEXT_CONFIRM_PASSWORD","TEXT_UPDATE_PASSWORD","TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD","TEXT_RESET_PASSWORD","TEXT_RESET_PASSWORD_INSTRUCTIONS","TEXT_SPACE_YEARS","TEXT_PARTICIPANTS","TEXT_NO_PARTICIPANTS_YET","TEXT_VERIFICATION_EMAIL_SENT","TEXT_NO_USERS_MATCH_SEARCH","TEXT_NO_EVENTS_AVAILABLE","TEXT_NO_CHATS_AVAILABLE","TEXT_NO_CHATS_MATCH_SEARCH","TEXT_LANGUAGE_INVOLVED_IN_EVENTS","TEXT_LOCATION_PERMISSION_NOT_GRANTED","TEXT_CONFIRM_EVENT_PARTICIPATION","TEXT_CANCEL_EVENT_PARTICIPATION","TEXT_APP_LANGUAGE","TEXT_LANGUAGE_OF_APP","TEXT_LANGUAGE_DE","TEXT_LANGUAGE_ZH","TEXT_LANGUAGE_ES","TEXT_LANGUAGE_FR","TEXT_LANGUAGE_EN","TEXT_LANGUAGE_IT","TEXT_LANGUAGE_JA","TEXT_LANGUAGE_PT","TEXT_LANGUAGE_ALL","TEXT_WE_BABBLE_SLOGAN","TEXT_LOCATION","TEXT_NOTIFICATIONS","TEXT_GRANTED","TEXT_NOT_GRANTED","en","dateTimeFormats","abbrMonth","month","short","year","day","long","weekday","hour","minute","hour12","Vue","use","VueI18n","localeLanguage","navigator","language","i18n","locale","I18NMessages","Vuex","genericDatabaseError","alreadyRegisteredEmailError","emailPasswordCombinationError","tooManyRequestsError","genericError","uploadingImageError","namespaced","state","getters","mutations","actions","isUserAuth","firebase","currentUser","setAccount","context","firestoreDB","collection","doc","uid","set","lastName","merge","log","catch","askForMessagingPermission","requestPermission","generatePushNotificationToken","getToken","token","localStorage","getItem","currentMessageToken","update","tokens","FieldValue","arrayUnion","getAccount","id","email","createAccountListener","userID","docRef","onSnapshot","user","formattedUser","dispatch","root","createAccount","createUserWithEmailAndPassword","password","setPersistance","setPersistence","Auth","Persistence","LOCAL","login","signInWithEmailAndPassword","logout","arrayRemove","signOut","sendEmailVerification","isEmailVerified","reload","emailVerified","sendPasswordResetEmail","updateAccountData","batch","infoToUpdate","commit","updateAccountEmail","updateEmail","updateAccountPassword","updatePassword","getProfileByUID","toDate","setHours","getProfile","profileInfo","getMultipleProfilesByUID","ids","userProfiles","forEach","getProfileByUsername","username","where","querySnapshot","size","docs","setProfile","toLowerCase","birthDate","Date","gender","description","avgRating","numRatings","score","setRegistrationCompleted","registrationCompleted","updateProfile","knownLanguages","languagesToLearn","setLanguages","uploadProfileImg","img","path","url","uploadImg","storageDB","ref","child","putString","getDownloadURL","setProfileImg","profileImg","updateUserLocation","location","geoFirestore","GeoFirestore","coordinates","GeoPoint","lat","lng","date","getLocation","getRatings","exists","setRating","newRating","rating","delete","isNextUsersPageEmpty","page","lastUserShowed","filters","ageRange","Constants","orderBy","currentDate","setFullYear","getFullYear","filterBy","languageToLearn","knownLanguage","startAfter","endAt","limit","documentSnapshots","searchedUserIndex","findIndex","searchedUser","newDocs","map","dataDocs","getNextUsersPage","newLastUserShowed","startAt","users","getNearbyUserIDs","geofirestore","queryNearbyUsers","near","center","radius","maxDistance","snapshot","getEventByID","getNextEventsPage","newLastEventShowed","lastEventShowed","languageInvolved","eventsRetrieved","events","getEventsToBeCelebrated","isNextEventsPageEmpty","addParticipantToEvent","eventID","participants","removeParticipantFromEvent","createChatMessagesListener","chatMessages","docChanges","change","formattedChatMessages","setMessagesToRead","addMessagesToChat","newMessage","serverTimestamp","sender","text","addChat","chat","newChat","chats","getChatByID","getTop100RankingUsers","position","getUserRankingPositionByID","database","isGeolocationPermissionGranted","isPushNotificationPermissionGranted","getIsGeolocationPermissionGranted","getIsPushNotificationPermissionGranted","resetState","setIsGeolocationPermissionGranted","setIsPushNotificationPermissionGranted","checkForGeolocationPermission","permissions","query","geolocation","getCurrentPosition","AuxMethods","onchange","checkForPushNotificationsPermission","isPermissionGranted","searchedUsersIDs","genderFilter","ageRangeFilter","languageFilter","searchByUsernameFilter","maxDistanceFilter","maxDistanceRanges","maxDistanceRangesText","locationFilter","nearbyUsersIDs","distanceSearchFilter","getUsers","getLanguagesByUserID","getGenderFilter","getAgeRangeFilter","getLanguageFilter","getSearchByUsernameFilter","getMaxDistanceFilter","getMaxDistanceRanges","getMaxDistanceRangesText","getUserByID","getNearbyUsersIDs","getNearbyUsersIDsLength","areThereFiltersOn","getFilters","filtersOn","getLastUserShowed","getSearchedUsers","searchedUsersReturn","getSearchedUsersIDsLength","getSearchedUsersIDs","setUsers","setGenderFilter","setAgeRangeFilter","setNearbyUsersIDs","setLanguageFilter","setLocationFilter","setSearchByUsernameFilter","setMaxDistanceFilter","addUser","addSearchedUserID","resetSearchedUsersIDs","setLastUserShowed","addRating","userTo","prev","newAvgRating","areThereMore","isEmpty","data2","isEmpty2","areThereMoreNearbyUsers","allIDs","idsToGetProfiles","isValid","startsWith","languageToLearnIndex","lang","knownLanguageIndex","getNearbyUsersProfiles","usersAdded","resetSearchedUsers","setFilters","resetFilters","alreadyAccountUsernameError","gettingCurrentLocationError","role","ratings","genderOptions","defaultProfileImg","languageOptions","getName","getID","getLastName","getEmail","getRole","getChats","getUsername","getBirthDate","getGender","getDescription","getProfileImg","getAvgRating","getNumRatings","getKnownLanguages","getLanguagesToLearn","getGenderImgByID","getGenderDefaultProfileImgByUserGender","getGenderOptionsAsArray","keys","getLanguageImgByID","getLanguageOptionsAsArray","getLanguageFromLanguageOptionsByID","getRating","setIDe","setName","setLastName","setEmail","setRole","setChats","accountInfo","setUsername","setBirthDate","setGender","setDescription","setAvgRating","setNumRatings","setKnownLanguages","setLanguagesToLearn","setRatings","setLocation","initState","generateNotificationToken","updateAccountNameAndLastName","isUserLogged","isIt","checkIfEmailIsVerified","isVerified","checkIfUsernameIsAlreadyRegistered","createProfile","isAlreadyRegistered","nextTick","getRegistrationState","checkRegistrationState","getCurrentLocation","coords","latitude","longitude","ratingsInfo","rateUser","currentLocation","eventsToShowIDs","mapEventsToShowIDs","languageInvolvedFilter","eventsTab","getLanguageInvolvedFilter","getEvents","getEventsTab","getEventsToShow","eventsToShow","distance","userLocation","haversine","nEvent","getMapEventsToShow","getLastEventShowed","amIParticipating","found","find","participantID","setLanguageInvolvedFilter","setEventsTab","resetEventsToShowIDs","addEvent","addEventToShow","addMapEventToShow","setEventsToShowIDs","setLastEventShowed","eventLocation","_lat","_long","eventNonFormattedLoc","getAllEvents","getEventParticipants","chatsToShowIDs","chatListListener","chatMessagesListeners","usernameFilter","getChatsToShowIDs","getChatMessagesByChatID","getUnreadMessagesByChatID","myID","unreadMessages","read","getUnreadMessages","count","getChatsToShow","chatsToShow","auxChat","lastMessage","lowNotMe","getUserByChatID","includes","getNotReadMessagesCountByChatID","addChatMessagesListener","listener","updateChatMessages","index","mMessage","sortChatMessagesByDate","compareChatMessagesByDate","a","b","dateA","dateB","addChatToShow","sortChatsToShowByLastMessage","compareChatsByLastMessageDate","chatALastMessageDate","chatBLastMessageDate","setUsernameFilter","setChatListListener","pushChatMessages","mp","alreadyAdded","manageChatListChange","manageChatMessagesChange","newMessages","modifiedMessagesToRead","modifiedMessagesDated","setChatMessagesToReadByChatID","sendNewChatMessage","messageText","createChatListeners","rankingUsers","rankingUsersIDs","rankingUser","getRankingUsersToShow","rus","ru","getRankedUserByIndex","getRankingUsers","setRankingUser","setRankingUsers","resetRankingUsers","resetRankingUsersIDs","addRankingUserID","rankingUserID","top100Users","userIndex","getPagedRankingUsers","newUserShowed","pageEnding","areThereMoreRankingUsersToShow","Store","ranking","appInfoLoaded","getAppInfoLoaded","setAppInfoLoaded","getLoggedUser","resetAppState","$i18n","initAppInfo","Router","router","base","process","routes","redirect","Home","meta","requiresAuth","children","menu","beforeEach","to","from","next","auth","matched","some","record","store","registrationState","register","ready","registered","cached","updatefound","updated","offline","Vuetify","icons","iconfont","theme","themes","light","primary","secondary","thirdary","accent","info","success","warning","VueChatScroll","VueGoogleMaps","load","libraries","config","productionTip","app","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","db","firestore","settings","timestampsInSnapshots","enablePersistence","experimentalTabSynchronization","storage","messaging","onAuthStateChanged","vuetify","render","h","App","components","$mount"],"mappings":"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","file":"js/app.149b1b69.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-280e35b4\":\"62188993\",\"chunk-5a05d3e8\":\"b3646611\",\"chunk-34dc2d26\":\"c917239b\",\"chunk-fd58f02a\":\"25046192\",\"chunk-3030d936\":\"601940b0\",\"chunk-390e2f6f\":\"8a6b7636\",\"chunk-347cda0c\":\"7b219aee\",\"chunk-149ca684\":\"18530abe\",\"chunk-4ab0690a\":\"6276fce3\",\"chunk-2ab413da\":\"57e62e98\",\"chunk-b42009f6\":\"f7cab2a7\",\"chunk-622f8ab8\":\"06c6d001\",\"chunk-047f451e\":\"458b0035\",\"chunk-0ad883c1\":\"7aef50b7\",\"chunk-d67ca8dc\":\"c03f5a74\",\"chunk-37c497f4\":\"810305c7\",\"chunk-418c7fcf\":\"4b4a452e\",\"chunk-66c48af3\":\"c4942ed9\",\"chunk-9f6958ae\":\"eee84f17\",\"chunk-f00c2712\":\"4d1f0a00\",\"chunk-45d3204c\":\"1e030d75\",\"chunk-49302222\":\"b1a0236c\",\"chunk-737f7ee4\":\"ab4aa0d0\",\"chunk-453e4603\":\"4335e6a8\",\"chunk-e380ce90\":\"469a5248\",\"chunk-32ce8fe9\":\"22904a08\",\"chunk-bd40728c\":\"7ac25f1b\",\"chunk-0b007d3a\":\"a54ed1b7\",\"chunk-25986f28\":\"168fc727\",\"chunk-116c160c\":\"b6efeb95\",\"chunk-fd745e64\":\"29cd8d3e\",\"chunk-7e8971aa\":\"53e4654b\",\"chunk-eb8d9be2\":\"b7a71cf9\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-280e35b4\":1,\"chunk-5a05d3e8\":1,\"chunk-34dc2d26\":1,\"chunk-fd58f02a\":1,\"chunk-3030d936\":1,\"chunk-390e2f6f\":1,\"chunk-347cda0c\":1,\"chunk-149ca684\":1,\"chunk-4ab0690a\":1,\"chunk-2ab413da\":1,\"chunk-b42009f6\":1,\"chunk-622f8ab8\":1,\"chunk-047f451e\":1,\"chunk-0ad883c1\":1,\"chunk-d67ca8dc\":1,\"chunk-37c497f4\":1,\"chunk-418c7fcf\":1,\"chunk-66c48af3\":1,\"chunk-9f6958ae\":1,\"chunk-f00c2712\":1,\"chunk-45d3204c\":1,\"chunk-49302222\":1,\"chunk-737f7ee4\":1,\"chunk-453e4603\":1,\"chunk-e380ce90\":1,\"chunk-32ce8fe9\":1,\"chunk-bd40728c\":1,\"chunk-0b007d3a\":1,\"chunk-25986f28\":1,\"chunk-116c160c\":1,\"chunk-fd745e64\":1,\"chunk-7e8971aa\":1,\"chunk-eb8d9be2\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-280e35b4\":\"a18fcf01\",\"chunk-5a05d3e8\":\"0cbdf34c\",\"chunk-34dc2d26\":\"f1e34cd5\",\"chunk-fd58f02a\":\"8704c37e\",\"chunk-3030d936\":\"2ac6643f\",\"chunk-390e2f6f\":\"18bde93e\",\"chunk-347cda0c\":\"eefe45bc\",\"chunk-149ca684\":\"8cea3ea7\",\"chunk-4ab0690a\":\"8cea3ea7\",\"chunk-2ab413da\":\"8cea3ea7\",\"chunk-b42009f6\":\"8cea3ea7\",\"chunk-622f8ab8\":\"dc35a825\",\"chunk-047f451e\":\"bff4b736\",\"chunk-0ad883c1\":\"bff4b736\",\"chunk-d67ca8dc\":\"19880077\",\"chunk-37c497f4\":\"b69ea1e5\",\"chunk-418c7fcf\":\"7bebabe2\",\"chunk-66c48af3\":\"6eee45a0\",\"chunk-9f6958ae\":\"076ea886\",\"chunk-f00c2712\":\"0a065bce\",\"chunk-45d3204c\":\"dd781907\",\"chunk-49302222\":\"71f89d8e\",\"chunk-737f7ee4\":\"8cea3ea7\",\"chunk-453e4603\":\"5094ffe8\",\"chunk-e380ce90\":\"bff4b736\",\"chunk-32ce8fe9\":\"1164887d\",\"chunk-bd40728c\":\"81dbf72b\",\"chunk-0b007d3a\":\"650191b5\",\"chunk-25986f28\":\"650191b5\",\"chunk-116c160c\":\"650191b5\",\"chunk-fd745e64\":\"94914940\",\"chunk-7e8971aa\":\"28675a44\",\"chunk-eb8d9be2\":\"803f1308\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"","export default{\r\n\r\n    /* RULES */\r\n    RULE_MIN_VALUE_CHARACTERS_USERNAME: 5,\r\n    RULE_MAX_VALUE_CHARACTERS_USERNAME: 14,\r\n    RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 20,\r\n    RULE_MIN_VALUE_AGE: 16,\r\n    RANKING_PAGE_SIZE: 10,\r\n    MAX_RANKING_PAGE_SIZE: 100,\r\n    SEARCHED_USERS_PAGE_SIZE: 5, //Allways SEARCHED_USERS_PAGE_SIZE >= 2\r\n    EVENTS_PAGE_SIZE: 1,\r\n\r\n    /* DATA */\r\n    MIN_USER_AGE: 16,\r\n    MAX_USER_AGE: 100,\r\n\r\n    /* IMAGES */\r\n    IMG_USER_PROFILE_HEADER: \"img/backgrounds/user_profile_header.png\",\r\n    IMG_EMOJI_SAD_FACE: 'img/emojis/sad_face.png'\r\n}\r\n","export default {\r\n    arraysContainSameElements: function (arr1, arr2) {\r\n\r\n        if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length)\r\n            return false;\r\n\r\n        var arr1_aux = arr1.concat().sort();\r\n        var arr2_aux = arr2.concat().sort();\r\n\r\n        for (var i = 0; i < arr1_aux.length; i++) {\r\n\r\n            if (arr1_aux[i] !== arr2_aux[i])\r\n                return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    },\r\n\r\n    shuffle: function (array) {\r\n        array.sort(() => Math.random() - 0.5);\r\n    },\r\n\r\n    emptyCallback: function () {\r\n\r\n    },\r\n    angleInRad: () => (x) => {\r\n        return x * Math.PI / 180;\r\n    },\r\n\r\n    generateChatID(id1, id2){\r\n        let chatID;\r\n\r\n        if (id1 < id2) {\r\n            chatID = id1 + id2;\r\n        } else {\r\n            chatID = id2 + id1;\r\n        }\r\n\r\n        return chatID;\r\n    }\r\n\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}},[(_vm.dataIsReady)?_c('router-view',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}}):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <v-app style=\"max-width: 100%; height: 100%;\">\r\n        <router-view v-if=\"dataIsReady\" style=\"max-width: 100%; height: 100%;\"/>\r\n    </v-app>\r\n</template>\r\n\r\n<script>\r\n\r\n    import {mapActions} from 'vuex';\r\n\r\n    export default {\r\n        name: 'App',\r\n        components: {},\r\n        data() {\r\n            return {\r\n                dataIsReady: false\r\n            }\r\n        },\r\n        methods: {\r\n            ...mapActions('user', ['getRegistrationState', 'initState']),\r\n            ...mapActions(['getLoggedUser'])\r\n        },\r\n        created() {\r\n            let self = this;\r\n            self.getLoggedUser().then(currentUser => {\r\n                if (currentUser != null && currentUser != undefined) {\r\n                    // user is logged in\r\n                    let resultInitAppInfo = self.initState();\r\n\r\n                    resultInitAppInfo\r\n                        .then(() => {\r\n                            self.dataIsReady = true;\r\n                        })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n                } else {\r\n                    self.$store.dispatch('resetAppState').then(() => {\r\n                        self.$router.replace('home');\r\n                    })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n\r\n                    self.dataIsReady = true;\r\n                    console.log(\"No user logged\");\r\n                }\r\n            });\r\n            //this.checkRegistrationState();\r\n            /*let self = this;\r\n            let resultInitAppInfo = this.initAppInfo();\r\n\r\n            resultInitAppInfo.then(() => {\r\n                self.dataIsReady = true;\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                });*/\r\n\r\n        }\r\n\r\n    };\r\n</script>\r\n\r\n<style>\r\n    #app-toolbar {\r\n        width: 100%;\r\n    }\r\n\r\n    #loading {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n        min-height: 100vh;\r\n    }\r\n</style>\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=5ad92ee3&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\ninstallComponents(component, {VApp})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"img-back\",staticStyle:{\"position\":\"relative\",\"height\":\"100%!important\"}},[_c('v-container',{staticClass:\"home justify-center text-center\",staticStyle:{\"height\":\"100%\",\"position\":\"relative\",\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('p',{staticClass:\"white--text\"},[_vm._v(\"webabble.es\")]),_c('div',{staticStyle:{\"width\":\"100%\",\"margin-top\":\"12vh\"},attrs:{\"align\":\"center\"}},[_c('img',{staticStyle:{\"width\":\"44vw\",\"max-width\":\"200px\"},attrs:{\"src\":require(\"../assets/WhiteLogoWeBabble.png\")}}),_c('p',{staticClass:\"white--text slogan\"},[_c('i',[_vm._v(_vm._s(_vm.sloganText))])])]),_c('div',{staticClass:\"bottom-centered-buttons\",staticStyle:{\"margin-bottom\":\"20px\",\"max-width\":\"600px\"},attrs:{\"align\":\"center\"}},[_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'signUp'})}}},[_vm._v(\"\\n                    \"+_vm._s(_vm.createAnAccountText)+\"\\n                \")])],1),_c('br'),_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'login'})}}},[_vm._v(\"\\n                    \"+_vm._s(_vm.toLogInText)+\"\\n                \")])],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"img-back\" style=\"position: relative; height: 100%!important;\">\r\n        <v-container class=\"home justify-center text-center\" style=\"height: 100%; position: relative; width: 100%\" align=\"center\">\r\n            <p class=\"white--text\">webabble.es</p>\r\n\r\n            <div align=\"center\" style=\"width: 100%; margin-top: 12vh\">\r\n                <img style=\"width: 44vw; max-width: 200px\" src=\"../assets/WhiteLogoWeBabble.png\"/>\r\n                <p class=\"white--text slogan\"><i>{{sloganText}}</i></p>\r\n            </div>\r\n\r\n            <div class=\"bottom-centered-buttons\" align=\"center\" style=\"margin-bottom: 20px; max-width: 600px\">\r\n                <div align=\"center\" style=\"width: 94%\">\r\n                    <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'signUp'})\" style=\"width: 100%;\">\r\n                        {{createAnAccountText}}\r\n                    </v-btn>\r\n                </div>\r\n                <br>\r\n                <div align=\"center\" style=\"width: 94%\">\r\n                    <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'login'})\" style=\"width: 100%\">\r\n                        {{toLogInText}}\r\n                    </v-btn>\r\n                </div>\r\n            </div>\r\n        </v-container>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"home\",\r\n        data() {\r\n            return {\r\n                createAnAccountText: null,\r\n                toLogInText: null,\r\n                sloganText: null\r\n            }\r\n        },\r\n        created() {\r\n            this.createAnAccountText = this.$i18n.t('messages.TEXT_CREATE_AN_ACCOUNT');\r\n            this.toLogInText = this.$i18n.t('messages.TEXT_TO_LOG_IN');\r\n            this.sloganText = this.$i18n.t('messages.TEXT_WE_BABBLE_SLOGAN');\r\n        }\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    .bottom-centered-buttons {\r\n        width: 92.5%;\r\n        bottom: 5%;\r\n        left: 50%;\r\n        transform: translate(-50%, 0);\r\n        position: fixed;\r\n    }\r\n\r\n    .slogan {\r\n        font-family: \"Arial\", sans-serif;\r\n    }\r\n\r\n    .btn-grad {\r\n        background-image: linear-gradient(to right, #02AAB0 0%, #00CDAC 51%, #02AAB0 100%)\r\n    }\r\n\r\n    .btn-grad:hover {\r\n        background-position: right center;\r\n    }\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=758cbadf&scoped=true&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"758cbadf\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VContainer})\n","\r\nexport default {\r\n    messages: {\r\n        es: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'Parece que ha habido un problema con tu petición. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'Parece que ha habido un problema de conexión. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'Parece que ha habido un problema con la base de datos. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'Ya existe una cuenta registrada con ese E-mail. Si es tuya, prueba a iniciar sesión-',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'Ya existe un usuario con ese nombre.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'No existe una cuenta registrada con este E-mail o la contraseña es incorrecta.',\r\n                ERROR_UPLOADING_IMAGE: 'Error subiendo la imagen.',\r\n                ERROR_SOMETHING_HAPPENED: 'Parece que ha ocurrido un error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'Lo sentimos, la API FileReader no está soportada.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Las contraseñas no coinciden',\r\n                ERROR_TOO_MANY_REQUESTS: 'Parece que has realizado demasiadas peticiones en poco tiempo. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'Parece que la contraseña introducida no coincide con su contraseña actual.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'Parece que no hay ninguna cuenta registrada con este E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema accediendo a su ubicación actual.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'Parece que ha habido un problema: No se ha podido guardar su valoración.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'Parece que ha habido un problema al cargar el ranking. Por favor, comprueba tu conexión.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema: no se ha podido obtener tu localizacion actual.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'Parece que ha habido un problema: no se han podido obtener los usuarios cercanos.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'Parece que ha habido un problema: no se han podido obtener los eventos.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'Este campo es obligatorio',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Mínimo 5 caracteres',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Máximo 14 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Mínimo 5 caracteres para realizar la búsqueda',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Mínimo 20 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Mínimo 8 caracteres',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'Debes tener al menos {age} años.',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Por favor, selecciona una imagen',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'Para poder continuar, completa el proceso de verificación a través del enlace que hemos enviado a tu E-mail:',\r\n\r\n                /* TEXTS */\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: '¿Qué idiomas buscas mejorar?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Idiomas que quieres practicar',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: '¿Qué idiomas hablas con soltura?',\r\n                TEXT_MOTHER_LANGUAGES: 'Idiomas maternos',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Idioma que busca mejorar',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Idioma que quiere practicar',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Idioma que habla con soltura',\r\n                TEXT_MOTHER_LANGUAGE: 'Idioma materno',\r\n                TEXT_LANGUAGE: 'Idioma',\r\n                TEXT_GENDER: 'Género',\r\n                TEXT_DISTANCE: 'Distancia',\r\n                TEXT_AGE: 'Edad',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filtrar por idioma materno',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filtrar por idioma que quiere practicar',\r\n                TEXT_SEARCH: 'Buscar',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No se han encontrado usuarios que cumplan con los requisitos.',\r\n                TEXT_FILTERS: 'Filtros',\r\n                TEXT_RATE_USER: 'Valora al usuario',\r\n                TEXT_YOU: 'Tú',\r\n                TEXT_CANCEL: 'Cancelar',\r\n                TEXT_RATE: 'Valorar',\r\n                TEXT_REMOVE: 'Eliminar',\r\n                TEXT_NO_LIMIT: 'Sin límite',\r\n                TEXT_REMOVE_FILTERS: 'Eliminar filtros',\r\n                TEXT_YOUR_PROFILE: 'Tu perfil',\r\n                TEXT_EDIT: 'Editar',\r\n                TEXT_EDIT_PROFILE: 'Editar perfil',\r\n                TEXT_USERS: 'Usuarios',\r\n                TEXT_TO_FILTER: 'Filtrar',\r\n                TEXT_EVENTS: 'Eventos',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Cerrar',\r\n                TEXT_SHOW_USERS: 'Mostrar usuarios',\r\n                TEXT_OF: 'de',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Crea tu cuenta',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Crear una cuenta',\r\n                TEXT_NAME: 'Nombre',\r\n                TEXT_LASTNAME: 'Apellidos',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'Correo electrónico',\r\n                TEXT_PASSWORD: 'Contraseña',\r\n                TEXT_REPEAT_PASSWORD: 'Repite la contraseña',\r\n                TEXT_REGISTER: 'Registrar',\r\n                TEXT_REGISTER_NOW: '¡Regístrate ahora!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: '¿Ya tienes una cuenta?',\r\n                TEXT_ACCESS_NOW: '¡Accede ahora!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Accede a tu cuenta',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verifica tu E-mail',\r\n                TEXT_USERNAME: 'Nombre de usuario',\r\n                TEXT_FILL_YOUR_PROFILE: 'Rellena tu perfil',\r\n                TEXT_BIRTHDATE: 'Fecha de nacimiento',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Cuéntanos un poco sobre ti',\r\n                TEXT_TO_CONTINUE: 'Continuar',\r\n                TEXT_YOUR_LANGUAGES: 'Tus idiomas',\r\n                TEXT_WOMAN: 'Mujer',\r\n                TEXT_MAN: 'Hombre',\r\n                TEXT_ANY: 'Cualquiera',\r\n                TEXT_OTHER: 'Otro',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Elige tu foto de perfil',\r\n                TEXT_PROFILE_IMAGE: 'Foto de perfil',\r\n                TEXT_EMAIL_NOT_VALID: 'E-mail no válido',\r\n                TEXT_USERNAME_NOT_VALID: 'Nombre de usuario no válido',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: '¿Todavía no tienes una cuenta?',\r\n                TEXT_TO_LOG_IN: 'Iniciar sesión',\r\n                TEXT_TO_LOG_OUT: 'Cerrar sesión',\r\n                TEXT_RESEND_EMAIL: 'Volver a enviar E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'Va a salir de su cuenta',\r\n                TEXT_CONFIRM: 'Confirmar',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: '¿Está seguro de que quiere cerrar sesión?',\r\n                TEXT_PROFILE_INFO: 'Información de perfil',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Idiomas a practicar',\r\n                TEXT_SAVE: 'Guardar',\r\n                TEXT_SETTINGS: 'Configuración e información',\r\n                TEXT_ACCOUNT: 'Cuenta',\r\n                TEXT_PERMISSIONS: 'Permisos',\r\n                TEXT_NAME_AND_LASTNAME: 'Nombre y apellidos',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Cambiar nombre y apellidos',\r\n                TEXT_CHANGE_EMAIL: 'Cambiar correo electrónico',\r\n                TEXT_UPDATE: 'Actualizar',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verifica tu contraseña',\r\n                TEXT_REMOVE_ACCOUNT: 'Borrar cuenta',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Vuelve a introducir tu contraseña de WeBabble para continuar.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Tu dirección de correo electrónico ha sido actualizada.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Tu contraseña ha sido actualizada.',\r\n                TEXT_CHANGE_PASSWORD: 'Cambiar contraseña',\r\n                TEXT_CURRENT_PASSWORD: 'Contraseña actual',\r\n                TEXT_NEW_PASSWORD: 'Nueva contraseña',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirmar la contraseña',\r\n                TEXT_UPDATE_PASSWORD: 'Actualizar contraseña',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Introduce tu E-mail y te ayudaremos a recuperar la contraseña:',\r\n                TEXT_RESET_PASSWORD: 'Restablecer contraseña',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'En un breve período de tiempo recibirás un email. Ábrelo y sigue las instrucciones para restablecer tu contraseña.',\r\n                TEXT_SPACE_YEARS: ' años',\r\n                TEXT_PARTICIPANTS: 'Participantes',\r\n                TEXT_NO_PARTICIPANTS_YET: 'Parece que todavía no se ha apuntado nadie. ¡Sé el primero!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'E-mail de verificación enviado.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'Parece que no hay usuarios que coincidan con tu búsqueda.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'Parece que no hay eventos disponibles.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'Parece que no tienes ningún chat todavía. ¡Comienza a hablar con algún usuario!',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'Parece que no tienes chats con usuarios que coincidan con tu búsqueda.',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Idiomas de los eventos',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'Parece que no has dado permiso para acceder a tu localización. Concédelo para poder disponer de esta funcionalidad.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'Te has apuntado a este evento.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'Has cancelado tu participación en este evento.',\r\n                TEXT_APP_LANGUAGE: 'Idioma',\r\n                TEXT_LANGUAGE_OF_APP: 'Idioma de la aplicación',\r\n                TEXT_LANGUAGE_DE: 'Alemán',\r\n                TEXT_LANGUAGE_ZH: 'Chino',\r\n                TEXT_LANGUAGE_ES: 'Español',\r\n                TEXT_LANGUAGE_FR: 'Francés',\r\n                TEXT_LANGUAGE_EN: 'Inglés',\r\n                TEXT_LANGUAGE_IT: 'Italiano',\r\n                TEXT_LANGUAGE_JA: 'Japonés',\r\n                TEXT_LANGUAGE_PT: 'Portugués',\r\n                TEXT_LANGUAGE_ALL: 'Cualquier idioma',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Aprender idiomas ahora es más fácil',\r\n                TEXT_LOCATION: 'Ubicación',\r\n                TEXT_NOTIFICATIONS: 'Notificaciones',\r\n                TEXT_GRANTED: 'Concedido',\r\n                TEXT_NOT_GRANTED: 'No concedido'\r\n            }\r\n        },\r\n        en: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'It seems that there has been a problem with your request. Please, try again later.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'It seems that there has been a connection problem. Please, try again later.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'It seems that there has been a database problem. Please, try again later.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'There is already an account registered with this E-mail. If this account is yours, try to log in.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'This username is already in use.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'There is no account registered with this E-mail or the password is incorrect.',\r\n                ERROR_UPLOADING_IMAGE: 'Error uploading the image.',\r\n                ERROR_SOMETHING_HAPPENED: 'It seems that there has been an error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'We are sorry, the FileReader API is not supported by your browser.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Passwords do not match.',\r\n                ERROR_TOO_MANY_REQUESTS: 'It seems that you made several request in a short time. Please, try again later.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'It seems that the introduced password does not match your current password.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'It seems that there is no account registered with this E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'It seems that there was a problem accessing your current location.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'It seems that there was a problem: your rate could not be submitted.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'It seems that there was a problem while loading Ranking. Please, check your connection.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'It seems that there was a problem: we could not access your current location.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'It seems that there was a problem: we could not retrieve nearby users.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'It seems that there was a problem: we could not retrieve events.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'This field is required.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Minimum 5 characters.',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Maximum 14 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Write at least 5 to search.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Minimum 20 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Minimum 8 characters.',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'You have to be at least {age} years old.',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Please, select an image.',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'In order to continue, complete the verification process through the link we have sent to your E-mail:',\r\n\r\n                /* TEXTS */\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: 'What languages do you want to improve?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Languages ​​you want to practice',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: 'What languages ​​do you speak fluently?',\r\n                TEXT_MOTHER_LANGUAGES: 'First languages',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Language you are looking to improve',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Language you want to practice',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Language you speak fluently',\r\n                TEXT_MOTHER_LANGUAGE: 'First language',\r\n                TEXT_LANGUAGE: 'Language',\r\n                TEXT_GENDER: 'Gender',\r\n                TEXT_DISTANCE: 'Distance',\r\n                TEXT_AGE: 'Age',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filter by mother tongue',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filter by language they want to practice.',\r\n                TEXT_SEARCH: 'Search',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No users found that meet the requirements.',\r\n                TEXT_FILTERS: 'Filters',\r\n                TEXT_RATE_USER: 'Rate user',\r\n                TEXT_YOU: 'You',\r\n                TEXT_CANCEL: 'Cancel',\r\n                TEXT_RATE: 'Rate',\r\n                TEXT_REMOVE: 'Remove',\r\n                TEXT_NO_LIMIT: 'Limitless',\r\n                TEXT_REMOVE_FILTERS: 'Remove filters',\r\n                TEXT_YOUR_PROFILE: 'Your profile',\r\n                TEXT_EDIT: 'Edit',\r\n                TEXT_EDIT_PROFILE: 'Edit profile',\r\n                TEXT_USERS: 'Users',\r\n                TEXT_TO_FILTER: 'Filter',\r\n                TEXT_EVENTS: 'Events',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Close',\r\n                TEXT_SHOW_USERS: 'Show users',\r\n                TEXT_OF: 'of',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Create your account',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Create an account',\r\n                TEXT_NAME: 'Name',\r\n                TEXT_LASTNAME: 'Last name',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'E-mail',\r\n                TEXT_PASSWORD: 'Password',\r\n                TEXT_REPEAT_PASSWORD: 'Repeat password',\r\n                TEXT_REGISTER: 'Sign up',\r\n                TEXT_REGISTER_NOW: 'Sign up now!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: 'Do you already have an account?',\r\n                TEXT_ACCESS_NOW: 'Access now!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Log in into your account',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verify your E-mail',\r\n                TEXT_USERNAME: 'Username',\r\n                TEXT_PROFILE_IMAGE: 'Profile image',\r\n                TEXT_FILL_YOUR_PROFILE: 'Fill your profile',\r\n                TEXT_BIRTHDATE: 'Date of birth',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Tell us a bit about yourself',\r\n                TEXT_TO_CONTINUE: 'Continue',\r\n                TEXT_YOUR_LANGUAGES: 'Your languages',\r\n                TEXT_WOMAN: 'Woman',\r\n                TEXT_MAN: 'Man',\r\n                TEXT_ANY: 'Any',\r\n                TEXT_OTHER: 'Other',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Choose your profile picture',\r\n                TEXT_EMAIL_NOT_VALID: 'Invalid E-mail',\r\n                TEXT_USERNAME_NOT_VALID: 'Invalid username',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: 'Have you forgotten your password?',\r\n                TEXT_TO_LOG_IN: 'Sign in',\r\n                TEXT_TO_LOG_OUT: 'Log out',\r\n                TEXT_RESEND_EMAIL: 'Resend E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'You are going to log out of your account.',\r\n                TEXT_CONFIRM: 'Confirm',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: 'Are you sure you want to log out?',\r\n                TEXT_PROFILE_INFO: 'Profile information',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Languages to practice',\r\n                TEXT_SAVE: 'Save',\r\n                TEXT_SETTINGS: 'Settings and information',\r\n                TEXT_ACCOUNT: 'Account',\r\n                TEXT_PERMISSIONS: 'Permissions',\r\n                TEXT_NAME_AND_LASTNAME: 'Name and last name',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Edit name and last name',\r\n                TEXT_CHANGE_EMAIL: 'Edit E-mail',\r\n                TEXT_UPDATE: 'Update',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verify your password',\r\n                TEXT_REMOVE_ACCOUNT: 'Remove account',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Re-enter your WeBabble password to continue.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Your E-mail address has been updated.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Your password address has been updated.',\r\n                TEXT_CHANGE_PASSWORD: 'Edit password',\r\n                TEXT_CURRENT_PASSWORD: 'Current password',\r\n                TEXT_NEW_PASSWORD: 'New password',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirm password',\r\n                TEXT_UPDATE_PASSWORD: 'Update password',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Enter your E-mail and we will help you recover your password:',\r\n                TEXT_RESET_PASSWORD: 'Restore password',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'In a short period of time you will receive an E-mail. Open it and follow the instructions to reset your password.',\r\n                TEXT_SPACE_YEARS: ' years old',\r\n                TEXT_PARTICIPANTS: 'Participants',\r\n                TEXT_NO_PARTICIPANTS_YET: 'It seems that no one has signed up yet. Be the first!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'Verification E-mail sent.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'There appear to be no users matching your search.',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'There appear to be no chats with users matching your search.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'There seem to be no events available.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'It looks like you do not have any chat yet. Start talking to a user!',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Events languages',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'It seems that you have not given permission to access your location. Grant it to have this functionality.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'You have signed up for this event.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'You have canceled your participation in this event.',\r\n                TEXT_APP_LANGUAGE: 'Language',\r\n                TEXT_LANGUAGE_OF_APP: 'Application language',\r\n                TEXT_LANGUAGE_DE: 'German',\r\n                TEXT_LANGUAGE_ZH: 'Chinese',\r\n                TEXT_LANGUAGE_ES: 'Spanish',\r\n                TEXT_LANGUAGE_FR: 'French',\r\n                TEXT_LANGUAGE_EN: 'English',\r\n                TEXT_LANGUAGE_IT: 'Italian',\r\n                TEXT_LANGUAGE_JA: 'Japanese',\r\n                TEXT_LANGUAGE_PT: 'Portuguese',\r\n                TEXT_LANGUAGE_ALL: 'Any language',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Learning languages is now easier',\r\n                TEXT_LOCATION: 'Location',\r\n                TEXT_NOTIFICATIONS: 'Notifications',\r\n                TEXT_GRANTED: 'Granted',\r\n                TEXT_NOT_GRANTED: 'Not granted'\r\n            }\r\n        }\r\n    },\r\n    dateTimeFormats: {\r\n        'en': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        },\r\n        'es': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        }\r\n    }\r\n}","import Vue from 'vue';\r\nimport VueI18n from 'vue-i18n';\r\nimport I18NMessages from \"./I18NMessages\";\r\nVue.use(VueI18n);\r\n\r\nlet localeLanguage = 'es';\r\n\r\nif(navigator.language === 'es' || navigator.language === 'es-ES'){\r\n    localeLanguage = 'es';\r\n}\r\nelse if(navigator.language === 'en' || navigator.language === 'en-US'){\r\n    localeLanguage = 'en';\r\n}\r\n\r\nconst i18n = new VueI18n({\r\n    locale: localeLanguage, // set locale\r\n    messages: I18NMessages.messages, // set locale messages\r\n    dateTimeFormats: I18NMessages.dateTimeFormats\r\n});\r\n\r\nexport default i18n;","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport * as firebase from \"firebase\";\r\nimport Constants from \"../Constants\";\r\nimport {GeoFirestore} from \"geofirestore\";\r\nimport i18n from \"../../i18n\";\r\n\r\nconst genericDatabaseError = i18n.t('messages.ERROR_GENERIC_DATABASE_PROBLEM');\r\nconst alreadyRegisteredEmailError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL');\r\nconst emailPasswordCombinationError = i18n.t('messages.ERROR_WRONG_EMAIL_PASSWORD_COMBINATION');\r\nconst tooManyRequestsError = i18n.t('messages.ERROR_TOO_MANY_REQUESTS');\r\nconst genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nconst uploadingImageError = i18n.t('messages.ERROR_UPLOADING_IMAGE');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----     DATABASE (Firebase) INTERACTION      -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {},\r\n    getters: {},\r\n    mutations: {},\r\n    actions: {\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- ACCOUNTS ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserAuth ~                                                              >\r\n        // To determine if user is or is not authenticated                             >\r\n        //----------------------------------------------------------------------------->\r\n        isUserAuth: function () {\r\n            return firebase.auth().currentUser;\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setAccount ~                                                              >\r\n        // To set user account info                                                    >\r\n        // parameters required: data {email, password, name, lastName, role}           >\r\n        //----------------------------------------------------------------------------->\r\n        setAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        'name': data.name,\r\n                        'lastName': data.lastName,\r\n                        'role': 'user',\r\n                        'chats': [],\r\n                        'tokens': []\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Account info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ askForMessagingPermission ~                                               >\r\n        // To asf for messaging push notifications permission                          >\r\n        //----------------------------------------------------------------------------->\r\n        askForMessagingPermission() {\r\n            return new Promise(function (resolve, ) {\r\n                firebase.messaging().requestPermission()\r\n                    .then(() => {\r\n                        resolve(true);\r\n                    })\r\n                    .catch(() => {\r\n                        resolve(false);\r\n                    });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generatePushNotificationToken ~                                           >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generatePushNotificationToken() {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                firebase.messaging().getToken().then(async (token) => {\r\n                    if (token) {\r\n                        const currentMessageToken = await window.localStorage.getItem('messagingToken');\r\n\r\n                        console.log('token will be updated', currentMessageToken != token)\r\n                        if (currentMessageToken != token) {\r\n                            console.log(\"token\")\r\n                            let firestoreDB = firebase.firestore();\r\n                            firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayUnion(token)}\r\n                            )\r\n                                .then(() => {\r\n                                    resolve();\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.error(error);\r\n                                    reject(genericDatabaseError);\r\n                                });\r\n                        }\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAccount ~                                                              >\r\n        // To get user auth account info                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getAccount() {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"Account info successfully retrieved from firebase\");\r\n                        resolve({\r\n                            id: doc.id,\r\n                            email: firebase.auth().currentUser.email,\r\n                            ...doc.data()\r\n                        });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccountListener ~                                                   >\r\n        // To listen on changes on user account info                                   >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccountListener: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Accounts\").doc(userID)\r\n                        .onSnapshot(function (user) {\r\n                            let formattedUser = {\r\n                                'id': userID,\r\n                                ...user.data(),\r\n                                'listener': docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatListChange\", formattedUser, {root: true}).then(() => {\r\n                                resolve(formattedUser);\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                    firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n                        .then(() => {\r\n                            console.log(\"Success creating account in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            if (error.code == 'auth/email-already-in-use') {\r\n                                reject(alreadyRegisteredEmailError);\r\n                            } else {\r\n                                reject(genericDatabaseError);\r\n                            }\r\n                        });\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setPersistance ~                                                          >\r\n        // To set firebase account persistance                                         >\r\n        //----------------------------------------------------------------------------->\r\n        setPersistance: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(() => {\r\n                        console.log(\"Success setting firebase account persistence.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error)\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log in firebase user account                                             >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n                    .then(() => {\r\n                        console.log(\"Success logging user in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        if (error.code == 'auth/wrong-password' || error.code == \"auth/user-not-found\") {\r\n                            reject(emailPasswordCombinationError);\r\n                        } else if (error.code == \"auth/too-many-requests\") {\r\n                            reject(tooManyRequestsError);\r\n                        } else {\r\n                            reject(genericError);\r\n                        }\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log out of firebase user account                                         >\r\n        //----------------------------------------------------------------------------->\r\n        logout: function () {\r\n            return new Promise(async function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                if (firebase.auth() != null) {\r\n                    await firebase.messaging().getToken().then(async (token) => {\r\n                        if (token) {\r\n                            await firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayRemove(token)}\r\n                            )\r\n                                .catch(function (error) {\r\n                                    console.error(error);\r\n                                    if (error.code != 'messaging/notifications-blocked') {\r\n                                        reject(error);\r\n                                    }\r\n                                });\r\n                        }\r\n\r\n                    }).catch(function (error) {\r\n                        console.error(error);\r\n\r\n                        if (error.code != 'messaging/failed-serviceworker-registration' && error.code != 'messaging/notifications-blocked') {\r\n                            reject(error);\r\n                        }\r\n                    });\r\n\r\n                    firebase.auth().signOut()\r\n                        .then(() => {\r\n                            resolve();\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(err);\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send firebase account email verification                                 >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.sendEmailVerification().then(function () {\r\n                    console.log('Firebase verification email sent.');\r\n                    resolve();\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    if (error.code == \"auth/too-many-requests\") {\r\n                        reject(tooManyRequestsError);\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isEmailVerified ~                                                         >\r\n        // To check if firebase account email is verified                              >\r\n        //----------------------------------------------------------------------------->\r\n        isEmailVerified: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.reload().then(() => {\r\n                    if (firebase.auth().currentUser.emailVerified) {\r\n                        console.log(\"Firebase account email is verified.\");\r\n                        resolve(true);\r\n                    } else {\r\n                        resolve(false);\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendPasswordResetEmail ~                                                  >\r\n        // To send firebase account password reset email                               >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().sendPasswordResetEmail(email).then(function () {\r\n                    console.log(\"Password reset email sent.\");\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    // An error happened.\r\n                    if (error.code == 'auth/user-not-found') {\r\n                        console.log(\"No account attached to the specified email.\");\r\n                        resolve();\r\n                    } else {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountData ~                                                       >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName], [email]}                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountData: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('name')) {\r\n                    batch.update(docRef, {\"name\": data.name});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('lastName')) {\r\n                    batch.update(docRef, {\"lastName\": data.lastName});\r\n                    infoToUpdate = true;\r\n                }\r\n\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Account info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updateEmail(email).then(function () {\r\n                    console.log(\"Account email successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword: function (context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updatePassword(password).then(function () {\r\n                    console.log(\"Account password successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- PROFILES ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUID ~                                                         >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUID(context, uid) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(uid).get()\r\n                    .then((doc) => {\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            if (doc.data().hasOwnProperty(\"birthDate\")) {\r\n                                doc.data()[\"birthDate\"] = doc.data()[\"birthDate\"].toDate().setHours(0, 0, 0);\r\n                            }\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfile ~                                                              >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfile(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('getProfileByUID', firebase.auth().currentUser.uid)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo && profileInfo.hasOwnProperty(\"birthDate\")) {\r\n                            profileInfo[\"birthDate\"] = profileInfo[\"birthDate\"].toDate().setHours(0, 0, 0);\r\n                        }\r\n\r\n                        console.log(\"Profile info successfully retrieved from firebase\");\r\n                        resolve(profileInfo);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getMultipleProfilesByUID ~                                                >\r\n        // To get multiple user profiles by their uids                                 >\r\n        // parameters required: ids[]                                                  >\r\n        // return: userProfiles[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getMultipleProfilesByUID(context, ids) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let promises = [];\r\n                let userProfiles = [];\r\n\r\n                ids.forEach(id => {\r\n                    promises.push(\r\n                        context.dispatch('getProfileByUID', id)\r\n                            .then((profileInfo) => {\r\n                                userProfiles.push({\r\n                                    id: id,\r\n                                    ...profileInfo\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(genericDatabaseError);\r\n                            })\r\n                    );\r\n                });\r\n                Promise.all(promises).then(function () {\r\n                    resolve(userProfiles);\r\n                })\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUsername ~                                                    >\r\n        // To get user profile info by its username                                    >\r\n        // parameters required: username                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").where(\"username\", \"==\", username).get()\r\n                    .then((querySnapshot) => {\r\n                        if (querySnapshot.size > 0) {\r\n                            console.log(\"Profile info successfully retrieved from firebase\");\r\n                            resolve(querySnapshot.docs);\r\n                        } else {\r\n                            console.log(\"Profile info was not found in firebase\");\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfile ~                                                              >\r\n        // To set user profile info                                                    >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        setProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        username: data.username.toLowerCase(),\r\n                        birthDate: new Date(new Date(data.birthDate).setHours(0, 0, 0)),\r\n                        gender: data.gender,\r\n                        description: data.description,\r\n                        avgRating: 0,\r\n                        numRatings: 0,\r\n                        score: 0\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Profile info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        registrationCompleted: true\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Registration state successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile info                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('username')) {\r\n                    batch.update(docRef, {\"username\": data.username});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('description')) {\r\n                    batch.update(docRef, {\"description\": data.description});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('gender')) {\r\n                    batch.update(docRef, {\"gender\": data.gender});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('birthDate')) {\r\n                    batch.update(docRef, {\"birthDate\": new Date(new Date(data.birthDate).setHours(0, 0, 0))});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('knownLanguages')) {\r\n                    batch.update(docRef, {\"knownLanguages\": data.knownLanguages});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('languagesToLearn')) {\r\n                    batch.update(docRef, {\"languagesToLearn\": data.languagesToLearn});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Profile info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        knownLanguages: data.knownLanguages,\r\n                        languagesToLearn: data.languagesToLearn\r\n},\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User languages info successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadProfileImg ~                                                        >\r\n        // To upload a profile image to firebase storage                               >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        uploadProfileImg: function (context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let userID = firebase.auth().currentUser.uid;\r\n                let path = \"UserProfileImages/\" + userID;\r\n\r\n                let data = {\r\n                    'img': img,\r\n                    'path': path\r\n                };\r\n\r\n                context.dispatch('uploadImg', data)\r\n                    .then((url) => {\r\n                        resolve(url);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadImg ~                                                               >\r\n        // To upload an image to firebase storage                                      >\r\n        // parameters required: data {path, img}                                       >\r\n        //----------------------------------------------------------------------------->\r\n        uploadImg: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let storageDB = firebase.storage().ref().child(data.path);\r\n                storageDB.putString(data.img, 'base64')\r\n                    .then(() => {\r\n                        storageDB.getDownloadURL().then((url) => {\r\n                            console.log('User profile image uploaded.');\r\n                            resolve(url)\r\n                        })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(uploadingImageError);\r\n                            });\r\n                    }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image url in firebase profile                           >\r\n        // parameters required: url                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg: function (context, url) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        profileImg: url\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User profile image successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateUserLocation ~                                                      >\r\n        // To update user location in firebase using GeoFirestore library              >\r\n        // parameters required: location{lat, lng}                                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateUserLocation: function (context, location) {\r\n            let geoFirestore = new GeoFirestore(firebase.firestore());\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                geoFirestore.collection('UserLocations').doc(firebase.auth().currentUser.uid).set({\r\n                    coordinates: new firebase.firestore.GeoPoint(location.lat, location.lng),\r\n                    date: new Date()\r\n                }).then(function () {\r\n                    console.log(\"User location successfully written in firebase.\");\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get user location                                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UserLocations\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"User location successfully retrieved from firebase.\");\r\n                        let location = {\r\n                            'lat': doc.data().l[0],\r\n                            'lng': doc.data().l[1]\r\n                        };\r\n                        resolve(location);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------  RATINGS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        // return: ratingsInfo/null                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings: function () {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).get().then(function (doc) {\r\n                    console.log(\"User ratings successfully retrieved from firebase.\");\r\n\r\n                    if (doc.exists) {\r\n                        resolve(doc.data());\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRating ~                                                              >\r\n        // To set user rating given by the logged user                                 >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        setRating: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let newRating = {};\r\n\r\n                newRating[data.id] = data.rating;\r\n                if (data.rating) {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).set(newRating, {merge: true})\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully written in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).update({\r\n                        [data.id]: firebase.firestore.FieldValue.delete()\r\n                    })\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully deleted in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------  SEARCH ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextUsersPageEmpty ~                                                    >\r\n        // To check that if we search users with pagination, next page won't be empty  >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextUsersPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let lastUserShowed = data.lastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextUsersPage ~                                                        >\r\n        // To get search users with pagination                                         >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: {newLastUserShowed, users}                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getNextUsersPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastUserShowed;\r\n                let lastUserShowed = data.lastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> END USERNAME FILTERING\r\n\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n\r\n                if (data.lastUserShowed == null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAt(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else if (data.lastUserShowed != null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n                        newLastUserShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n\r\n                        resolve({\r\n                            newLastUserShowed: newLastUserShowed,\r\n                            users: newDocs\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUserIDs ~                                                        >\r\n        // To get IDs of nearby users                                                  >\r\n        // parameters required: data{location, maxDistance}                            >\r\n        // return: ids[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUserIDs(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- EVENTS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                            >\r\n        // To get an event by its id                                                   >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(id).get()\r\n                    .then((doc) => {\r\n\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextEventsPage ~                                                       >\r\n        // To get events with pagination                                               >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: {newLastEventShowed, events}                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getNextEventsPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                if (lastEventShowed == null) {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAt(lastEventShowed);\r\n                } else {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                }\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        newLastEventShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve({\r\n                            newLastEventShowed: newLastEventShowed,\r\n                            events: eventsRetrieved\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventsToBeCelebrated ~                                                 >\r\n        // To get events which will be celebrated in the future                        >\r\n        // return: events[]                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getEventsToBeCelebrated: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\");\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(eventsRetrieved);\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextEventsPageEmpty ~                                                   >\r\n        // To check if next page of events is empty                                    >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextEventsPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        resolve(documentSnapshots.docs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add the logged user to an Event                                          >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayUnion(firebase.auth().currentUser.uid)\r\n                }).then(function () {\r\n                    console.log(\"User successfully added to event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove the logged user from an Event                                     >\r\n        // parameters required: eventID                                                >\r\n        // return: userID                                                              >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayRemove(firebase.auth().currentUser.uid)\r\n                }).then(function () {\r\n                    console.log(\"User successfully remove from event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*--------------------------  CHATS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatMessagesListener ~                                              >\r\n        // To create a listener for chat messages by chat id                           >\r\n        // parameters required: chatID                                                 >\r\n        // return: messages                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        createChatMessagesListener: function (context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\")\r\n                        .onSnapshot(function (chatMessages) {\r\n\r\n                            let messages = chatMessages.docChanges().map(change => {\r\n                                const id = change.doc.id;\r\n                                const dataDocs = change.doc.data();\r\n                                return {id, change: change.type, ...dataDocs};\r\n                            });\r\n\r\n                            let formattedChatMessages = {\r\n                                'id': chatID,\r\n                                'messages': messages,\r\n                                'listener': docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatMessagesChange\", formattedChatMessages, {root: true}).then(() => {\r\n                                resolve();\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setMessagesToRead ~                                                       >\r\n        // To set messages unread in chat to read state                                >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setMessagesToRead(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let batch = firestoreDB.batch();\r\n\r\n                data.messages.forEach(message => {\r\n                    batch.update(firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc(message),\r\n                        {\r\n                            'read': true\r\n                        });\r\n                });\r\n\r\n                batch.commit().then(function () {\r\n                    resolve();\r\n                })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addMessagesToChat ~                                                       >\r\n        // To add a new message to a chat in firebase                                  >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        addMessagesToChat(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newMessage = {\r\n                    'date': firebase.firestore.FieldValue.serverTimestamp(),\r\n                    'sender': data.message.sender,\r\n                    'read': false,\r\n                    'text': data.message.text\r\n};\r\n\r\n                firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc().set(newMessage)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding message\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addChat ~                                                                 >\r\n        // To create a new chat and add it to the user chat list                       >\r\n        // parameters required: chat{id, users[]}                                      >\r\n        //----------------------------------------------------------------------------->\r\n        addChat(context, chat) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newChat = {\r\n                    'users': chat.users\r\n};\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chat.id).set(newChat)\r\n                    .then(() => {\r\n                        firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update({chats: firebase.firestore.FieldValue.arrayUnion(chat.id)})\r\n                            .then(() => {\r\n                                resolve();\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding chat\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getChatByID ~                                                             >\r\n        // To get a chat by its id                                                     >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getChatByID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chatID).get()\r\n                    .then((doc) => {\r\n                        resolve({\r\n                            id: doc.id,\r\n                            ...doc.data()\r\n                        });\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- RANKING ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getTop100RankingUsers ~                                                   >\r\n        // To get the top 100 ranked users in the app                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getTop100RankingUsers: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page = firestoreDB.collection(\"Ranking\");\r\n                page = page.orderBy(\"position\").limit(Constants.MAX_RANKING_PAGE_SIZE);\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserRankingPositionByID ~                                              >\r\n        // To get user position in app ranking                                         >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getUserRankingPositionByID: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Ranking\").where(\"id\", \"==\", userID).get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        if (newDocs.length > 1 || newDocs.length < 1) {\r\n                            resolve(null);\r\n                        } else {\r\n                            resolve(newDocs[0]);\r\n                        }\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        }\r\n}\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport AuxMethods from \"../AuxMethods\";\r\nimport database from \"./database\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----        APP PERMISSIONS MANAGEMENT        -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database\r\n    },\r\n    state: {\r\n        isGeolocationPermissionGranted: false,\r\n        isPushNotificationPermissionGranted: false\r\n    },\r\n    getters: {\r\n        getIsGeolocationPermissionGranted: (state) => {\r\n            return state.isGeolocationPermissionGranted;\r\n        },\r\n        getIsPushNotificationPermissionGranted: (state) => {\r\n            return state.isPushNotificationPermissionGranted;\r\n        }\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.isGeolocationPermissionGranted = false;\r\n            state.isPushNotificationPermissionGranted = false;\r\n        },\r\n        setIsGeolocationPermissionGranted(state, isGeolocationPermissionGranted) {\r\n            state.isGeolocationPermissionGranted = isGeolocationPermissionGranted;\r\n        },\r\n        setIsPushNotificationPermissionGranted(state, isPushNotificationPermissionGranted) {\r\n            state.isPushNotificationPermissionGranted = isPushNotificationPermissionGranted;\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForGeolocationPermission ~                                           >\r\n        // To check if geolocation permission has been granted by the user             >\r\n        //----------------------------------------------------------------------------->\r\n        checkForGeolocationPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                navigator.permissions.query({name: 'geolocation'}).then(function (result) {\r\n                    if (result.state == 'granted') {\r\n                        // Permission is already granted\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                        context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n\r\n                        resolve(true);\r\n                    } else if (result.state == 'prompt') {\r\n                        // Navigator will ask for permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n                    } else if (result.state == 'denied') {\r\n                        // User has denied permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n\r\n                    result.onchange = function () {\r\n                        // Whenever permission state changes\r\n\r\n                        if (result.state == 'granted') {\r\n                            // Permission is already granted\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                            context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n\r\n                            resolve(true);\r\n                        } else if (result.state == 'prompt') {\r\n                            // Navigator will ask for permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n\r\n                        } else if (result.state == 'denied') {\r\n                            // User has denied permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForPushNotificationsPermission ~                                     >\r\n        // To check if push notifications permission has been granted by the user      >\r\n        //----------------------------------------------------------------------------->\r\n        checkForPushNotificationsPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch(\"database/askForMessagingPermission\").then(function (isPermissionGranted) {\r\n                    if (isPermissionGranted) {\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", true);\r\n                        context.dispatch('user/generateNotificationToken', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                        resolve(true);\r\n                    } else{\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n}\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                APP USERS                 -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        /* All users retrieved */\r\n        users: {},\r\n\r\n        /* User IDs result of the searching process */\r\n        searchedUsersIDs: [],\r\n        lastUserShowed: null,\r\n        genderFilter: \"O\",\r\n        ageRangeFilter: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n        languageFilter: {\r\n            filterBy: \"languageToLearn\",\r\n            knownLanguage: \"all\",\r\n            languageToLearn: \"all\"\r\n        },\r\n        searchByUsernameFilter: null,\r\n        maxDistanceFilter: 3,\r\n        maxDistanceRanges: [1, 5, 10, null],\r\n        maxDistanceRangesText: ['1 km', '5 km', '10 km', '∞'],\r\n        locationFilter: null,\r\n        nearbyUsersIDs: null,\r\n\r\n        /* Filtering fields */\r\n        distanceSearchFilter: null\r\n},\r\n    getters: {\r\n\r\n        getUsers: (state) => {\r\n            return state.users;\r\n        },\r\n        getLanguagesByUserID: (state) => (id) => {\r\n            return state.users[id].knownLanguages.concat(state.users[id].languagesToLearn);\r\n        },\r\n        getGenderFilter: (state) => {\r\n            return state.genderFilter;\r\n        },\r\n        getAgeRangeFilter: (state) => {\r\n            return state.ageRangeFilter;\r\n        },\r\n        getLanguageFilter: (state) => {\r\n            return state.languageFilter;\r\n        },\r\n        getSearchByUsernameFilter: (state) => {\r\n            return state.searchByUsernameFilter;\r\n        },\r\n        getMaxDistanceFilter: (state) => {\r\n            return state.maxDistanceFilter;\r\n        },\r\n        getMaxDistanceRanges: (state) => {\r\n            return state.maxDistanceRanges;\r\n        },\r\n        getMaxDistanceRangesText: (state) => {\r\n            return state.maxDistanceRangesText;\r\n        },\r\n        getUserByID: (state) => (id) => {\r\n            return state.users[id];\r\n        },\r\n        getNearbyUsersIDs: (state) => {\r\n            return state.nearbyUsersIDs;\r\n        },\r\n        getNearbyUsersIDsLength: (state) => {\r\n            return state.nearbyUsersIDs.length;\r\n        },\r\n        areThereFiltersOn: (state, getters) => {\r\n            let filters = getters.getFilters;\r\n            let filtersOn = false;\r\n\r\n            if (filters.gender === \"M\" || filters.gender === \"W\"\r\n                || filters.ageRange[0] > Constants.MIN_USER_AGE\r\n                || filters.ageRange[1] < Constants.MAX_USER_AGE\r\n                || (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\")\r\n                || (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\")\r\n                || filters.maxDistance != null) {\r\n                filtersOn = true;\r\n            }\r\n\r\n            return filtersOn;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                gender: state.genderFilter,\r\n                ageRange: state.ageRangeFilter,\r\n                language: state.languageFilter,\r\n                maxDistance: state.maxDistanceRanges[state.maxDistanceFilter],\r\n                location: state.locationFilter,\r\n                username: state.searchByUsernameFilter\r\n            };\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getSearchedUsers: (state) => {\r\n\r\n            let searchedUsersReturn = [];\r\n\r\n            state.searchedUsersIDs.forEach(userID => {\r\n                searchedUsersReturn.push({\r\n                    id: userID,\r\n                    ...state.users[userID]\r\n                });\r\n            });\r\n\r\n            return searchedUsersReturn;\r\n        },\r\n        getSearchedUsersIDsLength: (state) => {\r\n            return state.searchedUsersIDs.length;\r\n        },\r\n        getSearchedUsersIDs: (state) => {\r\n            return state.searchedUsersIDs;\r\n        }\r\n},\r\n    mutations: {\r\n        resetState(state) {\r\n            /* All users retrieved */\r\n            state.users = {};\r\n\r\n            /* User IDs result of the searching process */\r\n            state.searchedUsersIDs = [];\r\n            state.lastUserShowed = null;\r\n            state.genderFilter = \"O\";\r\n            state.ageRangeFilter = [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE];\r\n            state.languageFilter = {\r\n                'filterBy': \"languageToLearn\",\r\n                'knownLanguage': \"all\",\r\n                'languageToLearn': \"all\"\r\n            };\r\n            state.searchByUsernameFilter = null;\r\n            state.maxDistanceFilter = 3;\r\n            state.maxDistanceRanges = [1000, 5000, 10000, null];\r\n            state.maxDistanceRangesText = ['1 km', '5 km', '10 km', '∞'];\r\n            state.locationFilter = null;\r\n            state.nearbyUsersIDs = null;\r\n\r\n            /* Filtering fields */\r\n            state.distanceSearchFilter = null;\r\n        },\r\n        setUsers(state, users) {\r\n            state.users = users;\r\n        },\r\n        setGenderFilter: (state, genderFilter) => {\r\n            state.genderFilter = genderFilter;\r\n        },\r\n        setAgeRangeFilter: (state, ageRangeFilter) => {\r\n            state.ageRangeFilter = ageRangeFilter;\r\n        },\r\n        setNearbyUsersIDs: (state, nearbyUsersIDs) => {\r\n            state.nearbyUsersIDs = nearbyUsersIDs;\r\n        },\r\n        setLanguageFilter: (state, languageFilter) => {\r\n            state.languageFilter = languageFilter;\r\n        },\r\n        setLocationFilter: (state, locationFilter) => {\r\n            state.locationFilter = locationFilter;\r\n        },\r\n        setSearchByUsernameFilter: (state, searchByUsernameFilter) => {\r\n            state.searchByUsernameFilter = searchByUsernameFilter;\r\n        },\r\n        setMaxDistanceFilter: (state, maxDistanceFilter) => {\r\n            state.maxDistanceFilter = maxDistanceFilter;\r\n        },\r\n        addUser(state, user) {\r\n            state.users[user.id] = user;\r\n        },\r\n        addSearchedUserID(state, userID) {\r\n            if (-1 == state.searchedUsersIDs.findIndex(id => {\r\n                return id == userID;\r\n            })) {\r\n                state.searchedUsersIDs.push(userID);\r\n            }\r\n        },\r\n        resetSearchedUsersIDs(state) {\r\n            state.searchedUsersIDs = [];\r\n        },\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRating(state, data) {\r\n            let userTo = state.users[data.id];\r\n\r\n            if (data.prev == null) {\r\n                //new rate\r\n                let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                newAvgRating += data.rating;\r\n                newAvgRating /= (userTo.numRatings + 1);\r\n                state.users[data.id].avgRating = newAvgRating;\r\n                state.users[data.id].numRatings = userTo.numRatings + 1;\r\n            } else {\r\n                if (data.rating == null) {\r\n                    //remove rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating - data.prev;\r\n                    if ((userTo.numRatings - 1) != 0)\r\n                        newAvgRating /= (userTo.numRatings - 1);\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                    state.users[data.id].numRatings = userTo.numRatings - 1;\r\n                } else {\r\n                    //modify rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating + data.rating - data.prev;\r\n                    if (userTo.numRatings != 0)\r\n                        newAvgRating /= userTo.numRatings;\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                }\r\n\r\n            }\r\n        }\r\n},\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            context.commit('resetState');\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getSearchedUsers ~                                                        >\r\n        // To list searched users using pagination                                     >\r\n        // return: true/false (are there more users to show?)                          >\r\n        //----------------------------------------------------------------------------->\r\n        getSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                if (filters.location != null && filters.location != undefined && filters.maxDistance != null) {\r\n                    if (context.getters.getLastUserShowed == null) {\r\n                        context.dispatch('database/getNearbyUserIDs', {\r\n                            location: filters.location,\r\n                            maxDistance: filters.maxDistance\r\n                        })\r\n                            .then((ids) => {\r\n                                context.commit('setNearbyUsersIDs', ids);\r\n                                context.dispatch('getNearbyUsersProfiles')\r\n                                    .then(() => {\r\n                                        context.dispatch('areThereMoreNearbyUsers')\r\n                                            .then((areThereMore) => {\r\n                                                resolve(areThereMore);\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    } else {\r\n                        context.dispatch('getNearbyUsersProfiles')\r\n                            .then(() => {\r\n                                context.dispatch('areThereMoreNearbyUsers')\r\n                                    .then((areThereMore) => {\r\n                                        resolve(areThereMore);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    }\r\n                } else {\r\n                    context.dispatch('database/getNextUsersPage', {\r\n                        lastUserShowed: context.getters.getLastUserShowed,\r\n                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                        filters: filters\r\n                    })\r\n                        .then((data) => {\r\n                            context.commit('setLastUserShowed', data.newLastUserShowed);\r\n\r\n                            data.users.forEach(user => {\r\n                                context.commit('addUser', user);\r\n                                context.commit('addSearchedUserID', user.id);\r\n                            });\r\n                            if (data.users.length > 0) {\r\n\r\n                                context.dispatch('database/isNextUsersPageEmpty', {\r\n                                    lastUserShowed: context.getters.getLastUserShowed,\r\n                                    limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                    filters: filters\r\n                                })\r\n                                    .then((isEmpty) => {\r\n                                        if (data.users.length > 0 && data.users.length < Constants.SEARCHED_USERS_PAGE_SIZE\r\n                                            && !isEmpty) {\r\n                                            context.dispatch('database/getNextUsersPage', {\r\n                                                lastUserShowed: context.getters.getLastUserShowed,\r\n                                                limit: Constants.SEARCHED_USERS_PAGE_SIZE - data.users.length,\r\n                                                filters: filters\r\n                                            })\r\n                                                .then((data2) => {\r\n                                                    context.commit('setLastUserShowed', data2.newLastUserShowed);\r\n                                                    data2.users.forEach(user => {\r\n                                                        context.commit('addUser', user);\r\n                                                        context.commit('addSearchedUserID', user.id);\r\n                                                    });\r\n                                                    context.dispatch('database/isNextUsersPageEmpty', {\r\n                                                        lastUserShowed: context.getters.getLastUserShowed,\r\n                                                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                                        filters: filters\r\n                                                    })\r\n                                                        .then((isEmpty2) => {\r\n                                                            resolve(!isEmpty2);\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                }).catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                        } else {\r\n                                            resolve(!isEmpty);\r\n                                        }\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreNearbyUsers ~                                                 >\r\n        // To check if there are valid nearby users to show yet                        >\r\n        // return: true/false (are there more valid nearby users to show?)             >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreNearbyUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n                let lastUserShowed = context.getters.getLastUserShowed;\r\n                let i;\r\n\r\n                while (lastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n\r\n                    }\r\n\r\n                    lastUserShowed = i - 1;\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then((userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (!user.registrationCompleted) {\r\n                                    isValid = false;\r\n                                }\r\n\r\n                                if (isValid) {\r\n                                    resolve(true);\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n\r\n                resolve(false);\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUsersProfiles ~                                                  >\r\n        // To show valid nearby users with pagination                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUsersProfiles(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let usersAdded = 0;\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n\r\n                while (usersAdded < Constants.SEARCHED_USERS_PAGE_SIZE && context.getters.getLastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    let i;\r\n                    let lastUserShowed = context.getters.getLastUserShowed;\r\n\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                        lastUserShowed = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n                    }\r\n\r\n                    context.commit('setLastUserShowed', i - 1);\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then(async (userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (isValid) {\r\n                                    context.commit('addUser', user);\r\n                                    context.commit('addSearchedUserID', user.id);\r\n                                    usersAdded++;\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetSearchedUsers ~                                                      >\r\n        // To reset variables related to user searching                                >\r\n        //----------------------------------------------------------------------------->\r\n        resetSearchedUsers(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit(\"resetSearchedUsersIDs\");\r\n                context.commit('setLastUserShowed', null);\r\n\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setFilters ~                                                              >\r\n        // To set the filtering values selected by the user for the searching          >\r\n        //----------------------------------------------------------------------------->\r\n        setFilters(context, filters) {\r\n            return new Promise(function (resolve) {\r\n                context.commit(\"setGenderFilter\", filters.gender);\r\n                context.commit(\"setAgeRangeFilter\", filters.ageRange);\r\n                context.commit(\"setLanguageFilter\", filters.language);\r\n                context.commit(\"setMaxDistanceFilter\", filters.maxDistance);\r\n                context.commit(\"setLocationFilter\", filters.location);\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getUserByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfileByUID', id)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            context.commit('addUser', profileInfo);\r\n                            resolve(profileInfo);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting user by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetFilters ~                                                            >\r\n        // To reset the filtering values to default                                    >\r\n        //----------------------------------------------------------------------------->\r\n        resetFilters(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit(\"setGenderFilter\", \"O\");\r\n                context.commit(\"setAgeRangeFilter\", [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE]);\r\n                context.commit('setLanguageFilter', {\r\n                    filterBy: \"languageToLearn\",\r\n                    knownLanguage: \"all\",\r\n                    languageToLearn: \"all\"\r\n                });\r\n\r\n                context.commit(\"setLocationFilter\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setMaxDistanceFilter\", 3)\r\n                context.commit(\"setSearchByUsernameFilter\", null)\r\n\r\n                let filters = context.getters.getFilters;\r\n                filters[\"maxDistance\"] = null;\r\n\r\n                resolve(filters);\r\n            });\r\n        }\r\n}\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database.js\";\r\nimport users from \"./users.js\";\r\nimport i18n from \"../../i18n\";\r\n\r\nlet alreadyAccountUsernameError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME');\r\nlet genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nlet gettingCurrentLocationError = i18n.t('messages.ERROR_GETTING_CURRENT_LOCATION');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----         ACCOUNTS & PROFILES INFO         -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        users\r\n    },\r\n    state: {\r\n        /* User account*/\r\n        id: null,\r\n        'name': null,\r\n        lastName: null,\r\n        email: null,\r\n        chats: [],\r\n        role: 'user',\r\n\r\n        /* User profile */\r\n        // 1st part\r\n        username: null,\r\n        birthDate: null,\r\n        gender: null,\r\n        description: null,\r\n        avgRating: null,\r\n        numRatings: null,\r\n        // 2nd part\r\n        knownLanguages: null,\r\n        languagesToLearn: null,\r\n        // 3rd part\r\n        profileImg: null,\r\n\r\n        /* Geolocation info */\r\n        location: null,\r\n\r\n        /* Ratings info */\r\n        ratings: null,\r\n\r\n        /* Constants */\r\n        genderOptions: {\r\n            \"M\": {\r\n                img: \"img/genders/male.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg'\r\n            },\r\n            \"W\": {\r\n                img: \"img/genders/female.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg'\r\n            },\r\n            \"O\": {\r\n                img: \"img/genders/other.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg'\r\n            }\r\n        },\r\n        languageOptions: {\r\n            \"de\": {\r\n                img: \"img/flags/de.svg\"\r\n            },\r\n            \"zh\": {\r\n                img: \"img/flags/zh.svg\"\r\n            },\r\n            \"es\": {\r\n                img: \"img/flags/es.svg\"\r\n            },\r\n            \"fr\": {\r\n                img: \"img/flags/fr.svg\"\r\n            },\r\n            \"en\": {\r\n                img: \"img/flags/en.svg\"\r\n            },\r\n            \"it\": {\r\n                img: \"img/flags/it.svg\"\r\n            },\r\n            \"ja\": {\r\n                img: \"img/flags/ja.svg\"\r\n            },\r\n            \"pt\": {\r\n                img: \"img/flags/pt.svg\"\r\n            },\r\n            \"all\": {\r\n                img: \"img/flags/all.svg\"\r\n            }\r\n        }\r\n    },\r\n    getters: {\r\n        getName: (state) => {\r\n            return state.name;\r\n        },\r\n        getID: (state) => {\r\n            return state.id;\r\n        },\r\n        getLastName: (state) => {\r\n            return state.lastName;\r\n        },\r\n        getEmail: (state) => {\r\n            return state.email;\r\n        },\r\n        getRole: (state) => {\r\n            return state.role;\r\n        },\r\n        getChats: (state) => {\r\n            return state.chats;\r\n        },\r\n        getProfile: (state) => {\r\n            let data = {};\r\n\r\n            if (state.username) {\r\n                data = {\r\n                    'username': state.username,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.birthDate) {\r\n                data = {\r\n                    'birthDate': state.birthDate,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.gender) {\r\n                data = {\r\n                    'gender': state.gender,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.description) {\r\n                data = {\r\n                    'description': state.description,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.profileImg) {\r\n                data = {\r\n                    'profileImg': state.profileImg,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.knownLanguages) {\r\n                data = {\r\n                    'knownLanguages': state.knownLanguages,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.languagesToLearn) {\r\n                data = {\r\n                    'languagesToLearn': state.languagesToLearn,\r\n                    ...data\r\n                }\r\n            }\r\n\r\n            data = {\r\n                'avgRating': state.avgRating,\r\n                'numRatings': state.numRatings,\r\n                ...data\r\n            }\r\n\r\n            return data;\r\n        },\r\n        getUsername: (state) => {\r\n            return state.username;\r\n        },\r\n        getBirthDate: (state) => {\r\n            return state.birthDate;\r\n        },\r\n        getGender: (state) => {\r\n            return state.gender;\r\n        },\r\n        getDescription: (state) => {\r\n            return state.description;\r\n        },\r\n        getProfileImg: (state) => {\r\n            return state.profileImg;\r\n        },\r\n        getAvgRating: (state) => {\r\n            return state.avgRating;\r\n        },\r\n        getNumRatings: (state) => {\r\n            return state.numRatings;\r\n        },\r\n        getKnownLanguages: (state) => {\r\n            return state.knownLanguages;\r\n        },\r\n        getLanguagesToLearn: (state) => {\r\n            return state.languagesToLearn;\r\n        },\r\n\r\n        getGenderImgByID: (state) => (id) => {\r\n            return state.genderOptions[id].img;\r\n        },\r\n        getGenderDefaultProfileImgByUserGender: (state) => {\r\n            return state.genderOptions[\"O\"].defaultProfileImg;\r\n        },\r\n        getGenderOptionsAsArray: (state, getters) => {\r\n            let genderOptions = {\r\n                \"M\": {\r\n                    'text': i18n.t('messages.TEXT_MAN')\r\n                },\r\n                \"W\": {\r\n                    'text': i18n.t('messages.TEXT_WOMAN')\r\n                },\r\n                \"O\": {\r\n                    'text': i18n.t('messages.TEXT_OTHER')\r\n                }\r\n            };\r\n            return Object.keys(genderOptions).map(function (id) {\r\n                let text = genderOptions[id].text;\r\n                let img = getters.getGenderImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageImgByID: (state) => (id) => {\r\n            return state.languageOptions[id].img;\r\n        },\r\n        getLanguageOptionsAsArray: (state, getters) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_DE')\r\n                },\r\n                \"zh\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ZH')\r\n                },\r\n                \"es\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ES')\r\n                },\r\n                \"fr\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_FR')\r\n                },\r\n                \"en\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_EN')\r\n                },\r\n                \"it\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_IT')\r\n                },\r\n                \"ja\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_JA')\r\n                },\r\n                \"pt\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_PT')\r\n                },\r\n                \"all\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ALL')\r\n                }\r\n            };\r\n            return Object.keys(state.languageOptions).map(function (id) {\r\n                let text = languageOptions[id].text;\r\n                let img = getters.getLanguageImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageFromLanguageOptionsByID: (state) => (id) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_DE')\r\n                },\r\n                \"zh\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ZH')\r\n                },\r\n                \"es\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ES')\r\n                },\r\n                \"fr\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_FR')\r\n                },\r\n                \"en\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_EN')\r\n                },\r\n                \"it\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_IT')\r\n                },\r\n                \"ja\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_JA')\r\n                },\r\n                \"pt\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_PT')\r\n                },\r\n                \"all\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ALL')\r\n                }\r\n            };\r\n\r\n            return {\r\n                ...state.languageOptions[id],\r\n                'text': languageOptions[id].text\r\n            };\r\n        },\r\n        getLocation: (state) => {\r\n            return state.location;\r\n        },\r\n        getRatings: (state) => {\r\n            return state.ratings;\r\n        },\r\n        getRating: (state) => (id) => {\r\n            if (state.ratings) {\r\n                return state.ratings[id];\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    },\r\n    mutations: {\r\n        setIDe(state, id) {\r\n            state.id = id;\r\n        },\r\n        setName(state, name) {\r\n            state.name = name;\r\n        },\r\n        setLastName(state, lastName) {\r\n            state.lastName = lastName;\r\n        },\r\n        setEmail(state, email) {\r\n            state.email = email;\r\n        },\r\n        setRole(state, role) {\r\n            state.role = role;\r\n        },\r\n        setChats(state, chats) {\r\n            state.chats = chats;\r\n        },\r\n        setAccount(state, accountInfo) {\r\n            if (accountInfo.hasOwnProperty('email')) {\r\n                state.email = accountInfo.email;\r\n            }\r\n            if (accountInfo.hasOwnProperty('name')) {\r\n                state.name = accountInfo.name;\r\n            }\r\n            if (accountInfo.hasOwnProperty('lastName')) {\r\n                state.lastName = accountInfo.lastName;\r\n            }\r\n            if (accountInfo.hasOwnProperty('profileImg')) {\r\n                state.role = accountInfo.role;\r\n            }\r\n            if (accountInfo.hasOwnProperty('id')) {\r\n                state.id = accountInfo.id;\r\n            }\r\n            if (accountInfo.hasOwnProperty('chats')) {\r\n                state.chats = accountInfo.chats;\r\n            }\r\n        },\r\n        setUsername(state, username) {\r\n            state.username = username;\r\n        },\r\n        setBirthDate(state, birthDate) {\r\n            state.birthDate = birthDate;\r\n        },\r\n        setGender(state, gender) {\r\n            state.gender = gender;\r\n        },\r\n        setDescription(state, description) {\r\n            state.description = description;\r\n        },\r\n        setAvgRating(state, avgRating) {\r\n            state.avgRating = avgRating;\r\n        },\r\n        setNumRatings(state, numRatings) {\r\n            state.numRatings = numRatings;\r\n        },\r\n        setKnownLanguages(state, knownLanguages) {\r\n            state.knownLanguages = knownLanguages;\r\n        },\r\n        setLanguagesToLearn(state, languagesToLearn) {\r\n            state.languagesToLearn = languagesToLearn;\r\n        },\r\n        setProfileImg(state, profileImg) {\r\n            state.profileImg = profileImg;\r\n        },\r\n        setRatings(state, ratings) {\r\n            state.ratings = ratings;\r\n        },\r\n        setRating(state, data) {\r\n            if (state.ratings == null) {\r\n                state.ratings = {};\r\n            }\r\n            state.ratings[data.id] = data.rating;\r\n        },\r\n\r\n        setProfile(state, profileInfo) {\r\n            if (profileInfo) {\r\n\r\n                if (profileInfo.hasOwnProperty('username')) {\r\n                    state.username = profileInfo.username;\r\n                }\r\n                if (profileInfo.hasOwnProperty('birthDate')) {\r\n                    state.birthDate = profileInfo.birthDate;\r\n                }\r\n                if (profileInfo.hasOwnProperty('gender')) {\r\n                    state.gender = profileInfo.gender;\r\n                }\r\n                if (profileInfo.hasOwnProperty('description')) {\r\n                    state.description = profileInfo.description;\r\n                }\r\n                if (profileInfo.hasOwnProperty('avgRating')) {\r\n                    state.avgRating = profileInfo.avgRating;\r\n                }\r\n                if (profileInfo.hasOwnProperty('numRatings')) {\r\n                    state.numRatings = profileInfo.numRatings;\r\n                }\r\n                if (profileInfo.hasOwnProperty('knownLanguages')) {\r\n                    state.knownLanguages = profileInfo.knownLanguages;\r\n                }\r\n                if (profileInfo.hasOwnProperty('languagesToLearn')) {\r\n                    state.languagesToLearn = profileInfo.languagesToLearn;\r\n                }\r\n                if (profileInfo.hasOwnProperty('profileImg')) {\r\n                    state.profileImg = profileInfo.profileImg;\r\n                }\r\n            }\r\n        },\r\n        resetState(state) {\r\n            /* User account*/\r\n            state.id = null;\r\n            state.name = null;\r\n            state.lastName = null;\r\n            state.email = null;\r\n            state.role = 'user';\r\n            state.chats = [];\r\n\r\n            /* User profile */\r\n            // 1st part\r\n            state.username = null;\r\n            state.birthDate = null;\r\n            state.gender = null;\r\n            state.description = null;\r\n            state.avgRating = null;\r\n            state.numRatings = null;\r\n            // 2nd part\r\n            state.knownLanguages = null;\r\n            state.languagesToLearn = null;\r\n            // 3rd part\r\n            state.profileImg = null;\r\n\r\n            /* Ratings info */\r\n            state.ratings = null;\r\n\r\n            /* Geolocation info */\r\n            state.location = null;\r\n        },\r\n        setLocation(state, location) {\r\n            state.location = location;\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init users state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n                        context.commit('setProfile', profileInfo);\r\n\r\n                        context.dispatch('database/getAccount')\r\n                            .then((accountInfo) => {\r\n                                context.commit('setAccount', accountInfo);\r\n                                context.dispatch('getRatings')\r\n                                    .then(() => {\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error)\r\n                                    });\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccount', data)\r\n                    .then(() => {\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                context.dispatch('database/setAccount', data)\r\n                                    .then(() => {\r\n                                        context.commit('setAccount', data);\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log('Error creating user account.');\r\n                                        reject(error)\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generateNotificationToken ~                                               >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generateNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/generatePushNotificationToken')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountNameAndLastName ~                                            >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountNameAndLastName(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountData', data)\r\n                    .then(() => {\r\n                        if (data.hasOwnProperty('name')) {\r\n                            context.commit('setName', data.name);\r\n                        }\r\n                        if (data.hasOwnProperty('lastName')) {\r\n                            context.commit('setLastName', data.lastName);\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountEmail', email)\r\n                    .then(() => {\r\n                        context.commit('setEmail', email);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword(context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountPassword', password)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log user in                                                              >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/login', data)\r\n                    .then(() => {\r\n                        context.commit('setAccount', data);\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserLogged ~                                                            >\r\n        // To determine if user is or is not logged                                    >\r\n        //----------------------------------------------------------------------------->\r\n        isUserLogged: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((isIt) => {\r\n                        resolve(isIt);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ logout ~                                                                  >\r\n        // To log user out                                                             >\r\n        //----------------------------------------------------------------------------->\r\n        logout(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/logout')\r\n                    .then(() => {\r\n                        context.dispatch('resetAppState', null, {root: true});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendEmailVerification')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending verification email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendPasswordResetEmail', email)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending password email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfEmailIsVerified ~                                                  >\r\n        // To check if email is verified                                               >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfEmailIsVerified(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isEmailVerified')\r\n                    .then((isVerified) => {\r\n                        resolve(isVerified);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if email is verified.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfUsernameIsAlreadyRegistered ~                                      >\r\n        // To check if a username is already in use                                    >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfUsernameIsAlreadyRegistered(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfileByUsername', username)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            resolve(true);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if username is already registered.');\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createProfile ~                                                           >\r\n        // To create user profile                                                      >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        createProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('checkIfUsernameIsAlreadyRegistered', data.username)\r\n                    .then((isAlreadyRegistered) => {\r\n                        if (isAlreadyRegistered) {\r\n                            reject(alreadyAccountUsernameError);\r\n                        } else {\r\n                            context.dispatch('database/setProfile', data)\r\n                                .then(() => {\r\n                                    context.commit('setUsername', data.username);\r\n                                    context.commit('setBirthDate', data.birthDate);\r\n                                    context.commit('setGender', data.gender);\r\n                                    context.commit('setDescription', data.description);\r\n                                    context.commit('setAvgRating', 0);\r\n                                    context.commit('setNumRatings', 0);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error creating user profile.');\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile data                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateProfile', data)\r\n                    .then(async () => {\r\n\r\n                        if (data.hasOwnProperty('username')) {\r\n                            context.commit('setUsername', data.username);\r\n                        }\r\n                        if (data.hasOwnProperty('description')) {\r\n                            context.commit('setDescription', data.description);\r\n                        }\r\n                        if (data.hasOwnProperty('gender')) {\r\n                            context.commit('setGender', data.gender);\r\n                        }\r\n                        if (data.hasOwnProperty('birthDate')) {\r\n                            context.commit('setBirthDate', data.birthDate);\r\n                        }\r\n                        if (data.hasOwnProperty('knownLanguages')) {\r\n                            context.commit('setKnownLanguages', data.knownLanguages);\r\n                        }\r\n                        if (data.hasOwnProperty('languagesToLearn')) {\r\n                            context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        }\r\n                        if (data.hasOwnProperty('profileImg')) {\r\n                            await context.dispatch('setProfileImg', data.profileImg).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setLanguages', data)\r\n                    .then(() => {\r\n                        context.commit('setKnownLanguages', data.knownLanguages);\r\n                        context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error setting user languages.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image                                                   >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n                Vue.nextTick(() => {\r\n\r\n                    context.dispatch('database/uploadProfileImg', img)\r\n                        .then((url) => {\r\n                            context.dispatch('database/setProfileImg', url)\r\n                                .then(() => {\r\n                                    context.commit('setProfileImg', url);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error setting user profile image.');\r\n                                    console.error(error)\r\n                                    reject(error);\r\n                                });\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('Error uploading user profile image.');\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setRegistrationCompleted', img)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error updating user registration state.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRegistrationState ~                                                    >\r\n        // To check what register info the user has already submitted                  >\r\n        //----------------------------------------------------------------------------->\r\n        getRegistrationState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n\r\n                        context.dispatch('checkRegistrationState', profileInfo)\r\n                            .then((state) => {\r\n                                context.commit('setProfile', profileInfo);\r\n                                resolve(state);\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log(error);\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkRegistrationState ~                                                  >\r\n        // To check registration state of a profile                                    >\r\n        // parameters: data {username, gender, description, avgRating, numRatings,     >\r\n        //                   knownLanguages, languagesToLearn, profileImg}             >\r\n        //----------------------------------------------------------------------------->\r\n        checkRegistrationState(context, data) {\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('checkIfEmailIsVerified')\r\n                    .then((isVerified) => {\r\n                        if (isVerified) {\r\n                            // Part 0 completed\r\n                            if (data && data.hasOwnProperty('username') && data.hasOwnProperty('gender')\r\n                                && data.hasOwnProperty('description') && data.hasOwnProperty('avgRating')\r\n                                && data.hasOwnProperty('numRatings')) {\r\n                                // Part 1 completed\r\n                                if (data.hasOwnProperty('knownLanguages') && data.hasOwnProperty('languagesToLearn')) {\r\n                                    // Part 2 completed\r\n                                    if (data.hasOwnProperty('profileImg')) {\r\n                                        // Part 3 completed\r\n                                        // Registration process completed\r\n                                        resolve('dashboard');\r\n                                    } else {\r\n                                        // State 3\r\n                                        resolve('set-your-profile-image');\r\n                                    }\r\n                                } else {\r\n                                    // State 2\r\n                                    resolve('fill-your-languages');\r\n                                }\r\n                            } else {\r\n                                // State 1\r\n                                resolve('fill-your-profile-info');\r\n                            }\r\n                        } else {\r\n                            // State 0\r\n                            resolve('email-verification');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getCurrentLocation ~                                                      >\r\n        // To get the current user location                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getCurrentLocation() {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                navigator.geolocation.getCurrentPosition(position => {\r\n                        resolve({\r\n                            lat: position.coords.latitude,\r\n                            lng: position.coords.longitude\r\n                        })\r\n                    },\r\n                    function (error) {\r\n                        console.error(error);\r\n                        reject(gettingCurrentLocationError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getRatings')\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRatings', ratingsInfo);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error retrieving user ratings.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ rateUser ~                                                                >\r\n        // To rate a user                                                              >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        rateUser(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/setRating', data)\r\n                    .then(() => {\r\n                        context.commit('setRating', data);\r\n                        context.commit('users/addRating', data);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        console.log('Error rating user.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get the current (or last) user location                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('getCurrentLocation')\r\n                    .then((currentLocation) => {\r\n                        context.commit('setLocation', currentLocation);\r\n                        context.dispatch('database/updateUserLocation', currentLocation)\r\n                            .then(() => {\r\n                                resolve(currentLocation);\r\n                            })\r\n                            .catch(() => {\r\n                                resolve(currentLocation);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        context.dispatch('database/getLocation')\r\n                            .then((location) => {\r\n                                context.commit('setLocation', location);\r\n                                resolve(location);\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        }\r\n    }\r\n};","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\nimport haversine from 'haversine-distance'\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                 EVENTS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        events: {},\r\n        eventsToShowIDs: [],\r\n        mapEventsToShowIDs: [],\r\n        lastEventShowed: null,\r\n        languageInvolvedFilter: \"all\",\r\n        eventsTab: 0\r\n    },\r\n    getters: {\r\n        getLanguageInvolvedFilter: (state) => {\r\n            return state.languageInvolvedFilter;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                languageInvolved: state.languageInvolvedFilter\r\n            };\r\n        },\r\n        getEvents: (state) => {\r\n            return state.events;\r\n        },\r\n        getEventsTab: (state) => {\r\n            return state.eventsTab;\r\n        },\r\n        getEventByID: (state) => (id) => {\r\n            return state.events[id];\r\n        },\r\n        getEventsToShow: (state, getters) => {\r\n            let eventsToShow = [];\r\n            state.eventsToShowIDs.forEach((eventID) => {\r\n                let distance = null;\r\n                let userLocation = getters['user/getLocation'];\r\n\r\n                if (userLocation != null) {\r\n                    distance = haversine(state.events[eventID].location.coordinates, userLocation);\r\n                    distance = distance / 1000;\r\n                }\r\n\r\n                let nEvent = {\r\n                    'id': eventID,\r\n                    ...state.events[eventID]\r\n                };\r\n\r\n                nEvent['distance'] = distance;\r\n                eventsToShow.push(nEvent);\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getMapEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.mapEventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getLastEventShowed: (state) => {\r\n            return state.lastEventShowed;\r\n        },\r\n        amIParticipating: (state) => (data) => {\r\n\r\n            let found = null;\r\n            if (state.events[data.eventID]) {\r\n                found = state.events[data.eventID].participants.find(participantID => participantID == data.userID);\r\n                return found != undefined;\r\n            }\r\n            return null;\r\n\r\n        }\r\n    },\r\n    mutations: {\r\n        setLanguageInvolvedFilter(state, languageInvolvedFilter) {\r\n            state.languageInvolvedFilter = languageInvolvedFilter;\r\n        },\r\n        setEventsTab(state, eventsTab) {\r\n            state.eventsTab = eventsTab;\r\n        },\r\n        resetState(state) {\r\n            state.events = {};\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.mapEventsToShowIDs.splice(0, state.mapEventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n            state.languageInvolvedFilter = \"all\";\r\n        },\r\n        resetEventsToShowIDs(state) {\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n        },\r\n        addEvent(state, event) {\r\n            state.events[event.id] = event;\r\n        },\r\n        addParticipantToEvent(state, data) {\r\n            if (-1 == state.events[data.eventID].participants.findIndex(participantID => participantID == data.userID)) {\r\n                state.events[data.eventID].participants.push(data.userID);\r\n            }\r\n        },\r\n        removeParticipantFromEvent(state, data) {\r\n            let searchedUserIndex = state.events[data.eventID].participants.findIndex(function (userID) {\r\n                return userID == data.userID;\r\n            });\r\n            state.events[data.eventID].participants.splice(searchedUserIndex, 1);\r\n        },\r\n        addEventToShow(state, eventID) {\r\n            if (-1 == state.eventsToShowIDs.findIndex(id => {\r\n                return id == eventID;\r\n            })) {\r\n                state.eventsToShowIDs.push(eventID);\r\n            }\r\n        },\r\n        addMapEventToShow(state, eventID) {\r\n            state.mapEventsToShowIDs.push(eventID);\r\n        },\r\n        setEventsToShowIDs(state, eventsToShowIDs) {\r\n            state.eventsToShowIDs = eventsToShowIDs;\r\n        },\r\n        setLastEventShowed(state, lastEventShowed) {\r\n            state.lastEventShowed = lastEventShowed;\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init events state info with the appropriate data                         >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getAllEvents')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        resetEventsToShowIDs(context) {\r\n            context.commit('resetEventsToShowIDs');\r\n        },\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getNextEventsPage', {\r\n                    lastEventShowed: context.getters.getLastEventShowed,\r\n                    limit: Constants.EVENTS_PAGE_SIZE,\r\n                    filters: filters\r\n                })\r\n                    .then((data) => {\r\n                        context.commit('setLastEventShowed', data.newLastEventShowed);\r\n\r\n                        data.events.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                'lat': event.location.coordinates._lat,\r\n                                'lng': event.location.coordinates._long\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                                distance = distance / 1000;\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                'distance': distance\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addEventToShow', event.id);\r\n                        });\r\n\r\n                        if (data.events.length > 0) {\r\n                            context.dispatch('database/isNextEventsPageEmpty', {\r\n                                lastEventShowed: context.getters.getLastEventShowed,\r\n                                limit: Constants.EVENTS_PAGE_SIZE,\r\n                                filters: filters\r\n                            })\r\n                                .then((isEmpty) => {\r\n                                    resolve(!isEmpty);\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAllEvents ~                                                            >\r\n        // To get all events that will be celebrated                                   >\r\n        //----------------------------------------------------------------------------->\r\n        getAllEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getEventsToBeCelebrated')\r\n                    .then((eventsRetrieved) => {\r\n\r\n                        eventsRetrieved.forEach(event => {\r\n                            let eventLocation = {\r\n                                'lat': event.location.coordinates._lat,\r\n                                'lng': event.location.coordinates._long\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addMapEventToShow', event.id);\r\n                        });\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEventParticipants(context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let event = context.getters.getEventByID(eventID);\r\n                context.dispatch('database/getMultipleProfilesByUID', event.participants)\r\n                    .then((userProfiles) => {\r\n                        userProfiles.forEach(user => {\r\n                            context.commit('users/addUser', user);\r\n                        });\r\n                        resolve(userProfiles);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add user to an Event                                                     >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/addParticipantToEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"addParticipantToEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove user from an Event                                                >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/removeParticipantFromEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"removeParticipantFromEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getEventByID', id)\r\n                    .then((event) => {\r\n                        if (event) {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                'lat': event.location.coordinates._lat,\r\n                                'lng': event.location.coordinates._long\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                'distance': distance / 1000\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            resolve(event);\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting event by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        }\r\n\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                  CHATS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        chats: {},\r\n        chatsToShowIDs: [],\r\n\r\n        chatListListener: null,\r\n        chatMessagesListeners: [],\r\n\r\n        usernameFilter: null\r\n    },\r\n    getters: {\r\n        getChatByID: (state) => (id) => {\r\n            return state.chats[id];\r\n        },\r\n        getChatsToShowIDs: (state) => {\r\n            return state.chatsToShowIDs;\r\n        },\r\n        getChatMessagesByChatID: (state) => (chatID) => {\r\n            if (state.chats[chatID] != undefined) {\r\n                return state.chats[chatID].messages;\r\n            } else {\r\n                return [];\r\n            }\r\n        },\r\n        getUnreadMessagesByChatID: (state, getters) => (chatID) => {\r\n            let i;\r\n            let myID = getters['user/getID'];\r\n            let unreadMessages = [];\r\n\r\n            if (state.chats[chatID] != undefined) {\r\n                for (i = state.chats[chatID].messages.length - 1; i >= 0; i--) {\r\n                    if (state.chats[chatID].messages[i].sender != myID && !state.chats[chatID].messages[i].read) {\r\n                        unreadMessages.push(state.chats[chatID].messages[i].id);\r\n                    } else if (state.chats[chatID].messages[i].sender != myID && state.chats[chatID].messages[i].read) {\r\n                        break;\r\n                    } else if (state.chats[chatID].messages[i].sender == myID) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unreadMessages;\r\n        },\r\n        getUnreadMessages: (state, getters) => {\r\n            let count = 0;\r\n\r\n            state.chatsToShowIDs.forEach(c => {\r\n                count += getters.getUnreadMessagesByChatID(c).length;\r\n            });\r\n\r\n            return count;\r\n        },\r\n        getChatsToShow: (state, getters) => {\r\n            let chatsToShow = [];\r\n\r\n            if (state.usernameFilter == null) {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n                    auxChat.id = state.chats[chatID].id;\r\n                    auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                    chatsToShow.push(auxChat)\r\n                });\r\n            } else {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n\r\n                    let lowNotMe = getters.getUserByChatID(chatID).username.toLowerCase();\r\n\r\n                    if (lowNotMe.includes(state.usernameFilter.toLowerCase())) {\r\n                        auxChat.id = state.chats[chatID].id;\r\n                        auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                        chatsToShow.push(auxChat)\r\n                    }\r\n                });\r\n            }\r\n\r\n            return chatsToShow;\r\n        },\r\n        getUserByChatID: (state, getters) => (chatID) => {\r\n            let userID;\r\n            if (state.chats[chatID].users[0] == getters['user/getID']) {\r\n                userID = state.chats[chatID].users[1];\r\n            } else {\r\n                userID = state.chats[chatID].users[0];\r\n            }\r\n\r\n            return getters['users/getUserByID'](userID);\r\n        },\r\n\r\n        getNotReadMessagesCountByChatID: (state, getters) => (id) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n\r\n            for (i = state.chats[id].messages.length - 1; i >= 0; i--) {\r\n                if (state.chats[id].messages[i].sender != myID && !state.chats[id].messages[i].read) {\r\n                    count++;\r\n                } else if (state.chats[id].messages[i].sender != myID && state.chats[id].messages[i].read) {\r\n                    break;\r\n                } else if (state.chats[id].messages[i].sender == myID) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return count;\r\n        }\r\n\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.chats = {};\r\n            state.chatsToShowIDs.splice(0, state.chatsToShowIDs.length);\r\n\r\n            if (state.chatListListener != null && state.chatListListener != undefined) {\r\n                state.chatListListener();\r\n                state.chatListListener = null;\r\n            }\r\n\r\n            state.chatMessagesListeners.forEach(l => {\r\n                if (l != null && l != undefined) {\r\n                    l();\r\n                }\r\n            });\r\n\r\n            state.chatMessagesListeners.splice(0, state.chatMessagesListeners.length);\r\n        },\r\n        addChatMessagesListener(state, listener) {\r\n            state.chatMessagesListeners.push(listener);\r\n        },\r\n        addChat(state, chat) {\r\n            if (!state.chats[chat.id] || chat.messages.length > state.chats[chat.id].messages.length) {\r\n                Vue.set(state.chats, chat.id, chat);\r\n            }\r\n        },\r\n        updateChatMessages(state, data) {\r\n            for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n\r\n                let index = data.messages.findIndex(function (mMessage) {\r\n                    return mMessage.id === state.chats[data.chatID].messages[i].id;\r\n                });\r\n\r\n                if (index != -1) {\r\n                    Vue.set(state.chats[data.chatID].messages, i, data.messages[index]);\r\n                    data.messages.splice(index, 1);\r\n                    if (data.messages.length == 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        sortChatMessagesByDate(state, chatID) {\r\n\r\n            function compareChatMessagesByDate(a, b) {\r\n                let dateA = a.date;\r\n                let dateB = b.date;\r\n\r\n                if (dateA === null) {\r\n                    return 1;\r\n                } else if (dateB === null) {\r\n                    return -1;\r\n                }\r\n                if (dateB < dateA) {\r\n                    return 1;\r\n                }\r\n                if (dateB > dateA) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chats[chatID].messages.sort(compareChatMessagesByDate);\r\n        },\r\n        addChatToShow(state, chatID) {\r\n            if (-1 == state.chatsToShowIDs.findIndex(id => id == chatID)) {\r\n                state.chatsToShowIDs.push(chatID);\r\n            }\r\n        },\r\n        sortChatsToShowByLastMessage(state) {\r\n            function compareChatsByLastMessageDate(a, b) {\r\n                let chatALastMessageDate = null;\r\n                let chatBLastMessageDate = null;\r\n\r\n                if(state.chats[a].messages[state.chats[a].messages.length - 1]){\r\n                    chatALastMessageDate = state.chats[a].messages[state.chats[a].messages.length - 1].date;\r\n                }\r\n\r\n                if(state.chats[b].messages[state.chats[b].messages.length - 1]){\r\n                    chatBLastMessageDate = state.chats[b].messages[state.chats[b].messages.length - 1].date;\r\n                }\r\n\r\n                if (chatALastMessageDate < chatBLastMessageDate) {\r\n                    return 1;\r\n                }\r\n                if (chatALastMessageDate > chatBLastMessageDate) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chatsToShowIDs.sort(compareChatsByLastMessageDate);\r\n        },\r\n\r\n        setUsernameFilter(state, usernameFilter) {\r\n            state.usernameFilter = usernameFilter;\r\n        },\r\n\r\n        setChatListListener(state, chatListListener) {\r\n            state.chatListListener = chatListListener;\r\n        },\r\n\r\n        pushChatMessages(state, data) {\r\n            data.messages.forEach((mp) => {\r\n                if (mp.date != null && mp.date != undefined) {\r\n                    if (state.chats[data.chatID].messages.length == 0) {\r\n                        Vue.set(state.chats[data.chatID].messages, 0, mp);\r\n                    } else {\r\n                        let alreadyAdded = false;\r\n\r\n                        for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n                            if (mp.date != null && mp.date != undefined && (\r\n                                (state.chats[data.chatID].messages[i].date < mp.date && !state.chats[data.chatID].messages[i + 1] && state.chats[data.chatID].messages[i].id != mp.id)\r\n                                || (state.chats[data.chatID].messages[i].date < mp.date && state.chats[data.chatID].messages[i + 1].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id && state.chats[data.chatID].messages[i + 1].id != mp.id))) {\r\n                                state.chats[data.chatID].messages.splice(i + 1, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            } else if (mp.date != null && mp.date != undefined && i == 0 && state.chats[data.chatID].messages[i].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id) {\r\n                                state.chats[data.chatID].messages.splice(i, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!alreadyAdded && state.chats[data.chatID].messages.length == 0) {\r\n                            state.chats[data.chatID].messages.push(mp);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            //state.chats[data.chatID].messages = state.chats[data.chatID].messages.concat(data.messages);\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init chats state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('createChatListeners', context.getters['user/getChats'])\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatListChange ~                                                    >\r\n        // To manage the event of changes in a chat-list                               >\r\n        // parameters required: user whose chat list we are managing                   >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatListChange(context, user) {\r\n            return new Promise(async function (resolve, reject) {\r\n\r\n                for (const chatID of user.chats) {\r\n                    if (-1 == context.getters.getChatsToShowIDs.findIndex(id => id == chatID) &&\r\n                        (!context.state.chats.hasOwnProperty(chatID) || context.state.chats[chatID].messages.length == 0)) {\r\n                        // It is new\r\n                        await context.dispatch('database/getChatByID', chatID)\r\n                            .then(async (chat) => {\r\n                                chat = {\r\n                                    ...chat,\r\n                                    'messages': []\r\n                                }\r\n\r\n                                let userID;\r\n\r\n                                if (chat.users[0] == context.getters['user/getID']) {\r\n                                    userID = chat.users[1];\r\n                                } else {\r\n                                    userID = chat.users[0];\r\n                                }\r\n\r\n                                await context.dispatch('users/getUserByID', userID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChat\", chat);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n\r\n\r\n                                // Create messages listener\r\n                                await context.dispatch('database/createChatMessagesListener', chatID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChatToShow\", chat.id);\r\n                                        context.commit(\"sortChatsToShowByLastMessage\");\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatMessagesChange ~                                                >\r\n        // To manage the event of changes in user chat messages                        >\r\n        // parameters required: chatMessages                                           >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatMessagesChange(context, chatMessages) {\r\n            return new Promise(function (resolve) {\r\n                    context.commit('addChatMessagesListener', chatMessages.listener);\r\n\r\n                    let newMessages = [];\r\n                    let modifiedMessagesToRead = [];\r\n                    let modifiedMessagesDated = [];\r\n\r\n                    chatMessages.messages.forEach((m) => {\r\n                        if (m.change == \"added\" && m.date) {\r\n                            newMessages.push(m);\r\n                        } else if (m.change == \"modified\" && m.read && m.date) {\r\n                            modifiedMessagesToRead.push(m);\r\n                        } else if (m.change == \"modified\" && !m.read && m.date) {\r\n                            modifiedMessagesDated.push(m);\r\n                        }\r\n                    });\r\n\r\n                    if (newMessages.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: newMessages});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesDated.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesDated});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesToRead.length > 0) {\r\n                        context.commit('updateChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesToRead});\r\n                    }\r\n\r\n                    context.commit(\"sortChatsToShowByLastMessage\");\r\n                    resolve();\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setChatMessagesToReadByChatID ~                                           >\r\n        // To set messages in chat to read state                                       >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setChatMessagesToReadByChatID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let unreadMessages = context.getters.getUnreadMessagesByChatID(chatID);\r\n\r\n                context.dispatch('database/setMessagesToRead', {chatID: chatID, messages: unreadMessages})\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendNewChatMessage ~                                                      >\r\n        // To send a chat message                                                      >\r\n        // parameters required: {chatID, users, messageText}                           >\r\n        //----------------------------------------------------------------------------->\r\n        sendNewChatMessage(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let chat = context.getters.getChatByID(data.chatID);\r\n\r\n                let result;\r\n\r\n                if (context.getters.getChatByID(data.chatID).messages.length == 0) {\r\n                    result = context.dispatch('database/addChat', {id: data.chatID, users: chat.users});\r\n                } else {\r\n                    result = Promise.resolve();\r\n                }\r\n\r\n                result.then(() => {\r\n                    context.dispatch('database/addMessagesToChat', {\r\n                        chatID: data.chatID,\r\n                        message: {sender: context.getters['user/getID'], text: data.messageText}\r\n                    }).then(function () {\r\n                        resolve();\r\n                    }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatListeners ~                                                     >\r\n        // To create listeners for the chats of the user                               >\r\n        //----------------------------------------------------------------------------->\r\n        createChatListeners: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccountListener', context.getters['user/getID'])\r\n                    .then(() => {\r\n                        if (context.state.chatListListener != null && context.state.chatListListener != undefined) {\r\n                            context.state.chatListListener();\r\n                        }\r\n                        context.commit('setChatListListener', user.listener);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n\r\n////////////////////////////////////////////////////////\r\n//-----               APP RANKING                -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions,\r\n        users,\r\n        user\r\n    },\r\n    state: {\r\n        lastUserShowed: -1,\r\n        rankingUsers: [],\r\n        rankingUsersIDs: [],\r\n        rankingUser: null\r\n},\r\n    getters: {\r\n\r\n        getRankingUsersToShow: (state, getters) => {\r\n            let rus = [];\r\n\r\n            let i = 0;\r\n            state.rankingUsersIDs.forEach(uid => {\r\n                let ru = {\r\n                    ...getters['users/getUserByID'](uid)\r\n                };\r\n\r\n                ru[\"score\"] = state.rankingUsers[i].score;\r\n                ru[\"position\"] = state.rankingUsers[i].position;\r\n\r\n                rus.push(ru);\r\n                i++;\r\n            });\r\n\r\n            return rus;\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getRankedUserByIndex: (state) => (index) => {\r\n            return state.rankingUsers[index];\r\n        },\r\n        getRankingUsers: (state) => {\r\n            return state.rankingUsers;\r\n        }\r\n},\r\n    mutations: {\r\n        resetState(state) {\r\n            state.lastUserShowed = -1;\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n            state.rankingUser = null;\r\n        },\r\n        setRankingUser(state, rankingUser) {\r\n            state.rankingUser = rankingUser;\r\n        },\r\n        setRankingUsers(state, rankingUsers) {\r\n            rankingUsers.forEach(r => {\r\n                state.rankingUsers.push(r);\r\n            });\r\n        },\r\n        resetRankingUsers(state) {\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n        },\r\n        resetRankingUsersIDs(state) {\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n        },\r\n\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRankingUserID(state, rankingUserID) {\r\n            if (-1 == state.rankingUsersIDs.findIndex(id => {\r\n                return id == rankingUserID;\r\n            })) {\r\n                state.rankingUsersIDs.push(rankingUserID);\r\n            }\r\n        }\r\n},\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init ranking state info with the appropriate data                        >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getRankingUsers')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRankingUsers ~                                                         >\r\n        // To get top 100 ranking users and current user position in ranking           >\r\n        //----------------------------------------------------------------------------->\r\n        getRankingUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getTop100RankingUsers')\r\n                    .then((top100Users) => {\r\n                        let userID = context.getters['user/getID'];\r\n\r\n                        let userIndex = top100Users.findIndex(user => {\r\n                            return user.id == userID;\r\n                        });\r\n\r\n                        context.commit('setRankingUsers', top100Users);\r\n\r\n                        if (userIndex == -1) {\r\n                            context.dispatch('database/getUserRankingPositionByID', userID)\r\n                                .then((user) => {\r\n                                    context.commit('setRankingUser', user);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getPagedRankingUsers ~                                                    >\r\n        // To get page-size users from the group of ranking users retrieved            >\r\n        //----------------------------------------------------------------------------->\r\n        getPagedRankingUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                let pageEnding = newUserShowed + Constants.RANKING_PAGE_SIZE;\r\n                if (newUserShowed == context.getters.getRankingUsers) {\r\n                    resolve(false);\r\n                }\r\n                while (newUserShowed < pageEnding && newUserShowed < context.getters.getRankingUsers.length) {\r\n                    let user = context.getters.getRankedUserByIndex(newUserShowed);\r\n\r\n                    await context.dispatch('users/getUserByID', user.id)\r\n                        .then(() => {\r\n                            context.commit(\"addRankingUserID\", user.id);\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                    newUserShowed++;\r\n                }\r\n\r\n                context.commit('setLastUserShowed', newUserShowed - 1);\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreRankingUsersToShow ~                                          >\r\n        // To check if there are ranking users left to show                            >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreRankingUsersToShow(context) {\r\n            return new Promise(async function (resolve) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        }\r\n}\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport users from \"./modules/users\";\r\nimport events from \"./modules/events\";\r\nimport user from \"./modules/user\";\r\nimport chats from \"./modules/chats\";\r\nimport ranking from \"./modules/ranking\";\r\nimport database from \"./modules/database\";\r\nimport permissions from \"./modules/permissions\";\r\n\r\nexport default new Vuex.Store({\r\n    modules: {\r\n        user,\r\n        users,\r\n        events,\r\n        chats,\r\n        ranking,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        appInfoLoaded: false\r\n},\r\n    getters: {\r\n        getAppInfoLoaded: (state) => {\r\n            return state.appInfoLoaded;\r\n        }\r\n},\r\n    mutations: {\r\n        setAppInfoLoaded(state, appInfoLoaded) {\r\n            state.appInfoLoaded = appInfoLoaded;\r\n        }\r\n},\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLoggedUser ~                                                           >\r\n        // To get user logged                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getLoggedUser: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((user) => {\r\n                        resolve(user);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset all modules state info                                             >\r\n        //----------------------------------------------------------------------------->\r\n        resetAppState: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                if (context.getters.getAppInfoLoaded) {\r\n                    let promises = [];\r\n\r\n                    promises.push(context.dispatch('user/resetState'));\r\n                    promises.push(context.dispatch('users/resetState'));\r\n                    promises.push(context.dispatch('chats/resetState'));\r\n                    promises.push(context.dispatch('events/resetState'));\r\n                    promises.push(context.dispatch('ranking/resetState'));\r\n                    promises.push(context.dispatch('permissions/resetState'));\r\n\r\n                    Promise.all(promises).then(() => {\r\n                        console.log('state successfully reseted.');\r\n                        context.commit('setAppInfoLoaded', false);\r\n                        resolve();\r\n                    })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            console.log('Error resetting state.');\r\n                            reject(this.$i18n.t('messages.ERROR_GENERIC_PROBLEM'));\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initAppInfo ~                                                             >\r\n        // To init the necessary info to init the app for a logged user                >\r\n        //----------------------------------------------------------------------------->\r\n        initAppInfo: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('user/isUserLogged')\r\n                    .then((isUserLogged) => {\r\n                        if (isUserLogged && !context.getters.getAppInfoLoaded) {\r\n                            context.dispatch('user/initState')\r\n                                .then(() => {\r\n                                    console.log('user module state successfully initiated.');\r\n                                    context.dispatch('chats/initState')\r\n                                        .then(() => {\r\n                                            console.log('chats module state successfully initiated.');\r\n                                            context.dispatch('ranking/initState')\r\n                                                .then(() => {\r\n                                                    console.log('ranking module state successfully initiated.');\r\n                                                    context.dispatch('events/initState')\r\n                                                        .then(() => {\r\n                                                            console.log('events module state successfully initiated.');\r\n                                                            context.commit('setAppInfoLoaded', true);\r\n                                                            resolve();\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                })\r\n                                                .catch((error) => {\r\n                                                    reject(error);\r\n                                                });\r\n                                        })\r\n                                        .catch((error) => {\r\n                                            reject(error);\r\n                                        });\r\n\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error initiating users module state.');\r\n                        reject(error);\r\n                    });\r\n            })\r\n\r\n        }\r\n}\r\n});\r\n","import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport firebase from \"firebase\";\r\nimport Home from './views/Home.vue'\r\nimport store from './store/store.js'\r\n\r\nVue.use(Router)\r\n\r\nconst router = new Router({\r\n    /*mode: 'history',*/\r\n    base: process.env.BASE_URL,\r\n    routes: [\r\n        {\r\n            //To redirect all routes that do not exist to /home\r\n            path: '*',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            //To redirect root route to /home\r\n            path: '/',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            path: '/home',\r\n            name: 'home',\r\n            component: Home\r\n        },\r\n        {\r\n            path: '/login',\r\n            name: 'login',\r\n            component: () => import('./views/Accounts/Login.vue')\r\n        },\r\n        {\r\n            path: '/sign-up',\r\n            name: 'signUp',\r\n            component: () => import('./views/Accounts/SignUp.vue')\r\n        },\r\n        {\r\n            path: '/email-verification',\r\n            name: 'emailVerification',\r\n            component: () => import('./views/Accounts/EmailVerification.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-profile-info',\r\n            name: 'fillYourProfileInfo',\r\n            component: () => import('./views/Accounts/FillYourProfileInfo.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-languages',\r\n            name: 'fillYourLanguages',\r\n            component: () => import('./views/Accounts/FillYourLanguages.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/set-your-profile-image',\r\n            name: 'setYourProfileImage',\r\n            component: () => import('./views/Accounts/SetYourProfileImage.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/send-change-password-email',\r\n            name: 'sendChangePasswordEmail',\r\n            component: () => import('./views/Accounts/SendChangePasswordEmail.vue'),\r\n            meta: {\r\n                requiresAuth: false\r\n            }\r\n        },\r\n        {\r\n            path: '/dashboard',\r\n            name: 'dashboard',\r\n            redirect: {name: 'profileHome'},\r\n            meta: {requiresAuth: true},\r\n            component: () => import('./views/Dashboard.vue'),\r\n            children: [\r\n                {\r\n                    path: 'ranking',\r\n                    name: 'rankingHome',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/Ranking/RankingHome.vue')\r\n                },\r\n                {\r\n                    path: 'ranking/user/:id/',\r\n                    name: 'userProfileRanking',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/UserProfile.vue')\r\n                },\r\n                {\r\n                    path: 'events',\r\n                    name: 'eventsHome',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventsHome.vue')\r\n                },\r\n                {\r\n                    path: 'event/:id/',\r\n                    name: 'eventDescription',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventDescription.vue')\r\n                },\r\n                {\r\n                    path: 'search',\r\n                    name: 'searchHome',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchHome.vue')\r\n                },\r\n                {\r\n                    path: 'search/filter',\r\n                    name: 'searchFilter',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchFilter.vue')\r\n                },\r\n                {\r\n                    path: 'search/user/:id/',\r\n                    name: 'userProfileSearch',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/UserProfile.vue')\r\n                },\r\n                {\r\n                    path: 'chats',\r\n                    name: 'chatHome',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatHome.vue')\r\n                },\r\n                {\r\n                    path: 'chats/chat/:id/',\r\n                    name: 'chatWithUser',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatWithUser.vue')\r\n                },\r\n                {\r\n                    path: 'chats/user/:id/',\r\n                    name: 'userProfileChat',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/UserProfile.vue')\r\n                },\r\n                {\r\n                    path: 'profile',\r\n                    name: 'profileHome',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileHome.vue')\r\n                },\r\n                {\r\n                    path: 'profile/:id/edit',\r\n                    name: 'profileEdit',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileEdit.vue')\r\n                },\r\n                {\r\n                    path: 'settings',\r\n                    name: 'settings',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsHome.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account',\r\n                    name: 'settingsAccount',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccount.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/name-and-last-name',\r\n                    name: 'settingsAccountEditNameAndLastName',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditNameAndLastName.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/email',\r\n                    name: 'settingsAccountEditEmail',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditEmail.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/password-verification',\r\n                    name: 'settingsAccountPasswordVerification',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountPasswordVerification.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/password',\r\n                    name: 'settingsAccountEditPassword',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditPassword.vue')\r\n                },\r\n                {\r\n                    path: 'settings/language',\r\n                    name: 'settingsLanguage',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsLanguage.vue')\r\n                },\r\n                {\r\n                    path: 'settings/permissions',\r\n                    name: 'settingsPermissions',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsPermissions.vue')\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n});\r\n\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n    const currentUser = firebase.auth().currentUser;\r\n    const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\r\n    if (requiresAuth && !currentUser) {\r\n        next('home');\r\n    } else if ((requiresAuth && currentUser && (to.name !== from.name) && (!to.path.startsWith('/dashboard') || !from.path.startsWith('/dashboard'))) || (!requiresAuth && currentUser)) {\r\n        store.dispatch('user/getRegistrationState').then(registrationState => {\r\n            if (to.path.startsWith('/' + registrationState)) {\r\n                next()\r\n            } else if (from.path.startsWith('/' + registrationState)) {\r\n                next({name: from.name});\r\n            } else {\r\n                next({path: '/' + registrationState});\r\n            }\r\n        });\r\n        //next()\r\n    }\r\n    else {\r\n        next();\r\n    }\r\n\r\n});\r\n\r\nexport default router;\r\n","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}firebase-messaging-sw.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","import Vue from 'vue';\nimport Vuetify from 'vuetify/lib';\n\n\nVue.use(Vuetify);\n\nexport default new Vuetify({\n    icons: {\n        iconfont: 'mdi'\n    },\n    theme: {\n        themes: {\n            light: {\n                primary: '#00abba',\n                secondary: '#003c4d',\n                thirdary: '#017394',\n                accent: '#82B1FF',\n                error: '#FF5252',\n                info: '#2196F3',\n                success: '#4CAF50',\n                warning: '#FFC107'\n            }\n        }\n    }\n});\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store/store'\r\nimport './registerServiceWorker'\r\nimport vuetify from './plugins/vuetify';\r\nimport firebase from \"firebase\";\r\nimport VueChatScroll from 'vue-chat-scroll'\r\nVue.use(VueChatScroll)\r\nimport VueI18n from 'vue-i18n'\r\nVue.use(VueI18n)\r\nimport * as VueGoogleMaps from \"vue2-google-maps\";\r\nimport './assets/css/main.css';\r\nimport i18n from \"./i18n\";\r\n\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: \"AIzaSyBYhPYAZkG6ML2kRArdK8xITPrZWzF0JSw\",\r\n    libraries: \"places\" // necessary for places input\r\n  }\r\n});\r\n\r\n\r\nVue.config.productionTip = false\r\n\r\nlet app = '';\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyABGil2afckXxQ127FS8fW6y5phy1wzd6g\",\r\n  authDomain: \"tfg-vue-m3m.firebaseapp.com\",\r\n  databaseURL: \"https://tfg-vue-m3m.firebaseio.com\",\r\n  projectId: \"tfg-vue-m3m\",\r\n  storageBucket: \"tfg-vue-m3m.appspot.com\",\r\n  messagingSenderId: \"144506012173\",\r\n  appId: \"1:144506012173:web:8a58aa4b50d8b336184b44\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// Initialize Cloud Firestore through Firebase\r\nlet db = firebase.firestore();\r\n\r\n// Disable deprecated features\r\ndb.settings({\r\n  timestampsInSnapshots: true\r\n});\r\n\r\ndb.enablePersistence({experimentalTabSynchronization:true})\r\n\r\nconst storage = firebase.storage()\r\n\r\nconst messaging = firebase.messaging()\r\n\r\nexport default {\r\n  db,\r\n  storage,\r\n  messaging,\r\n  i18n\r\n};\r\n\r\n\r\nfirebase.auth().onAuthStateChanged(() => {\r\n  if (!app) {\r\n    app = new Vue({\r\n      router,\r\n      store,\r\n      vuetify,\r\n      i18n,\r\n      render: h => h(App),\r\n      components: { App }\r\n    }).$mount('#app');\r\n  }\r\n})","module.exports = __webpack_public_path__ + \"img/WhiteLogoWeBabble.7ac0fe89.png\";"],"sourceRoot":""}