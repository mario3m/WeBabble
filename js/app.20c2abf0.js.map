{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?9745","webpack:///./src/store/Constants.js","webpack:///./src/store/AuxMethods.js","webpack:///./src/App.vue?1ddc","webpack:///src/App.vue","webpack:///./src/App.vue?0bd2","webpack:///./src/App.vue","webpack:///./src/views/Home.vue?6443","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?f351","webpack:///./src/views/Home.vue","webpack:///./src/store/modules/database.js","webpack:///./src/store/modules/permissions.js","webpack:///./src/store/modules/users.js","webpack:///./src/store/modules/user.js","webpack:///./src/store/modules/events.js","webpack:///./src/store/modules/chats.js","webpack:///./src/store/modules/ranking.js","webpack:///./src/store/store.js","webpack:///./src/router.js","webpack:///./src/registerServiceWorker.js","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js","webpack:///./src/assets/logo.png","webpack:///./src/views/Home.vue?c554"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","ERROR_GENERIC_PROBLEM","ERROR_GENERIC_CONNECTION_PROBLEM","ERROR_GENERIC_DATABASE_PROBLEM","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME","ERROR_WRONG_EMAIL_PASSWORD_COMBINATION","ERROR_UPLOADING_IMAGE","ERROR_SOMETHING_HAPPENED","ERROR_API_FILEREADER_NOT_SUPPORTED","ERROR_PASSWORDS_DONT_MATCH","ERROR_TOO_MANY_REQUESTS","ERROR_TEXT_WRONG_PASSWORD","ERROR_NO_ACCOUNT_WITH_THIS_EMAIL","ERROR_GETTING_CURRENT_LOCATION","RULE_TEXT_MANDATORY_FIELD","RULE_MIN_VALUE_CHARACTERS_USERNAME","RULE_MAX_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING","RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD","RULE_MIN_VALUE_AGE","RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER","ASK_FOR_IMAGE_SELECTION","DATABASE_USERNAME_FIELD","DATABASE_GENDER_FIELD","DATABASE_BIRTHDATE_FIELD","DATABASE_KNOWN_LANGUAGES_FIELD","DATABASE_LANGUAGES_TO_LEARN_FIELD","DATABASE_AVG_RATING_FIELD","DATABASE_NUM_RATINGS_FIELD","DATABASE_DATE_FIELD","RANKING_PAGE_SIZE","MAX_RANKING_PAGE_SIZE","SEARCHED_USERS_PAGE_SIZE","EVENTS_PAGE_SIZE","DATABASE_COLLECTION_EVENTS","MIN_USER_AGE","MAX_USER_AGE","TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE","TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE","TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGES","TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE","TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE","TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGE","TEXT_LANGUAGE","TEXT_GENDER","TEXT_DISTANCE","TEXT_AGE","TEXT_FILTER_BY_MOTHER_LANGUAGE","TEXT_FILTER_BY_LANGUAGE_TO_LEARN","TEXT_SEARCH","TEXT_NO_FIT_USERS_TO_LIST","TEXT_FILTERS","TEXT_RATE_USER","TEXT_YOU","TEXT_CANCEL","TEXT_RATE","TEXT_REMOVE","TEXT_WATCH_MORE","TEXT_COULD_NOT_SET_YOUR_RATING","TEXT_PROBLEM_RETRIEVING_RANKING","TEXT_PROBLEM_GETTING_CURRENT_LOCATION","TEXT_PROBLEM_GETTING_NEARBY_USERS","TEXT_PROBLEM_GETTING_EVENTS","TEXT_NO_LIMIT","TEXT_1_KM","TEXT_5_KM","TEXT_10_KM","TEXT_20_KM","TEXT_REMOVE_FILTERS","TEXT_YOUR_PROFILE","TEXT_EDIT","TEXT_EDIT_PROFILE","TEXT_USERS","TEXT_TO_FILTER","TEXT_EVENTS","TEXT_RANKING","TEXT_CHATS","TEXT_CHAT","TEXT_CLOSE","MONTHS_OF_THE_YEAR_IN_TEXT","TEXT_SHOW_USERS","TEXT_OF","TEXT_CREATE_YOUR_ACCOUNT","TEXT_CREATE_AN_ACCOUNT","TEXT_NAME","TEXT_LASTNAME","TEXT_EMAIL","TEXT_EMAIL_DIRECTION","TEXT_PASSWORD","TEXT_REPEAT_PASSWORD","TEXT_REGISTER","TEXT_REGISTER_NOW","TEXT_ALREADY_HAVE_AN_ACCOUNT","TEXT_ACCESS_NOW","TEXT_ACCESS_TO_YOUR_ACCOUNT","TEXT_VERIFICATION_EMAIL_SENT_TO","TEXT_VERIFY_YOUR_EMAIL","TEXT_USERNAME","TEXT_FILL_YOUR_PROFILE","TEXT_BIRTHDATE","TEXT_TELL_US_A_LITTLE_ABOUT_YOU","TEXT_TO_CONTINUE","TEXT_YOUR_LANGUAGES","TEXT_WOMAN","TEXT_MAN","TEXT_ANY","TEXT_OTHER","TEXT_CHOOSE_YOUR_PROFILE_IMAGE","TEXT_EMAIL_NOT_VALID","TEXT_USERNAME_NOT_VALID","TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD","TEXT_STILL_DONT_HAVE_AN_ACCOUNT","TEXT_TO_LOG_IN","TEXT_TO_LOG_OUT","TEXT_RESEND_EMAIL","TEXT_YOU_ARE_ABOUT_TO_LOG_OUT","TEXT_CONFIRM","TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT","TEXT_PROFILE_INFO","TEXT_LANGUAGES_TO_PRACTICE","TEXT_SAVE","TEXT_SETTINGS","TEXT_ACCOUNT","TEXT_PERMISSIONS","TEXT_NAME_AND_LASTNAME","TEXT_CHANGE_NAME_AND_LASTNAME","TEXT_CHANGE_EMAIL","TEXT_UPDATE","TEXT_VERIFY_YOUR_PASSWORD","TEXT_REMOVE_ACCOUNT","TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE","TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED","TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED","TEXT_CHANGE_PASSWORD","TEXT_CURRENT_PASSWORD","TEXT_NEW_PASSWORD","TEXT_CONFIRM_PASSWORD","TEXT_UPDATE_PASSWORD","TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD","TEXT_RESET_PASSWORD","TEXT_RESET_PASSWORD_INSTRUCTIONS","TEXT_SPACE_YEARS","TEXT_PARTICIPANTS","TEXT_NO_PARTICIPANTS_YET","TEXT_VERIFICATION_EMAIL_SENT","TEXT_NO_USERS_MATCH_SEARCH","TEXT_NO_EVENTS_AVAILABLE","TEXT_NO_CHATS_AVAILABLE","TEXT_LANGUAGE_INVOLVED_IN_EVENTS","TEXT_LOCATION_PERMISSION_NOT_GRANTED","IMG_USER_PROFILE_HEADER","IMG_EMOJI_SAD_FACE","arraysContainSameElements","arr1","arr2","Array","isArray","arr1_aux","concat","sort","arr2_aux","shuffle","array","Math","random","emptyCallback","angleInRad","x","PI","generateChatID","id1","id2","chatID","_vm","this","_h","$createElement","_c","_self","staticStyle","_e","staticRenderFns","component","VApp","staticClass","attrs","_v","_s","createAnAccountText","toLogInText","Constants","VBtn","VContainer","Vue","use","Vuex","namespaced","state","getters","mutations","actions","isUserAuth","firebase","currentUser","setAccount","context","firestoreDB","collection","doc","uid","set","lastName","role","chats","tokens","merge","log","catch","askForMessagingPermission","requestPermission","generatePushNotificationToken","getToken","token","localStorage","getItem","currentMessageToken","update","FieldValue","arrayUnion","getAccount","id","email","createAccountListener","userID","docRef","onSnapshot","user","formattedUser","listener","dispatch","root","createAccount","createUserWithEmailAndPassword","password","setPersistance","setPersistence","Auth","Persistence","LOCAL","login","signInWithEmailAndPassword","logout","signOut","sendEmailVerification","isEmailVerified","reload","emailVerified","sendPasswordResetEmail","updateAccountData","batch","infoToUpdate","commit","updateAccountEmail","updateEmail","updateAccountPassword","updatePassword","getProfileByUID","toDate","setHours","getProfile","profileInfo","getMultipleProfilesByUID","ids","userProfiles","forEach","getProfileByUsername","username","where","querySnapshot","size","docs","setProfile","toLowerCase","birthDate","Date","gender","description","avgRating","numRatings","score","setRegistrationCompleted","registrationCompleted","updateProfile","knownLanguages","languagesToLearn","setLanguages","uploadProfileImg","img","path","url","uploadImg","storageDB","ref","child","putString","getDownloadURL","setProfileImg","profileImg","updateUserLocation","location","geoFirestore","GeoFirestore","coordinates","GeoPoint","lat","lng","date","getLocation","getRatings","exists","setRating","newRating","rating","delete","isNextUsersPageEmpty","page","lastUserShowed","filters","ageRange","orderBy","currentDate","setFullYear","getFullYear","language","filterBy","languageToLearn","knownLanguage","startAfter","endAt","limit","documentSnapshots","searchedUserIndex","findIndex","searchedUser","newDocs","map","dataDocs","getNextUsersPage","newLastUserShowed","startAt","users","getNearbyUserIDs","geofirestore","queryNearbyUsers","near","center","radius","maxDistance","snapshot","getUsersWithSimilarUsername","getEventByID","getNextEventsPage","newLastEventShowed","lastEventShowed","languageInvolved","eventsRetrieved","events","getEventsToBeCelebrated","isNextEventsPageEmpty","addParticipantToEvent","eventID","participants","removeParticipantFromEvent","arrayRemove","createChatMessagesListener","chatMessages","messages","docChanges","change","formattedChatMessages","setMessagesToRead","addMessagesToChat","newMessage","serverTimestamp","sender","read","text","addChat","chat","newChat","getChatByID","getTop100RankingUsers","position","getUserRankingPositionByID","database","isGeolocationPermissionGranted","isPushNotificationPermissionGranted","getIsGeolocationPermissionGranted","getIsPushNotificationPermissionGranted","resetState","setIsGeolocationPermissionGranted","setIsPushNotificationPermissionGranted","checkForGeolocationPermission","navigator","permissions","query","geolocation","getCurrentPosition","AuxMethods","onchange","checkForPushNotificationsPermission","isPermissionGranted","searchedUsersIDs","genderFilter","ageRangeFilter","languageFilter","searchByUsernameFilter","maxDistanceFilter","maxDistanceRanges","maxDistanceRangesText","locationFilter","nearbyUsersIDs","distanceSearchFilter","getUsers","getGenderFilter","getAgeRangeFilter","getLanguageFilter","getSearchByUsernameFilter","getMaxDistanceFilter","getMaxDistanceRanges","getMaxDistanceRangesText","getUserByID","getNearbyUsersIDs","getNearbyUsersIDsLength","areThereFiltersOn","getFilters","filtersOn","getLastUserShowed","getSearchedUsers","searchedUsersReturn","getSearchedUsersIDsLength","getSearchedUsersIDs","setUsers","setGenderFilter","setAgeRangeFilter","setNearbyUsersIDs","setLanguageFilter","setLocationFilter","setSearchByUsernameFilter","setMaxDistanceFilter","addUser","addSearchedUserID","resetSearchedUsersIDs","setLastUserShowed","addRating","userTo","prev","newAvgRating","areThereMore","isEmpty","data2","isEmpty2","areThereMoreNearbyUsers","allIDs","idsToGetProfiles","isValid","startsWith","languageToLearnIndex","lang","knownLanguageIndex","getNearbyUsersProfiles","usersAdded","resetSearchedUsers","setFilters","resetFilters","ratings","genderOptions","defaultProfileImg","languageOptions","getName","getID","getLastName","getEmail","getRole","getChats","getUsername","getBirthDate","getGender","getDescription","getProfileImg","getAvgRating","getNumRatings","getKnownLanguages","getLanguagesToLearn","getGenderTextByID","getGenderImgByID","getGenderDefaultProfileImgByUserGender","getGenderOptionsAsArray","keys","getLanguageTextByID","getLanguageImgByID","getLanguageOptionsAsArray","getFormattedDateInTextMonth","getDate","getMonth","getLanguageFromLanguageOptionsByID","getRating","setIDe","setName","setLastName","setEmail","setRole","setChats","accountInfo","setUsername","setBirthDate","setGender","setDescription","setAvgRating","setNumRatings","setKnownLanguages","setLanguagesToLearn","setRatings","setLocation","initState","generateNotificationToken","updateAccountNameAndLastName","isUserLogged","isIt","checkIfEmailIsVerified","isVerified","checkIfUsernameIsAlreadyRegistered","createProfile","isAlreadyRegistered","nextTick","getRegistrationState","checkRegistrationState","getCurrentLocation","coords","latitude","longitude","ratingsInfo","rateUser","currentLocation","eventsToShowIDs","mapEventsToShowIDs","languageInvolvedFilter","getLanguageInvolvedFilter","getEvents","getEventsToShow","eventsToShow","getMapEventsToShow","getLastEventShowed","amIParticipating","found","find","participantID","setLanguageInvolvedFilter","resetEventsToShowIDs","addEvent","addEventToShow","addMapEventToShow","setEventsToShowIDs","setLastEventShowed","userLocation","distance","eventLocation","_lat","_long","eventNonFormattedLoc","haversine","getAllEvents","getEventParticipants","chatsToShowIDs","chatListListener","chatMessagesListeners","getChatsToShowIDs","getChatMessagesByChatID","getUnreadMessagesByChatID","myID","unreadMessages","getChatsToShow","chatsToShow","auxChat","lastMessage","getUserByChatID","getNotReadMessagesCountByChatID","count","addChatMessagesListener","updateChatMessages","index","mMessage","sortChatMessagesByDate","compareChatMessagesByDate","a","b","dateA","dateB","addChatToShow","sortChatsToShowByLastMessage","compareChatsByLastMessageDate","chatALastMessageDate","chatBLastMessageDate","setChatListListener","pushChatMessages","mp","alreadyAdded","manageChatListChange","cch","manageChatMessagesChange","newMessages","modifiedMessagesToRead","modifiedMessagesDated","setChatMessagesToReadByChatID","sendNewChatMessage","messageText","createChatListeners","rankingUsers","rankingUsersIDs","rankingUser","getRankingUsersToShow","rus","ru","getRankedUserByIndex","getRankingUsers","setRankingUser","setRankingUsers","resetRankingUsers","resetRankingUsersIDs","addRankingUserID","rankingUserID","top100Users","userIndex","getPagedRankingUsers","newUserShowed","pageEnding","areThereMoreRankingUsersToShow","Store","ranking","appInfoLoaded","allAvailableLanguages","allAvailableGenders","defaultInfo","userImage","maleUserImage","femaleUserImage","profileHeaderImage","searchInfo","lastVisible","userIDs","filtering","genderW","genderM","searchByUsername","filterByLanguageToLearn","userInfo","registrationState","profileImage","chatIDs","chatUsers","chatIDsListener","chatsInfo","activeChat","rankingInfo","activeUser","eventsInfo","activeEventID","getAppInfoLoaded","notReadMessagesCountByChatID","chatIndex","notReadMessagesCount","getProfileHeaderImage","getUserIndexByUID","getUserByUID","getSearchUsers","searchUsers","searchUser","getOtherUserInChatByChatID","getChatWithUserByChatID","getEmailVerified","getRatingOfUserByUID","getChatsInfoActiveChat","getActiveEvent","getEvent","getActiveChatUserID","getChatUserByChatID","getNewChatMessageIndex","getSearchInfoUsers","getSearchInfoUserByUID","getChatWithUser","chatWithUser","getSearchInfoFilteringFilterByLanguageToLearn","getSearchInfoFiltering","getSearchInfoLastVisible","getSearchInfo","getLanguageNameByID","getAllAvailableLanguagesAsArray","getGenderNameByID","getAngleInRad","getHaversineDistance","p1","p2","R","dLat","dLong","sin","cos","atan2","sqrt","getAllAvailableGendersAsArray","getPathToFlagImageByLanguageID","getDefaultInfoUserImage","getUserInfo","getUserInfoLocation","getUserInfoUID","getUserInfoChatIDs","getMaleDefaultInfoUserImage","getFemaleDefaultInfoUserImage","getDefaultInfoUserImageByGender","getUserInfoProfileImage","getLanguageObjectsByIDs","lids","lobjects","lid","lobject","getFormattedMonthIn3CapitalLettersText","month","charAt","toUpperCase","getStoreInitiated","storeInitiated","setAppInfoLoaded","setSearchInfoFilteringNearbyUsersIDs","setEmailVerified","setUserInfoLocation","resetSearchInfoUserIDs","resetUserInfo","setSearchInfoFiltering","newFiltering","resetRankingInfo","resetEventsInfo","resetChatsInfoActiveChat","resetChats","resetRatings","setUserRating","to","setUserRatingInfo","setNewUserRatingInfo","newNumRatings","oldRatingTotal","setUserRatings","setUserInfoEmail","setUserInfoChatIDs","setUserInfoChatIDsListener","addChatToChats","addUserToChatUsers","user2","addChatIDToChatIDs","addMessageToChat","setUserInfoUID","addUserToSearchInfoUserIDs","addRankingInfoUserID","userToAddUID","addSearchInfoUserID","setSearchInfoUserIDs","addEventsInfoEvent","userToAdd","setSearchInfoFilteringSearchByUsername","resetSearchInfo","resetSearchInfoFiltering","setSearchInfoLastVisible","setRankingInfoLastVisible","setEventsInfoLastVisible","setSearchInfoFilter","filter","setUserInfoUsername","setUserInfoName","setUserInfoLastName","setUserInfoBirthDate","setUserInfoGender","setUserInfoAvgRating","setUserInfoNumRatings","setSearchedUserAvgRating","setSearchedUserNumRatings","setUserInfoDescription","setUserInfoProfileImage","setUserInfoKnownLanguages","setUserInfoLanguagesToLearn","setRegistrationState","st","setChatWithUser","setChatsInfoActiveChat","setActiveEventID","setMessageToRead","messageIndex","messageID","closeAllChatListenersFirebase","databaseListener","addNewMessage","created","messageIndex2","getTime","resetChat","isUsernameInUseFirebase","setUserPersistanceFirebase","registerUserFirebase","logoutUserFirebase","setUserPrivateInfoFirebase","setUserPrivateInfoRegistrationStateFirebase","sendEmailVerificationFirebase","checkEmailVerifiedFirebase","setUserProfileInfoFirebase","setUserLanguagesFirebase","knownLanguagesDB","languagesToLearnDB","setUserProfileImageDatabase","imageUpload","deleteUserProfileImageDatabase","loginUserFirebase","success","getAppInfoForLoggedUserFirebase","getUserPrivateInfo","warn","getUserPublicInfoDocByUIDFirebase","userDoc","getUserPublicInfo","userChats","createChatIDsListenerFirebase","setChatWithUserMessagesToRead","sendChatMessageFirebase","myUID","otherUserUID","listUsersSearchedPageFirebase","first","page2","lastVisible2","page3","documentSnapshots2","originalDocs","setSearchedUsersState","usersRetrieved","isNextUsersSearchedPageEmptyFirebase","searchUsersByUsernameFirebase","searchByUsernameField","prepareChatWithUser","createChatFirebase","createChatListenerFirebase","otherUserID","ratingInfo","error2","setRatingInRatingsFirebase","from","getRatingsInRatingsFirebase","getRatingInUsersPublicInfo","returnValue","listUsersRankingPageFirebase","isNextRankingUsersPageEmptyFirebase","getUserLocation","lastLocation","getUserLocationFirebase","lastLocationData","JSON","stringify","updateUserLocationFirebase","geolocateUser","getNearbyUsersFirebase","meters","listNearbyUsersSearchedPageFirebase","pageUsers","nearbyUsersIndex","nearbyUsersDocs","isNextNearbyUsersSearchedPageEmptyFirebase","listEventsEventsPageFirebase","eventCoordinates","distanceInKm","parseFloat","toFixed","isNextEventsEventsPageEmptyFirebase","getEventFirebase","documentSnapshot","getLoggedUser","resetAppState","initAppInfo","Router","router","base","process","routes","redirect","Home","meta","requiresAuth","children","menu","beforeEach","next","auth","matched","some","record","store","register","ready","registered","cached","updatefound","updated","offline","Vuetify","icons","iconfont","theme","light","primary","secondary","accent","info","warning","VueChatScroll","VueGoogleMaps","load","libraries","config","productionTip","app","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","db","firestore","settings","timestampsInSnapshots","enablePersistence","experimentalTabSynchronization","storage","messaging","onAuthStateChanged","vuetify","render","h","App","$mount"],"mappings":"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","file":"js/app.20c2abf0.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-118d6538\":\"9c5be3c1\",\"chunk-3179424c\":\"eb62070a\",\"chunk-01635386\":\"ec1a7ec1\",\"chunk-3a0a4a79\":\"6d381fa0\",\"chunk-622f8ab8\":\"06c6d001\",\"chunk-07660f66\":\"d3deb44b\",\"chunk-2733c950\":\"2d7f1661\",\"chunk-5b230bd3\":\"fa06f905\",\"chunk-5cab18be\":\"5820beed\",\"chunk-7db6e6a6\":\"b4781b64\",\"chunk-1dcec364\":\"35779172\",\"chunk-17143bfe\":\"ffb5a04b\",\"chunk-4b03be8b\":\"0e5710a3\",\"chunk-5ccb35fe\":\"9f30ff02\",\"chunk-a1b665b8\":\"cbe0d6c0\",\"chunk-116beaae\":\"0fa4bd30\",\"chunk-56a2defe\":\"84f9da3d\",\"chunk-e2d880e8\":\"be44c66f\",\"chunk-1c534190\":\"a7425224\",\"chunk-1cf5cb4e\":\"ec401de0\",\"chunk-21f06558\":\"af64172b\",\"chunk-53e063b5\":\"f4af1874\",\"chunk-6872e3c0\":\"cbcfcf7f\",\"chunk-0c346784\":\"fb9024d4\",\"chunk-3dc88c82\":\"90865176\",\"chunk-0a1d012c\":\"9c276f47\",\"chunk-2939ac1d\":\"c8035a55\",\"chunk-7c007676\":\"34490ade\",\"chunk-8956f106\":\"567fc026\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-118d6538\":1,\"chunk-3179424c\":1,\"chunk-01635386\":1,\"chunk-3a0a4a79\":1,\"chunk-622f8ab8\":1,\"chunk-07660f66\":1,\"chunk-2733c950\":1,\"chunk-5b230bd3\":1,\"chunk-5cab18be\":1,\"chunk-7db6e6a6\":1,\"chunk-1dcec364\":1,\"chunk-17143bfe\":1,\"chunk-4b03be8b\":1,\"chunk-5ccb35fe\":1,\"chunk-a1b665b8\":1,\"chunk-116beaae\":1,\"chunk-56a2defe\":1,\"chunk-e2d880e8\":1,\"chunk-1c534190\":1,\"chunk-1cf5cb4e\":1,\"chunk-21f06558\":1,\"chunk-53e063b5\":1,\"chunk-6872e3c0\":1,\"chunk-0c346784\":1,\"chunk-3dc88c82\":1,\"chunk-0a1d012c\":1,\"chunk-2939ac1d\":1,\"chunk-7c007676\":1,\"chunk-8956f106\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-118d6538\":\"803f1308\",\"chunk-3179424c\":\"15fc8d6e\",\"chunk-01635386\":\"fa14cca6\",\"chunk-3a0a4a79\":\"a5256043\",\"chunk-622f8ab8\":\"dc35a825\",\"chunk-07660f66\":\"23187cca\",\"chunk-2733c950\":\"df0fdab8\",\"chunk-5b230bd3\":\"9eba1293\",\"chunk-5cab18be\":\"df0fdab8\",\"chunk-7db6e6a6\":\"6a1f38e1\",\"chunk-1dcec364\":\"b69ea1e5\",\"chunk-17143bfe\":\"16f584ce\",\"chunk-4b03be8b\":\"7268b89c\",\"chunk-5ccb35fe\":\"6ad50dc3\",\"chunk-a1b665b8\":\"4551a332\",\"chunk-116beaae\":\"8cea3ea7\",\"chunk-56a2defe\":\"84291cb1\",\"chunk-e2d880e8\":\"8cea3ea7\",\"chunk-1c534190\":\"cdbf24cd\",\"chunk-1cf5cb4e\":\"df0fdab8\",\"chunk-21f06558\":\"c7210f2c\",\"chunk-53e063b5\":\"63af7332\",\"chunk-6872e3c0\":\"8cea3ea7\",\"chunk-0c346784\":\"650191b5\",\"chunk-3dc88c82\":\"650191b5\",\"chunk-0a1d012c\":\"b315181b\",\"chunk-2939ac1d\":\"7ee0a6c0\",\"chunk-7c007676\":\"46b22924\",\"chunk-8956f106\":\"1643a8cc\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","export default{\r\n    /* ERRORS */\r\n    ERROR_GENERIC_PROBLEM: 'Parece que ha habido un problema con tu petición. Por favor, vuelve a intentarlo más tarde.',\r\n    ERROR_GENERIC_CONNECTION_PROBLEM: 'Parece que ha habido un problema de conexión. Por favor, vuelve a intentarlo más tarde.',\r\n    ERROR_GENERIC_DATABASE_PROBLEM: 'Parece que ha habido un problema con la base de datos. Por favor, vuelve a intentarlo más tarde.',\r\n    ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'Ya existe una cuenta registrada con ese E-mail. Si es tuya, prueba a iniciar sesión-',\r\n    ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'Ya existe un usuario con ese nombre.',\r\n    ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'No existe una cuenta registrada con este E-mail o la contraseña es incorrecta.',\r\n    ERROR_UPLOADING_IMAGE: 'Error subiendo la imagen.',\r\n    ERROR_SOMETHING_HAPPENED: 'Parece que ha ocurrido un error.',\r\n    ERROR_API_FILEREADER_NOT_SUPPORTED: 'Lo sentimos, la API FileReader no está soportada.',\r\n    ERROR_PASSWORDS_DONT_MATCH: 'Las contraseñas no coinciden',\r\n    ERROR_TOO_MANY_REQUESTS: 'Parece que has realizado demasiadas peticiones en poco tiempo. Por favor, vuelve a intentarlo más tarde.',\r\n    ERROR_TEXT_WRONG_PASSWORD: 'Parece que la contraseña introducida no coincide con su contraseña actual.',\r\n    ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'Parece que no hay ninguna cuenta registrada con este E-mail.',\r\n    ERROR_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema accediendo a su ubicación actual.',\r\n\r\n    /* RULES */\r\n    RULE_TEXT_MANDATORY_FIELD: 'Este campo es obligatorio',\r\n    RULE_MIN_VALUE_CHARACTERS_USERNAME: 5,\r\n    RULE_MAX_VALUE_CHARACTERS_USERNAME: 14,\r\n    RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Mínimo 5 caracteres',\r\n    RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Máximo 14 caracteres',\r\n    RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Mínimo 5 caracteres para realizar la búsqueda',\r\n    RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 20,\r\n    RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Mínimo 20 caracteres',\r\n    RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Mínimo 8 caracteres',\r\n    RULE_MIN_VALUE_AGE: 16,\r\n    RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'Debes tener al menos ' + '16' + ' años.',\r\n\r\n    /* INSTRUCTIONS */\r\n    ASK_FOR_IMAGE_SELECTION: 'Por favor, selecciona una imagen',\r\n\r\n\r\n    /* DATABASE */\r\n    DATABASE_USERNAME_FIELD: 'username',\r\n    DATABASE_GENDER_FIELD: 'gender',\r\n    DATABASE_BIRTHDATE_FIELD: 'birthDate',\r\n    DATABASE_KNOWN_LANGUAGES_FIELD: 'knownLanguages',\r\n    DATABASE_LANGUAGES_TO_LEARN_FIELD: 'languagesToLearn',\r\n    DATABASE_AVG_RATING_FIELD: 'avgRating',\r\n    DATABASE_NUM_RATINGS_FIELD: 'numRatings',\r\n    DATABASE_DATE_FIELD: 'date',\r\n    RANKING_PAGE_SIZE: 2,\r\n    MAX_RANKING_PAGE_SIZE: 100,\r\n    SEARCHED_USERS_PAGE_SIZE: 5, //Allways SEARCHED_USERS_PAGE_SIZE >= 2\r\n    EVENTS_PAGE_SIZE: 1,\r\n    DATABASE_COLLECTION_EVENTS: 'Events',\r\n\r\n    /* DATA */\r\n    MIN_USER_AGE: 16,\r\n    MAX_USER_AGE: 100,\r\n\r\n    /* TEXTS */\r\n    TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: '¿Qué idiomas buscas mejorar?',\r\n    TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Idiomas que quieres practicar',\r\n    TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: '¿Qué idiomas hablas con soltura?',\r\n    TEXT_MOTHER_LANGUAGES: 'Idiomas maternos',\r\n    TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Idioma que busca mejorar',\r\n    TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Idioma que quiere practicar',\r\n    TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Idioma que habla con soltura',\r\n    TEXT_MOTHER_LANGUAGE: 'Idioma materno',\r\n    TEXT_LANGUAGE: 'Idioma',\r\n    TEXT_GENDER: 'Género',\r\n    TEXT_DISTANCE: 'Distancia',\r\n    TEXT_AGE: 'Edad',\r\n    TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filtrar por idioma materno',\r\n    TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filtrar por idioma que quiere practicar',\r\n    TEXT_SEARCH: 'Buscar',\r\n    TEXT_NO_FIT_USERS_TO_LIST: 'No se han encontrado usuarios que cumplan con los requisitos.',\r\n    TEXT_FILTERS: 'Filtros',\r\n    TEXT_RATE_USER: 'Valora al usuario',\r\n    TEXT_YOU: 'Tú',\r\n    TEXT_CANCEL: 'Cancelar',\r\n    TEXT_RATE: 'Valorar',\r\n    TEXT_REMOVE: 'Eliminar',\r\n    TEXT_WATCH_MORE: 'Ver más',\r\n    TEXT_COULD_NOT_SET_YOUR_RATING: 'Parece que ha habido un problema: No se ha podido guardar su valoración.',\r\n    TEXT_PROBLEM_RETRIEVING_RANKING: 'Parece que ha habido un problema al cargar el ranking. Por favor, comprueba tu conexión.',\r\n    TEXT_PROBLEM_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema: no se ha podido obtener tu localizacion actual.',\r\n    TEXT_PROBLEM_GETTING_NEARBY_USERS: 'Parece que ha habido un problema: no se han podido obtener los usuarios cercanos.',\r\n    TEXT_PROBLEM_GETTING_EVENTS: 'Parece que ha habido un problema: no se han podido obtener los eventos.',\r\n    TEXT_NO_LIMIT: 'Sin límite',\r\n    TEXT_1_KM: '1 km',\r\n    TEXT_5_KM: '5 km',\r\n    TEXT_10_KM: '10 km',\r\n    TEXT_20_KM: '20 km',\r\n    TEXT_REMOVE_FILTERS: 'Eliminar filtros',\r\n    TEXT_YOUR_PROFILE: 'Tu perfil',\r\n    TEXT_EDIT:'Editar',\r\n    TEXT_EDIT_PROFILE:'Editar perfil',\r\n    TEXT_USERS: 'Usuarios',\r\n    TEXT_TO_FILTER: 'Filtrar',\r\n    TEXT_EVENTS: 'Eventos',\r\n    TEXT_RANKING: 'Ranking',\r\n    TEXT_CHATS: 'Chats',\r\n    TEXT_CHAT: 'Chats',\r\n    TEXT_CLOSE: 'Cerrar',\r\n    MONTHS_OF_THE_YEAR_IN_TEXT: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'],\r\n    TEXT_SHOW_USERS: 'Mostrar usuarios',\r\n    TEXT_OF: 'de',\r\n    TEXT_CREATE_YOUR_ACCOUNT: 'Crea tu cuenta',\r\n    TEXT_CREATE_AN_ACCOUNT: 'Crear una cuenta',\r\n    TEXT_NAME: 'Nombre',\r\n    TEXT_LASTNAME: 'Apellidos',\r\n    TEXT_EMAIL: 'E-mail',\r\n    TEXT_EMAIL_DIRECTION: 'Correo electrónico',\r\n    TEXT_PASSWORD: 'Contraseña',\r\n    TEXT_REPEAT_PASSWORD: 'Repite la contraseña',\r\n    TEXT_REGISTER: 'Registrar',\r\n    TEXT_REGISTER_NOW: '¡Regístrate ahora!',\r\n    TEXT_ALREADY_HAVE_AN_ACCOUNT: '¿Ya tienes una cuenta?',\r\n    TEXT_ACCESS_NOW: '¡Accede ahora!',\r\n    TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Accede a tu cuenta',\r\n    TEXT_VERIFICATION_EMAIL_SENT_TO: 'Para poder continuar, completa el proceso de verificación a través del enlace que hemos enviado a tu E-mail:',\r\n    TEXT_VERIFY_YOUR_EMAIL: 'Verifica tu E-mail',\r\n    TEXT_USERNAME: 'Nombre de usuario',\r\n    TEXT_FILL_YOUR_PROFILE: 'Rellena tu perfil',\r\n    TEXT_BIRTHDATE: 'Fecha de nacimiento',\r\n    TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Cuéntanos un poco sobre ti',\r\n    TEXT_TO_CONTINUE: 'Continuar',\r\n    TEXT_YOUR_LANGUAGES: 'Tus idiomas',\r\n    TEXT_WOMAN: 'Mujer',\r\n    TEXT_MAN: 'Hombre',\r\n    TEXT_ANY: 'Cualquiera',\r\n    TEXT_OTHER: 'Otro',\r\n    TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Elige tu foto de perfil',\r\n    TEXT_EMAIL_NOT_VALID: 'E-mail no válido',\r\n    TEXT_USERNAME_NOT_VALID: 'Nombre de usuario no válido',\r\n    TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n    TEXT_STILL_DONT_HAVE_AN_ACCOUNT: '¿Todavía no tienes una cuenta?',\r\n    TEXT_TO_LOG_IN: 'Iniciar sesión',\r\n    TEXT_TO_LOG_OUT: 'Cerrar sesión',\r\n    TEXT_RESEND_EMAIL: 'Volver a enviar E-mail',\r\n    TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'Va a salir de su cuenta',\r\n    TEXT_CONFIRM: 'Confirmar',\r\n    TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: '¿Está seguro de que quiere cerrar sesión?',\r\n    TEXT_PROFILE_INFO: 'Información de perfil',\r\n    TEXT_LANGUAGES_TO_PRACTICE: 'Idiomas a practicar',\r\n    TEXT_SAVE: 'Guardar',\r\n    TEXT_SETTINGS: 'Configuración e información',\r\n    TEXT_ACCOUNT: 'Cuenta',\r\n    TEXT_PERMISSIONS: 'Permisos',\r\n    TEXT_NAME_AND_LASTNAME: 'Nombre y apellidos',\r\n    TEXT_CHANGE_NAME_AND_LASTNAME: 'Cambiar nombre y apellidos',\r\n    TEXT_CHANGE_EMAIL: 'Cambiar correo electrónico',\r\n    TEXT_UPDATE: 'Actualizar',\r\n    TEXT_VERIFY_YOUR_PASSWORD: 'Verifica tu contraseña',\r\n    TEXT_REMOVE_ACCOUNT: 'Borrar cuenta',\r\n    TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Vuelve a introducir tu contraseña de WeBabble para continuar.',\r\n    TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Tu dirección de correo electrónico ha sido actualizada.',\r\n    TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Tu contraseña ha sido actualizada.',\r\n    TEXT_CHANGE_PASSWORD: 'Cambiar contraseña',\r\n    TEXT_CURRENT_PASSWORD: 'Contraseña actual',\r\n    TEXT_NEW_PASSWORD: 'Nueva contraseña',\r\n    TEXT_CONFIRM_PASSWORD: 'Confirmar la contraseña',\r\n    TEXT_UPDATE_PASSWORD: 'Actualizar contraseña',\r\n    TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Introduce tu E-mail y te ayudaremos a recuperar la contraseña:',\r\n    TEXT_RESET_PASSWORD: 'Restablecer contraseña',\r\n    TEXT_RESET_PASSWORD_INSTRUCTIONS: 'En un breve período de tiempo recibirás un email. Ábrelo y sigue las instrucciones para restablecer tu contraseña.',\r\n    TEXT_SPACE_YEARS: ' años',\r\n    TEXT_PARTICIPANTS: 'Participantes',\r\n    TEXT_NO_PARTICIPANTS_YET: 'Parece que todavía no se ha apuntado nadie. ¡Sé el primero!',\r\n    TEXT_VERIFICATION_EMAIL_SENT: 'E-mail de verificación enviado.',\r\n    TEXT_NO_USERS_MATCH_SEARCH: 'Parece que no hay usuarios que coincidan con tu búsqueda.',\r\n    TEXT_NO_EVENTS_AVAILABLE: 'Parece que no hay eventos disponibles.',\r\n    TEXT_NO_CHATS_AVAILABLE: 'Parece que no tienes ningún chat todavía. ¡Comienza a hablar con algún usuario!.',\r\n    TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Idioma de los eventos',\r\n    TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'Parece que no has dado permiso para acceder a tu localización. Concédelo para poder disponer de esta funcionalidad.',\r\n\r\n    /* IMAGES */\r\n    IMG_USER_PROFILE_HEADER: \"img/backgrounds/user_profile_header.png\",\r\n    IMG_EMOJI_SAD_FACE: 'img/emojis/sad_face.png',\r\n}\r\n","export default {\r\n    arraysContainSameElements: function (arr1, arr2) {\r\n\r\n        if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length)\r\n            return false;\r\n\r\n        var arr1_aux = arr1.concat().sort();\r\n        var arr2_aux = arr2.concat().sort();\r\n\r\n        for (var i = 0; i < arr1_aux.length; i++) {\r\n\r\n            if (arr1_aux[i] !== arr2_aux[i])\r\n                return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    },\r\n\r\n    shuffle: function (array) {\r\n        array.sort(() => Math.random() - 0.5);\r\n    },\r\n\r\n    emptyCallback: function () {\r\n\r\n    },\r\n    angleInRad: () => (x) => {\r\n        return x * Math.PI / 180;\r\n    },\r\n\r\n    generateChatID(id1, id2){\r\n        let chatID;\r\n\r\n        if (id1 < id2) {\r\n            chatID = id1 + id2;\r\n        } else {\r\n            chatID = id2 + id1;\r\n        }\r\n\r\n        return chatID;\r\n    }\r\n\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}},[(_vm.dataIsReady)?_c('router-view',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}}):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <v-app style=\"max-width: 100%; height: 100%;\">\r\n        <router-view v-if=\"dataIsReady\" style=\"max-width: 100%; height: 100%;\"/>\r\n    </v-app>\r\n</template>\r\n\r\n<script>\r\n\r\n    import {mapActions, mapMutations} from 'vuex';\r\n    import firebase from \"firebase\";\r\n    import Constants from \"./store/Constants\";\r\n\r\n    export default {\r\n        name: 'App',\r\n        components: {},\r\n        data() {\r\n            return {\r\n                dataIsReady: false\r\n            }\r\n        },\r\n        methods: {\r\n            ...mapActions('user', ['getRegistrationState']),\r\n            ...mapActions(['initAppInfo', 'getLoggedUser']),\r\n        },\r\n        created() {\r\n            let self = this;\r\n\r\n            self.getLoggedUser().then(currentUser => {\r\n                if (currentUser != null && currentUser != undefined) {\r\n                    // user is logged in\r\n                    let resultInitAppInfo = self.initAppInfo();\r\n\r\n                    resultInitAppInfo\r\n                        .then(() => {\r\n                            self.dataIsReady = true;\r\n                        })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n                } else {\r\n                    self.$store.dispatch('resetAppState').then(() => {\r\n                        self.$router.replace('home');\r\n                    })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n\r\n                    self.dataIsReady = true;\r\n                    console.log(\"No user logged\");\r\n                }\r\n            });\r\n            //this.checkRegistrationState();\r\n            /*let self = this;\r\n            let resultInitAppInfo = this.initAppInfo();\r\n\r\n            resultInitAppInfo.then(() => {\r\n                self.dataIsReady = true;\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                });*/\r\n\r\n        },\r\n\r\n    };\r\n</script>\r\n\r\n<style>\r\n    #app-toolbar {\r\n        width: 100%;\r\n    }\r\n\r\n    #loading {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n        min-height: 100vh;\r\n    }\r\n</style>\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=1726166d&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\ninstallComponents(component, {VApp})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"img-back\"},[_c('v-container',{staticClass:\"home\",staticStyle:{\"height\":\"100%\",\"position\":\"relative\",\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('div',{staticStyle:{\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('img',{attrs:{\"src\":require(\"../assets/logo.png\")}})]),_c('div',{staticClass:\"bottom-centered-buttons\",attrs:{\"align\":\"center\"}},[_c('div',{staticStyle:{\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('router-link',{attrs:{\"to\":\"/sign-up\"}},[_c('v-btn',{staticStyle:{\"width\":\"100%\"},attrs:{\"color\":\"primary\"}},[_vm._v(_vm._s(_vm.createAnAccountText))])],1)],1),_c('br'),_c('div',{staticStyle:{\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('router-link',{attrs:{\"to\":\"/login\"}},[_c('v-btn',{staticStyle:{\"width\":\"100%\"},attrs:{\"color\":\"primary\"}},[_vm._v(_vm._s(_vm.toLogInText))])],1)],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"img-back\">\r\n    <v-container class=\"home\" style=\"height: 100%; position: relative; width: 100%\" align=\"center\">\r\n\r\n      <div align=\"center\" style=\"width: 100%\">\r\n        <img src=\"../assets/logo.png\"/>\r\n      </div>\r\n\r\n      <div class=\"bottom-centered-buttons\" align=\"center\">\r\n        <div align=\"center\" style=\"width: 100%\">\r\n          <router-link to=\"/sign-up\"><v-btn color=\"primary\" style=\"width: 100%\">{{createAnAccountText}}</v-btn></router-link>\r\n        </div>\r\n        <br >\r\n        <div align=\"center\" style=\"width: 100%\">\r\n          <router-link to=\"/login\"><v-btn color=\"primary\" style=\"width: 100%\">{{toLogInText}}</v-btn></router-link>\r\n        </div>\r\n      </div>\r\n    </v-container>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\nimport Constants from \"../store/Constants\";\r\n\r\nexport default {\r\n  name: \"home\",\r\n  data() {\r\n    return {\r\n      createAnAccountText: Constants.TEXT_CREATE_AN_ACCOUNT,\r\n      toLogInText: Constants.TEXT_TO_LOG_IN,\r\n    }\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n  .bottom-centered-buttons{\r\n    width: 92.5%;\r\n    bottom:5%;\r\n    left: 50%;\r\n    transform: translate(-50%, 0);\r\n    position: fixed;\r\n  }\r\n\r\n  .img-back{\r\n    position: absolute;\r\n    top: 0px;\r\n    right: 0px;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-image: url(\"../assets/home_background.jpg\");\r\n    background-position: center;\r\n    background-size: cover;\r\n  }\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=58559630&scoped=true&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=58559630&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"58559630\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VContainer})\n","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport * as firebase from \"firebase\";\r\nimport Constants from \"../Constants\";\r\nimport {GeoFirestore} from \"geofirestore\";\r\nimport {AxiosInstance as axios} from \"axios\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----     DATABASE (Firebase) INTERACTION      -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {},\r\n    getters: {},\r\n    mutations: {},\r\n    actions: {\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- ACCOUNTS ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserAuth ~                                                              >\r\n        // To determine if user is or is not authenticated                             >\r\n        //----------------------------------------------------------------------------->\r\n        isUserAuth: function () {\r\n            return firebase.auth().currentUser;\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setAccount ~                                                              >\r\n        // To set user account info                                                    >\r\n        // parameters required: data {email, password, name, lastName, role}           >\r\n        //----------------------------------------------------------------------------->\r\n        setAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        name: data.name,\r\n                        lastName: data.lastName,\r\n                        role: 'user',\r\n                        chats: [],\r\n                        tokens: []\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Account info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ askForMessagingPermission ~                                               >\r\n        // To asf for messaging push notifications permission                          >\r\n        //----------------------------------------------------------------------------->\r\n        askForMessagingPermission(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.messaging().requestPermission()\r\n                    .then(() => {\r\n                        resolve(true);\r\n                    })\r\n                    .catch(() => {\r\n                        resolve(false);\r\n                    });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generatePushNotificationToken ~                                           >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generatePushNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.messaging().getToken().then(async (token) => {\r\n                    if (token) {\r\n                        const currentMessageToken = await window.localStorage.getItem('messagingToken');\r\n                        console.log('token will be updated', currentMessageToken != token)\r\n                        if (currentMessageToken != token) {\r\n                            console.log(\"token\")\r\n                            let firestoreDB = firebase.firestore();\r\n                            firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayUnion(token)}\r\n                            )\r\n                                .then(() => {\r\n                                    resolve();\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.error(error);\r\n                                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                                });\r\n                        }\r\n                    } else {\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAccount ~                                                              >\r\n        // To get user auth account info                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getAccount() {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"Account info successfully retrieved from firebase\");\r\n                        resolve({\r\n                            id: doc.id,\r\n                            email: firebase.auth().currentUser.email,\r\n                            ...doc.data()\r\n                        });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccountListener ~                                                   >\r\n        // To listen on changes on user account info                                   >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccountListener: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Accounts\").doc(userID)\r\n                        .onSnapshot(function (user) {\r\n                            let formattedUser = {\r\n                                id: userID,\r\n                                ...user.data(),\r\n                                listener: docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatListChange\", formattedUser, {root: true}).then(() => {\r\n                                resolve(formattedUser);\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                    firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n                        .then(() => {\r\n                            console.log(\"Success creating account in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            if (error.code == 'auth/email-already-in-use') {\r\n                                reject(Constants.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL);\r\n                            } else {\r\n                                reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                            }\r\n                        });\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setPersistance ~                                                          >\r\n        // To set firebase account persistance                                         >\r\n        //----------------------------------------------------------------------------->\r\n        setPersistance: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(() => {\r\n                        console.log(\"Success setting firebase account persistence.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error)\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log in firebase user account                                             >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n                    .then(() => {\r\n                        console.log(\"Success logging user in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        if (error.code == 'auth/wrong-password' || error.code == \"auth/user-not-found\") {\r\n                            reject(Constants.ERROR_WRONG_EMAIL_PASSWORD_COMBINATION);\r\n                        } else if (error.code == \"auth/too-many-requests\") {\r\n                            reject(Constants.ERROR_TOO_MANY_REQUESTS);\r\n                        } else {\r\n                            reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                        }\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log out of firebase user account                                         >\r\n        //----------------------------------------------------------------------------->\r\n        logout: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                if (firebase.auth() != null) {\r\n                    firebase.auth().signOut()\r\n                        .then(() => {\r\n                            console.log(\"User logged out correctly of firebase!\");\r\n                            resolve();\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(err);\r\n                            reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send firebase account email verification                                 >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.sendEmailVerification().then(function () {\r\n                    console.log('Firebase verification email sent.');\r\n                    resolve();\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    if (error.code == \"auth/too-many-requests\") {\r\n                        reject(Constants.ERROR_TOO_MANY_REQUESTS);\r\n                    } else {\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    }\r\n\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isEmailVerified ~                                                         >\r\n        // To check if firebase account email is verified                              >\r\n        //----------------------------------------------------------------------------->\r\n        isEmailVerified: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.reload().then(() => {\r\n                    if (firebase.auth().currentUser.emailVerified) {\r\n                        console.log(\"Firebase account email is verified.\");\r\n                        resolve(true);\r\n                    } else {\r\n                        resolve(false);\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendPasswordResetEmail ~                                                  >\r\n        // To send firebase account password reset email                               >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().sendPasswordResetEmail(email).then(function () {\r\n                    console.log(\"Password reset email sent.\");\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    // An error happened.\r\n                    if (error.code == 'auth/user-not-found') {\r\n                        console.log(\"No account attached to the specified email.\");\r\n                        resolve();\r\n                    } else {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountData ~                                                       >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName], [email]}                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountData: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('name')) {\r\n                    batch.update(docRef, {\"name\": data.name});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('lastName')) {\r\n                    batch.update(docRef, {\"lastName\": data.lastName});\r\n                    infoToUpdate = true;\r\n                }\r\n\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Account info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updateEmail(email).then(function () {\r\n                    console.log(\"Account email successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword: function (context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updatePassword(password).then(function () {\r\n                    console.log(\"Account password successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- PROFILES ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUID ~                                                         >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUID(context, uid) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(uid).get()\r\n                    .then((doc) => {\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            if (doc.data().hasOwnProperty(\"birthDate\")) {\r\n                                doc.data()[\"birthDate\"] = doc.data()[\"birthDate\"].toDate().setHours(0, 0, 0,);\r\n                            }\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfile ~                                                              >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfile(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('getProfileByUID', firebase.auth().currentUser.uid)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo && profileInfo.hasOwnProperty(\"birthDate\")) {\r\n                            profileInfo[\"birthDate\"] = profileInfo[\"birthDate\"].toDate().setHours(0, 0, 0,);\r\n                        }\r\n\r\n                        console.log(\"Profile info successfully retrieved from firebase\");\r\n                        resolve(profileInfo);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getMultipleProfilesByUID ~                                                >\r\n        // To get multiple user profiles by their uids                                 >\r\n        // parameters required: ids[]                                                  >\r\n        // return: userProfiles[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getMultipleProfilesByUID(context, ids) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let promises = [];\r\n                let userProfiles = [];\r\n\r\n                ids.forEach(id => {\r\n                    promises.push(\r\n                        context.dispatch('getProfileByUID', id)\r\n                            .then((profileInfo) => {\r\n                                userProfiles.push({\r\n                                    id: id,\r\n                                    ...profileInfo\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                            })\r\n                    );\r\n                });\r\n                Promise.all(promises).then(function () {\r\n                    resolve(userProfiles);\r\n                })\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUsername ~                                                    >\r\n        // To get user profile info by its username                                    >\r\n        // parameters required: username                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").where(\"username\", \"==\", username).get()\r\n                    .then((querySnapshot) => {\r\n                        if (querySnapshot.size > 0) {\r\n                            console.log(\"Profile info successfully retrieved from firebase\");\r\n                            resolve(querySnapshot.docs);\r\n                        } else {\r\n                            console.log(\"Profile info was not found in firebase\");\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfile ~                                                              >\r\n        // To set user profile info                                                    >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        setProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        username: data.username.toLowerCase(),\r\n                        birthDate: new Date(new Date(data.birthDate).setHours(0, 0, 0,)),\r\n                        gender: data.gender,\r\n                        description: data.description,\r\n                        avgRating: 0,\r\n                        numRatings: 0,\r\n                        score: 0\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Profile info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        registrationCompleted: true\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Registration state successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile info                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('username')) {\r\n                    batch.update(docRef, {\"username\": data.username});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('description')) {\r\n                    batch.update(docRef, {\"description\": data.description});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('gender')) {\r\n                    batch.update(docRef, {\"gender\": data.gender});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('birthDate')) {\r\n                    batch.update(docRef, {\"birthDate\": new Date(new Date(data.birthDate).setHours(0, 0, 0,))});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('knownLanguages')) {\r\n                    batch.update(docRef, {\"knownLanguages\": data.knownLanguages});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('languagesToLearn')) {\r\n                    batch.update(docRef, {\"languagesToLearn\": data.languagesToLearn});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Profile info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        knownLanguages: data.knownLanguages,\r\n                        languagesToLearn: data.languagesToLearn,\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User languages info successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadProfileImg ~                                                        >\r\n        // To upload a profile image to firebase storage                               >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        uploadProfileImg: function (context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let userID = firebase.auth().currentUser.uid;\r\n                let path = \"UserProfileImages/\" + userID;\r\n\r\n                let data = {\r\n                    img: img,\r\n                    path: path\r\n                };\r\n\r\n                context.dispatch('uploadImg', data)\r\n                    .then((url) => {\r\n                        resolve(url);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_UPLOADING_IMAGE);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadImg ~                                                               >\r\n        // To upload an image to firebase storage                                      >\r\n        // parameters required: data {path, img}                                       >\r\n        //----------------------------------------------------------------------------->\r\n        uploadImg: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let storageDB = firebase.storage().ref().child(data.path);\r\n                storageDB.putString(data.img, 'base64')\r\n                    .then(() => {\r\n                        storageDB.getDownloadURL().then((url) => {\r\n                            console.log('User profile image uploaded.');\r\n                            resolve(url)\r\n                        })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(Constants.ERROR_UPLOADING_IMAGE);\r\n                            });\r\n                    }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(Constants.ERROR_UPLOADING_IMAGE);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image url in firebase profile                           >\r\n        // parameters required: url                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg: function (context, url) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        profileImg: url\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User profile image successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_UPLOADING_IMAGE);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateUserLocation ~                                                      >\r\n        // To update user location in firebase using GeoFirestore library              >\r\n        // parameters required: location{lat, lng}                                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateUserLocation: function (context, location) {\r\n            let geoFirestore = new GeoFirestore(firebase.firestore());\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                geoFirestore.collection('UserLocations').doc(firebase.auth().currentUser.uid).set({\r\n                    coordinates: new firebase.firestore.GeoPoint(location.lat, location.lng),\r\n                    date: new Date()\r\n                }).then(function () {\r\n                    console.log(\"User location successfully written in firebase.\");\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get user location                                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UserLocations\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"User location successfully retrieved from firebase.\");\r\n                        let location = {\r\n                            lat: doc.data().l[0],\r\n                            lng: doc.data().l[1]\r\n                        };\r\n                        resolve(location);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------  RATINGS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        // return: ratingsInfo/null                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings: function () {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).get().then(function (doc) {\r\n                    console.log(\"User ratings successfully retrieved from firebase.\");\r\n\r\n                    if (doc.exists) {\r\n                        resolve(doc.data());\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRating ~                                                              >\r\n        // To set user rating given by the logged user                                 >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        setRating: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let newRating = {};\r\n\r\n                newRating[data.id] = data.rating;\r\n                if (data.rating) {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).set(newRating, {merge: true})\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully written in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                        });\r\n                } else {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).update({\r\n                        [data.id]: firebase.firestore.FieldValue.delete()\r\n                    })\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully deleted in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------  SEARCH ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextUsersPageEmpty ~                                                    >\r\n        // To check that if we search users with pagination, next page won't be empty  >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextUsersPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let geoFirestore = new GeoFirestore(firestoreDB);\r\n                let page;\r\n                let lastUserShowed = data.lastUserShowed;\r\n                let newLastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextUsersPage ~                                                        >\r\n        // To get search users with pagination                                         >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: {newLastUserShowed, users}                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getNextUsersPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let geoFirestore = new GeoFirestore(firestoreDB);\r\n                let page;\r\n                let newLastUserShowed;\r\n                let lastUserShowed = data.lastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> END USERNAME FILTERING\r\n\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n\r\n                if (data.lastUserShowed == null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAt(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else if (data.lastUserShowed != null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n                        newLastUserShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n\r\n                        resolve({\r\n                            newLastUserShowed: newLastUserShowed,\r\n                            users: newDocs\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUserIDs ~                                                        >\r\n        // To get IDs of nearby users                                                  >\r\n        // parameters required: data{location, maxDistance}                            >\r\n        // return: ids[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUserIDs(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n                console.log(data.maxDistance)\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUsersWithSimilarUsername ~                                             >\r\n        // To get profiles of users which username starts with the one passed as a     >\r\n        // parameter.                                                                  >\r\n        // parameters required: username                                               >\r\n        // return: userProfiles[]                                                      >\r\n        //----------------------------------------------------------------------------->\r\n        getUsersWithSimilarUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- EVENTS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                            >\r\n        // To get an event by its id                                                   >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(id).get()\r\n                    .then((doc) => {\r\n\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextEventsPage ~                                                       >\r\n        // To get events with pagination                                               >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: {newLastEventShowed, events}                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getNextEventsPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                if (lastEventShowed == null) {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAt(lastEventShowed);\r\n                } else {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                }\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        newLastEventShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve({\r\n                            newLastEventShowed: newLastEventShowed,\r\n                            events: eventsRetrieved\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventsToBeCelebrated ~                                                 >\r\n        // To get events which will be celebrated in the future                        >\r\n        // return: events[]                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getEventsToBeCelebrated: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\");\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(eventsRetrieved);\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextEventsPageEmpty ~                                                   >\r\n        // To check if next page of events is empty                                    >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextEventsPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        resolve(documentSnapshots.docs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add the logged user to an Event                                          >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayUnion(firebase.auth().currentUser.uid)\r\n                }).then(function (documentSnapshots) {\r\n                    console.log(\"User successfully added to event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove the logged user from an Event                                     >\r\n        // parameters required: eventID                                                >\r\n        // return: userID                                                              >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayRemove(firebase.auth().currentUser.uid)\r\n                }).then(function (documentSnapshots) {\r\n                    console.log(\"User successfully remove from event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*--------------------------  CHATS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatMessagesListener ~                                              >\r\n        // To create a listener for chat messages by chat id                           >\r\n        // parameters required: chatID                                                 >\r\n        // return: messages                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        createChatMessagesListener: function (context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\")\r\n                        .onSnapshot(function (chatMessages) {\r\n\r\n                            let messages = chatMessages.docChanges().map(change => {\r\n                                const id = change.doc.id;\r\n                                const dataDocs = change.doc.data();\r\n                                return {id, change: change.type, ...dataDocs};\r\n                            });\r\n\r\n                            let formattedChatMessages = {\r\n                                id: chatID,\r\n                                messages: messages,\r\n                                listener: docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatMessagesChange\", formattedChatMessages, {root: true}).then(() => {\r\n                                resolve();\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setMessagesToRead ~                                                       >\r\n        // To set messages unread in chat to read state                                >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setMessagesToRead(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let promises = [];\r\n\r\n                let batch = firestoreDB.batch();\r\n\r\n                data.messages.forEach(message => {\r\n                    batch.update(firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc(message),\r\n                        {\r\n                            'read': true\r\n                        });\r\n                });\r\n\r\n                batch.commit().then(function () {\r\n                    resolve();\r\n                })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addMessagesToChat ~                                                       >\r\n        // To add a new message to a chat in firebase                                  >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        addMessagesToChat(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newMessage = {\r\n                    date: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    sender: data.message.sender,\r\n                    read: false,\r\n                    text: data.message.text,\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc().set(newMessage)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding message\", error);\r\n                        reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addChat ~                                                                 >\r\n        // To create a new chat and add it to the user chat list                       >\r\n        // parameters required: chat{id, users[]}                                      >\r\n        //----------------------------------------------------------------------------->\r\n        addChat(context, chat) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newChat = {\r\n                    users: chat.users,\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chat.id).set(newChat)\r\n                    .then(() => {\r\n                        firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update({chats: firebase.firestore.FieldValue.arrayUnion(chat.id)})\r\n                            .then(() => {\r\n                                resolve();\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding chat\", error);\r\n                        reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getChatByID ~                                                             >\r\n        // To get a chat by its id                                                     >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getChatByID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chatID).get()\r\n                    .then((doc) => {\r\n                        resolve({\r\n                            id: doc.id,\r\n                            ...doc.data()\r\n                        });\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- RANKING ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getTop100RankingUsers ~                                                   >\r\n        // To get the top 100 ranked users in the app                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getTop100RankingUsers: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page = firestoreDB.collection(\"Ranking\");\r\n                page = page.orderBy(\"position\").limit(Constants.MAX_RANKING_PAGE_SIZE);\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserRankingPositionByID ~                                              >\r\n        // To get user position in app ranking                                         >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getUserRankingPositionByID: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Ranking\").where(\"id\", \"==\", userID).get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        if (newDocs.length > 1 || newDocs.length < 1) {\r\n                            resolve(null);\r\n                        } else {\r\n                            resolve(newDocs[0]);\r\n                        }\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_DATABASE_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n    },\r\n\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport AuxMethods from \"../AuxMethods\";\r\nimport database from \"./database\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----        APP PERMISSIONS MANAGEMENT        -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database\r\n    },\r\n    state: {\r\n        isGeolocationPermissionGranted: false,\r\n        isPushNotificationPermissionGranted: false,\r\n    },\r\n    getters: {\r\n        getIsGeolocationPermissionGranted: (state) => {\r\n            return state.isGeolocationPermissionGranted;\r\n        },\r\n        getIsPushNotificationPermissionGranted: (state) => {\r\n            return state.isPushNotificationPermissionGranted;\r\n        },\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.isGeolocationPermissionGranted = false;\r\n            state.isPushNotificationPermissionGranted = false;\r\n        },\r\n        setIsGeolocationPermissionGranted(state, isGeolocationPermissionGranted) {\r\n            state.isGeolocationPermissionGranted = isGeolocationPermissionGranted;\r\n        },\r\n        setIsPushNotificationPermissionGranted(state, isPushNotificationPermissionGranted) {\r\n            state.isPushNotificationPermissionGranted = isPushNotificationPermissionGranted;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForGeolocationPermission ~                                           >\r\n        // To check if geolocation permission has been granted by the user             >\r\n        //----------------------------------------------------------------------------->\r\n        checkForGeolocationPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                navigator.permissions.query({name: 'geolocation'}).then(function (result) {\r\n                    if (result.state == 'granted') {\r\n                        // Permission is already granted\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                        context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n\r\n                        resolve(true);\r\n                    } else if (result.state == 'prompt') {\r\n                        // Navigator will ask for permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n                    } else if (result.state == 'denied') {\r\n                        // User has denied permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n\r\n                    result.onchange = function () {\r\n                        // Whenever permission state changes\r\n\r\n                        if (result.state == 'granted') {\r\n                            // Permission is already granted\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                            context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n\r\n                            resolve(true);\r\n                        } else if (result.state == 'prompt') {\r\n                            // Navigator will ask for permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n\r\n                        } else if (result.state == 'denied') {\r\n                            // User has denied permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForPushNotificationsPermission ~                                     >\r\n        // To check if push notifications permission has been granted by the user      >\r\n        //----------------------------------------------------------------------------->\r\n        checkForPushNotificationsPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch(\"database/askForMessagingPermission\").then(function (isPermissionGranted) {\r\n                    if (isPermissionGranted) {\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", true);\r\n                        context.dispatch('user/generateNotificationToken', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                        resolve(true);\r\n                    } else{\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                APP USERS                 -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        /* All users retrieved */\r\n        users: {},\r\n\r\n        /* User IDs result of the searching process */\r\n        searchedUsersIDs: [],\r\n        lastUserShowed: null,\r\n        genderFilter: \"O\",\r\n        ageRangeFilter: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n        languageFilter: {\r\n            filterBy: \"languageToLearn\",\r\n            knownLanguage: \"all\",\r\n            languageToLearn: \"all\"\r\n        },\r\n        searchByUsernameFilter: null,\r\n        maxDistanceFilter: 3,\r\n        maxDistanceRanges: [1, 5, 10, null],\r\n        maxDistanceRangesText: [Constants.TEXT_1_KM, Constants.TEXT_5_KM, Constants.TEXT_10_KM, '∞'],\r\n        locationFilter: null,\r\n        nearbyUsersIDs: null,\r\n\r\n        /* Filtering fields */\r\n        distanceSearchFilter: null,\r\n    },\r\n    getters: {\r\n\r\n        getUsers: (state) => {\r\n            return state.users;\r\n        },\r\n\r\n        getGenderFilter: (state) => {\r\n            return state.genderFilter;\r\n        },\r\n        getAgeRangeFilter: (state) => {\r\n            return state.ageRangeFilter;\r\n        },\r\n        getLanguageFilter: (state) => {\r\n            return state.languageFilter;\r\n        },\r\n        getSearchByUsernameFilter: (state) => {\r\n            return state.searchByUsernameFilter;\r\n        },\r\n        getMaxDistanceFilter: (state) => {\r\n            return state.maxDistanceFilter;\r\n        },\r\n        getMaxDistanceRanges: (state) => {\r\n            return state.maxDistanceRanges;\r\n        },\r\n        getMaxDistanceRangesText: (state) => {\r\n            return state.maxDistanceRangesText;\r\n        },\r\n        getUserByID: (state) => (id) => {\r\n            return state.users[id];\r\n        },\r\n        getNearbyUsersIDs: (state) => {\r\n            return state.nearbyUsersIDs;\r\n        },\r\n        getNearbyUsersIDsLength: (state) => {\r\n            return state.nearbyUsersIDs.length;\r\n        },\r\n        areThereFiltersOn: (state, getters) => {\r\n            let filters = getters.getFilters;\r\n            let filtersOn = false;\r\n\r\n            if (filters.gender === \"M\" || filters.gender === \"W\"\r\n                || filters.ageRange[0] > Constants.MIN_USER_AGE\r\n                || filters.ageRange[1] < Constants.MAX_USER_AGE\r\n                || (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\")\r\n                || (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\")\r\n                || filters.maxDistance != null) {\r\n                filtersOn = true;\r\n            }\r\n\r\n            return filtersOn;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                gender: state.genderFilter,\r\n                ageRange: state.ageRangeFilter,\r\n                language: state.languageFilter,\r\n                maxDistance: state.maxDistanceRanges[state.maxDistanceFilter],\r\n                location: state.locationFilter,\r\n                username: state.searchByUsernameFilter\r\n            };\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getSearchedUsers: (state) => {\r\n\r\n            let searchedUsersReturn = [];\r\n\r\n            state.searchedUsersIDs.forEach(userID => {\r\n                searchedUsersReturn.push({\r\n                    id: userID,\r\n                    ...state.users[userID]\r\n                });\r\n            });\r\n\r\n            return searchedUsersReturn;\r\n        },\r\n        getSearchedUsersIDsLength: (state) => {\r\n            return state.searchedUsersIDs.length;\r\n        },\r\n        getSearchedUsersIDs: (state) => {\r\n            return state.searchedUsersIDs;\r\n        },\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            /* All users retrieved */\r\n            state.users = {};\r\n\r\n            /* User IDs result of the searching process */\r\n            state.searchedUsersIDs = [];\r\n            state.lastUserShowed = null;\r\n            state.genderFilter = \"O\";\r\n            state.ageRangeFilter = [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE];\r\n            state.languageFilter = {\r\n                filterBy: \"languageToLearn\",\r\n                knownLanguage: \"all\",\r\n                languageToLearn: \"all\"\r\n            };\r\n            state.searchByUsernameFilter = null;\r\n            state.maxDistanceFilter = 3;\r\n            state.maxDistanceRanges = [1000, 5000, 10000, null];\r\n            state.maxDistanceRangesText = [Constants.TEXT_1_KM, Constants.TEXT_5_KM, Constants.TEXT_10_KM, '∞'];\r\n            state.locationFilter = null;\r\n            state.nearbyUsersIDs = null;\r\n\r\n            /* Filtering fields */\r\n            state.distanceSearchFilter = null;\r\n        },\r\n        setUsers(state, users) {\r\n            state.users = users;\r\n        },\r\n        setGenderFilter: (state, genderFilter) => {\r\n            state.genderFilter = genderFilter;\r\n        },\r\n        setAgeRangeFilter: (state, ageRangeFilter) => {\r\n            state.ageRangeFilter = ageRangeFilter;\r\n        },\r\n        setNearbyUsersIDs: (state, nearbyUsersIDs) => {\r\n            state.nearbyUsersIDs = nearbyUsersIDs;\r\n        },\r\n        setLanguageFilter: (state, languageFilter) => {\r\n            state.languageFilter = languageFilter;\r\n        },\r\n        setLocationFilter: (state, locationFilter) => {\r\n            state.locationFilter = locationFilter;\r\n        },\r\n        setSearchByUsernameFilter: (state, searchByUsernameFilter) => {\r\n            state.searchByUsernameFilter = searchByUsernameFilter;\r\n        },\r\n        setMaxDistanceFilter: (state, maxDistanceFilter) => {\r\n            state.maxDistanceFilter = maxDistanceFilter;\r\n        },\r\n        addUser(state, user) {\r\n            state.users[user.id] = user;\r\n        },\r\n        addSearchedUserID(state, userID) {\r\n            state.searchedUsersIDs.push(userID);\r\n        },\r\n        resetSearchedUsersIDs(state) {\r\n            state.searchedUsersIDs = [];\r\n        },\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRating(state, data) {\r\n            let userTo = state.users[data.id];\r\n\r\n            if (data.prev == null) {\r\n                //new rate\r\n                let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                newAvgRating += data.rating;\r\n                newAvgRating /= (userTo.numRatings + 1);\r\n                state.users[data.id].avgRating = newAvgRating;\r\n                state.users[data.id].numRatings = userTo.numRatings + 1;\r\n            } else {\r\n                if (data.rating == null) {\r\n                    //remove rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating - data.prev;\r\n                    if ((userTo.numRatings - 1) != 0)\r\n                        newAvgRating /= (userTo.numRatings - 1);\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                    state.users[data.id].numRatings = userTo.numRatings - 1;\r\n                } else {\r\n                    //modify rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating + data.rating - data.prev;\r\n                    if (userTo.numRatings != 0)\r\n                        newAvgRating /= userTo.numRatings;\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                }\r\n\r\n            }\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            context.commit('resetState');\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getSearchedUsers ~                                                        >\r\n        // To list searched users using pagination                                     >\r\n        // return: true/false (are there more users to show?)                          >\r\n        //----------------------------------------------------------------------------->\r\n        getSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                if (filters.location != null && filters.location != undefined && filters.maxDistance != null) {\r\n                    if (context.getters.getLastUserShowed == null) {\r\n                        context.dispatch('database/getNearbyUserIDs', {\r\n                            location: filters.location,\r\n                            maxDistance: filters.maxDistance\r\n                        })\r\n                            .then((ids) => {\r\n                                context.commit('setNearbyUsersIDs', ids);\r\n                                context.dispatch('getNearbyUsersProfiles')\r\n                                    .then(() => {\r\n                                        context.dispatch('areThereMoreNearbyUsers')\r\n                                            .then((areThereMore) => {\r\n                                                resolve(areThereMore);\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    } else {\r\n                        context.dispatch('getNearbyUsersProfiles')\r\n                            .then(() => {\r\n                                context.dispatch('areThereMoreNearbyUsers')\r\n                                    .then((areThereMore) => {\r\n                                        resolve(areThereMore);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    }\r\n                } else {\r\n                    context.dispatch('database/getNextUsersPage', {\r\n                        lastUserShowed: context.getters.getLastUserShowed,\r\n                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                        filters: filters\r\n                    })\r\n                        .then((data) => {\r\n                            context.commit('setLastUserShowed', data.newLastUserShowed);\r\n\r\n                            data.users.forEach(user => {\r\n                                context.commit('addUser', user);\r\n                                context.commit('addSearchedUserID', user.id);\r\n                            });\r\n                            if (data.users.length > 0) {\r\n\r\n                                context.dispatch('database/isNextUsersPageEmpty', {\r\n                                    lastUserShowed: context.getters.getLastUserShowed,\r\n                                    limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                    filters: filters\r\n                                })\r\n                                    .then((isEmpty) => {\r\n                                        if (data.users.length > 0 && data.users.length < Constants.SEARCHED_USERS_PAGE_SIZE\r\n                                            && !isEmpty) {\r\n                                            context.dispatch('database/getNextUsersPage', {\r\n                                                lastUserShowed: context.getters.getLastUserShowed,\r\n                                                limit: Constants.SEARCHED_USERS_PAGE_SIZE - data.users.length,\r\n                                                filters: filters\r\n                                            })\r\n                                                .then((data2) => {\r\n                                                    context.commit('setLastUserShowed', data2.newLastUserShowed);\r\n                                                    data2.users.forEach(user => {\r\n                                                        context.commit('addUser', user);\r\n                                                        context.commit('addSearchedUserID', user.id);\r\n                                                    });\r\n                                                    context.dispatch('database/isNextUsersPageEmpty', {\r\n                                                        lastUserShowed: context.getters.getLastUserShowed,\r\n                                                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                                        filters: filters\r\n                                                    })\r\n                                                        .then((isEmpty2) => {\r\n                                                            resolve(!isEmpty2);\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                }).catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                        } else {\r\n                                            resolve(!isEmpty);\r\n                                        }\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreNearbyUsers ~                                                 >\r\n        // To check if there are valid nearby users to show yet                        >\r\n        // return: true/false (are there more valid nearby users to show?)             >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreNearbyUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n                let lastUserShowed = context.getters.getLastUserShowed;\r\n                let i;\r\n\r\n                while (lastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    let aux = Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1;\r\n\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n\r\n                    }\r\n\r\n                    lastUserShowed = i - 1;\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then((userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (!user.registrationCompleted) {\r\n                                    isValid = false;\r\n                                }\r\n\r\n                                if (isValid) {\r\n                                    resolve(true);\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n\r\n                resolve(false);\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUsersProfiles ~                                                  >\r\n        // To show valid nearby users with pagination                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUsersProfiles(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let usersAdded = 0;\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n\r\n                while (usersAdded < Constants.SEARCHED_USERS_PAGE_SIZE && context.getters.getLastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    let i;\r\n                    let lastUserShowed = context.getters.getLastUserShowed;\r\n\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                        lastUserShowed = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n                    }\r\n\r\n                    context.commit('setLastUserShowed', i - 1);\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then(async (userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (isValid) {\r\n                                    context.commit('addUser', user);\r\n                                    context.commit('addSearchedUserID', user.id);\r\n                                    usersAdded++;\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetSearchedUsers ~                                                      >\r\n        // To reset variables related to user searching                                >\r\n        //----------------------------------------------------------------------------->\r\n        resetSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"resetSearchedUsersIDs\");\r\n                context.commit('setLastUserShowed', null);\r\n\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setFilters ~                                                              >\r\n        // To set the filtering values selected by the user for the searching          >\r\n        //----------------------------------------------------------------------------->\r\n        setFilters(context, filters) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"setGenderFilter\", filters.gender);\r\n                context.commit(\"setAgeRangeFilter\", filters.ageRange);\r\n                context.commit(\"setLanguageFilter\", filters.language);\r\n                context.commit(\"setMaxDistanceFilter\", filters.maxDistance);\r\n                context.commit(\"setLocationFilter\", filters.location);\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getUserByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfileByUID', id)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            context.commit('addUser', profileInfo);\r\n                            resolve(profileInfo);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting user by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetFilters ~                                                            >\r\n        // To reset the filtering values to default                                    >\r\n        //----------------------------------------------------------------------------->\r\n        resetFilters(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"setGenderFilter\", \"O\");\r\n                context.commit(\"setAgeRangeFilter\", [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE]);\r\n                context.commit('setLanguageFilter', {\r\n                    filterBy: \"languageToLearn\",\r\n                    knownLanguage: \"all\",\r\n                    languageToLearn: \"all\"\r\n                });\r\n\r\n                context.commit(\"setLocationFilter\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setMaxDistanceFilter\", 3)\r\n                context.commit(\"setSearchByUsernameFilter\", null)\r\n\r\n                let filters = context.getters.getFilters;\r\n                filters[\"maxDistance\"] = 3;\r\n\r\n                resolve(filters);\r\n            });\r\n        },\r\n\r\n\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database.js\";\r\nimport users from \"./users.js\";\r\nimport permissions from \"./permissions.js\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----         ACCOUNTS & PROFILES INFO         -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        users\r\n    },\r\n    state: {\r\n        /* User account*/\r\n        id: null,\r\n        name: null,\r\n        lastName: null,\r\n        email: null,\r\n        chats: [],\r\n        role: 'user',\r\n\r\n        /* User profile */\r\n        // 1st part\r\n        username: null,\r\n        birthDate: null,\r\n        gender: null,\r\n        description: null,\r\n        avgRating: null,\r\n        numRatings: null,\r\n        // 2nd part\r\n        knownLanguages: null,\r\n        languagesToLearn: null,\r\n        // 3rd part\r\n        profileImg: null,\r\n\r\n        /* Geolocation info */\r\n        location: null,\r\n\r\n        /* Ratings info */\r\n        ratings: null,\r\n\r\n        /* Constants */\r\n        genderOptions: {\r\n            \"M\": {\r\n                text: Constants.TEXT_MAN,\r\n                img: \"img/genders/male.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/male-defaultUserImage.svg',\r\n            },\r\n            \"W\": {\r\n                text: Constants.TEXT_WOMAN,\r\n                img: \"img/genders/female.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/female-defaultUserImage.svg',\r\n            },\r\n            \"O\": {\r\n                text: Constants.TEXT_OTHER,\r\n                img: \"img/genders/other.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg',\r\n            }\r\n        },\r\n        languageOptions: {\r\n            \"de\": {\r\n                text: \"Alemán\",\r\n                img: \"img/flags/de.svg\"\r\n            },\r\n            \"zh\": {\r\n                text: \"Chino\",\r\n                img: \"img/flags/zh.svg\"\r\n            },\r\n            \"es\": {\r\n                text: \"Español\",\r\n                img: \"img/flags/es.svg\"\r\n            },\r\n            \"fr\": {\r\n                text: \"Francés\",\r\n                img: \"img/flags/fr.svg\"\r\n            },\r\n            \"en\": {\r\n                text: \"Inglés\",\r\n                img: \"img/flags/en.svg\"\r\n            },\r\n            \"it\": {\r\n                text: \"Italiano\",\r\n                img: \"img/flags/it.svg\"\r\n            },\r\n            \"ja\": {\r\n                text: \"Japonés\",\r\n                img: \"img/flags/ja.svg\"\r\n            },\r\n            \"pt\": {\r\n                text: \"Portugués\",\r\n                img: \"img/flags/pt.svg\"\r\n            },\r\n            \"all\": {\r\n                text: \"Cualquier idioma\",\r\n                img: \"img/flags/all.svg\"\r\n            },\r\n        },\r\n    },\r\n    getters: {\r\n        getName: (state) => {\r\n            return state.name;\r\n        },\r\n        getID: (state) => {\r\n            return state.id;\r\n        },\r\n        getLastName: (state) => {\r\n            return state.lastName;\r\n        },\r\n        getEmail: (state) => {\r\n            return state.email;\r\n        },\r\n        getRole: (state) => {\r\n            return state.role;\r\n        },\r\n        getChats: (state) => {\r\n            return state.chats;\r\n        },\r\n        getProfile: (state) => {\r\n            let data = {};\r\n\r\n            if (state.username) {\r\n                data = {\r\n                    username: state.username,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.birthDate) {\r\n                data = {\r\n                    birthDate: state.birthDate,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.gender) {\r\n                data = {\r\n                    gender: state.gender,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.description) {\r\n                data = {\r\n                    description: state.description,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.profileImg) {\r\n                data = {\r\n                    profileImg: state.profileImg,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.knownLanguages) {\r\n                data = {\r\n                    knownLanguages: state.knownLanguages,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.languagesToLearn) {\r\n                data = {\r\n                    languagesToLearn: state.languagesToLearn,\r\n                    ...data\r\n                }\r\n            }\r\n\r\n            data = {\r\n                avgRating: state.avgRating,\r\n                numRatings: state.numRatings,\r\n                ...data\r\n            }\r\n\r\n            return data;\r\n        },\r\n        getUsername: (state) => {\r\n            return state.username;\r\n        },\r\n        getBirthDate: (state) => {\r\n            return state.birthDate;\r\n        },\r\n        getGender: (state) => {\r\n            return state.gender;\r\n        },\r\n        getDescription: (state) => {\r\n            return state.description;\r\n        },\r\n        getProfileImg: (state) => {\r\n            return state.profileImg;\r\n        },\r\n        getAvgRating: (state) => {\r\n            return state.avgRating;\r\n        },\r\n        getNumRatings: (state) => {\r\n            return state.numRatings;\r\n        },\r\n        getKnownLanguages: (state) => {\r\n            return state.knownLanguages;\r\n        },\r\n        getLanguagesToLearn: (state) => {\r\n            return state.languagesToLearn;\r\n        },\r\n        getGenderTextByID: (state) => (id) => {\r\n            return state.genderOptions[id].text;\r\n        },\r\n        getGenderImgByID: (state) => (id) => {\r\n            return state.genderOptions[id].img;\r\n        },\r\n        getGenderDefaultProfileImgByUserGender: (state) => {\r\n            if (null == state.gender) {\r\n                return state.genderOptions[\"O\"].defaultProfileImg;\r\n            } else {\r\n                return state.genderOptions[state.gender].defaultProfileImg;\r\n            }\r\n        },\r\n        getGenderOptionsAsArray: (state, getters) => {\r\n            return Object.keys(state.genderOptions).map(function (id) {\r\n                let text = getters.getGenderTextByID(id);\r\n                let img = getters.getGenderImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageTextByID: (state) => (id) => {\r\n            return state.languageOptions[id].text;\r\n        },\r\n        getLanguageImgByID: (state) => (id) => {\r\n            return state.languageOptions[id].img;\r\n        },\r\n        getLanguageOptionsAsArray: (state, getters) => {\r\n            return Object.keys(state.languageOptions).map(function (id) {\r\n                let text = getters.getLanguageTextByID(id);\r\n                let img = getters.getLanguageImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getFormattedDateInTextMonth: () => (date) => {\r\n            let d = new Date(date);\r\n            return d.getDate() + \" \" + Constants.TEXT_OF + \" \" + Constants.MONTHS_OF_THE_YEAR_IN_TEXT[d.getMonth()] + \" \" + Constants.TEXT_OF + \" \" + d.getFullYear();\r\n        },\r\n        getLanguageFromLanguageOptionsByID: (state) => (id) => {\r\n            return state.languageOptions[id];\r\n        },\r\n        getLocation: (state) => {\r\n            return state.location;\r\n        },\r\n        getRatings: (state) => {\r\n            return state.ratings;\r\n        },\r\n        getRating: (state) => (id) => {\r\n            if (state.ratings) {\r\n                return state.ratings[id];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n    },\r\n    mutations: {\r\n        setIDe(state, id) {\r\n            state.id = id;\r\n        },\r\n        setName(state, name) {\r\n            state.name = name;\r\n        },\r\n        setLastName(state, lastName) {\r\n            state.lastName = lastName;\r\n        },\r\n        setEmail(state, email) {\r\n            state.email = email;\r\n        },\r\n        setRole(state, role) {\r\n            state.role = role;\r\n        },\r\n        setChats(state, chats) {\r\n            state.chats = chats;\r\n        },\r\n        setAccount(state, accountInfo) {\r\n            if (accountInfo.hasOwnProperty('email')) {\r\n                state.email = accountInfo.email;\r\n            }\r\n            if (accountInfo.hasOwnProperty('name')) {\r\n                state.name = accountInfo.name;\r\n            }\r\n            if (accountInfo.hasOwnProperty('lastName')) {\r\n                state.lastName = accountInfo.lastName;\r\n            }\r\n            if (accountInfo.hasOwnProperty('profileImg')) {\r\n                state.role = accountInfo.role;\r\n            }\r\n            if (accountInfo.hasOwnProperty('id')) {\r\n                state.id = accountInfo.id;\r\n            }\r\n            if (accountInfo.hasOwnProperty('chats')) {\r\n                state.chats = accountInfo.chats;\r\n            }\r\n        },\r\n        setUsername(state, username) {\r\n            state.username = username;\r\n        },\r\n        setBirthDate(state, birthDate) {\r\n            state.birthDate = birthDate;\r\n        },\r\n        setGender(state, gender) {\r\n            state.gender = gender;\r\n        },\r\n        setDescription(state, description) {\r\n            state.description = description;\r\n        },\r\n        setAvgRating(state, avgRating) {\r\n            state.avgRating = avgRating;\r\n        },\r\n        setNumRatings(state, numRatings) {\r\n            state.numRatings = numRatings;\r\n        },\r\n        setKnownLanguages(state, knownLanguages) {\r\n            state.knownLanguages = knownLanguages;\r\n        },\r\n        setLanguagesToLearn(state, languagesToLearn) {\r\n            state.languagesToLearn = languagesToLearn;\r\n        },\r\n        setProfileImg(state, profileImg) {\r\n            state.profileImg = profileImg;\r\n        },\r\n        setRatings(state, ratings) {\r\n            state.ratings = ratings;\r\n        },\r\n        setRating(state, data) {\r\n            if (state.ratings == null) {\r\n                state.ratings = {};\r\n            }\r\n            state.ratings[data.id] = data.rating;\r\n        },\r\n\r\n        setProfile(state, profileInfo) {\r\n            if (profileInfo) {\r\n\r\n                if (profileInfo.hasOwnProperty('username')) {\r\n                    state.username = profileInfo.username;\r\n                }\r\n                if (profileInfo.hasOwnProperty('birthDate')) {\r\n                    state.birthDate = profileInfo.birthDate;\r\n                }\r\n                if (profileInfo.hasOwnProperty('gender')) {\r\n                    state.gender = profileInfo.gender;\r\n                }\r\n                if (profileInfo.hasOwnProperty('description')) {\r\n                    state.description = profileInfo.description;\r\n                }\r\n                if (profileInfo.hasOwnProperty('avgRating')) {\r\n                    state.avgRating = profileInfo.avgRating;\r\n                }\r\n                if (profileInfo.hasOwnProperty('numRatings')) {\r\n                    state.numRatings = profileInfo.numRatings;\r\n                }\r\n                if (profileInfo.hasOwnProperty('knownLanguages')) {\r\n                    state.knownLanguages = profileInfo.knownLanguages;\r\n                }\r\n                if (profileInfo.hasOwnProperty('languagesToLearn')) {\r\n                    state.languagesToLearn = profileInfo.languagesToLearn;\r\n                }\r\n                if (profileInfo.hasOwnProperty('profileImg')) {\r\n                    state.profileImg = profileInfo.profileImg;\r\n                }\r\n            }\r\n        },\r\n        resetState(state) {\r\n            /* User account*/\r\n            state.id = null;\r\n            state.name = null;\r\n            state.lastName = null;\r\n            state.email = null;\r\n            state.role = 'user';\r\n            state.chats = [];\r\n\r\n            /* User profile */\r\n            // 1st part\r\n            state.username = null;\r\n            state.birthDate = null;\r\n            state.gender = null;\r\n            state.description = null;\r\n            state.avgRating = null;\r\n            state.numRatings = null;\r\n            // 2nd part\r\n            state.knownLanguages = null;\r\n            state.languagesToLearn = null;\r\n            // 3rd part\r\n            state.profileImg = null;\r\n\r\n            /* Ratings info */\r\n            state.ratings = null;\r\n\r\n            /* Geolocation info */\r\n            state.location = null;\r\n        },\r\n        setLocation(state, location) {\r\n            state.location = location;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init users state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n                        context.commit('setProfile', profileInfo);\r\n\r\n                        context.dispatch('database/getAccount')\r\n                            .then((accountInfo) => {\r\n                                context.commit('setAccount', accountInfo);\r\n                                context.dispatch('getRatings')\r\n                                    .then(() => {\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error)\r\n                                    });\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccount', data)\r\n                    .then(() => {\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                context.dispatch('database/setAccount', data)\r\n                                    .then(() => {\r\n                                        context.commit('setAccount', data);\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log('Error creating user account.');\r\n                                        reject(error)\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generateNotificationToken ~                                               >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generateNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/generatePushNotificationToken')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountNameAndLastName ~                                            >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountNameAndLastName(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountData', data)\r\n                    .then(() => {\r\n                        if (data.hasOwnProperty('name')) {\r\n                            context.commit('setName', data.name);\r\n                        }\r\n                        if (data.hasOwnProperty('lastName')) {\r\n                            context.commit('setLastName', data.lastName);\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountEmail', email)\r\n                    .then(() => {\r\n                        context.commit('setEmail', email);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword(context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountPassword', password)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log user in                                                              >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/login', data)\r\n                    .then(() => {\r\n                        context.commit('setAccount', data);\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserLogged ~                                                            >\r\n        // To determine if user is or is not logged                                    >\r\n        //----------------------------------------------------------------------------->\r\n        isUserLogged: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((isIt) => {\r\n                        resolve(isIt);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ logout ~                                                                  >\r\n        // To log user out                                                             >\r\n        //----------------------------------------------------------------------------->\r\n        logout(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/logout')\r\n                    .then(() => {\r\n                        context.dispatch('resetAppState', null, {root: true});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendEmailVerification')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending verification email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendPasswordResetEmail', email)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending password email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfEmailIsVerified ~                                                  >\r\n        // To check if email is verified                                               >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfEmailIsVerified(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isEmailVerified')\r\n                    .then((isVerified) => {\r\n                        resolve(isVerified);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if email is verified.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfUsernameIsAlreadyRegistered ~                                      >\r\n        // To check if a username is already in use                                    >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfUsernameIsAlreadyRegistered(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfileByUsername', username)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            resolve(true);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if username is already registered.');\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createProfile ~                                                           >\r\n        // To create user profile                                                      >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        createProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('checkIfUsernameIsAlreadyRegistered', data.username)\r\n                    .then((isAlreadyRegistered) => {\r\n                        if (isAlreadyRegistered) {\r\n                            reject(Constants.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME);\r\n                        } else {\r\n                            context.dispatch('database/setProfile', data)\r\n                                .then(() => {\r\n                                    context.commit('setUsername', data.username);\r\n                                    context.commit('setBirthDate', data.birthDate);\r\n                                    context.commit('setGender', data.gender);\r\n                                    context.commit('setDescription', data.description);\r\n                                    context.commit('setAvgRating', 0);\r\n                                    context.commit('setNumRatings', 0);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error creating user profile.');\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile data                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateProfile', data)\r\n                    .then(async () => {\r\n\r\n                        if (data.hasOwnProperty('username')) {\r\n                            context.commit('setUsername', data.username);\r\n                        }\r\n                        if (data.hasOwnProperty('description')) {\r\n                            context.commit('setDescription', data.description);\r\n                        }\r\n                        if (data.hasOwnProperty('gender')) {\r\n                            context.commit('setGender', data.gender);\r\n                        }\r\n                        if (data.hasOwnProperty('birthDate')) {\r\n                            context.commit('setBirthDate', data.birthDate);\r\n                        }\r\n                        if (data.hasOwnProperty('knownLanguages')) {\r\n                            context.commit('setKnownLanguages', data.knownLanguages);\r\n                        }\r\n                        if (data.hasOwnProperty('languagesToLearn')) {\r\n                            context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        }\r\n                        if (data.hasOwnProperty('profileImg')) {\r\n                            await context.dispatch('setProfileImg', data.profileImg).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setLanguages', data)\r\n                    .then(() => {\r\n                        context.commit('setKnownLanguages', data.knownLanguages);\r\n                        context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error setting user languages.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image                                                   >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n                Vue.nextTick(() => {\r\n\r\n                    context.dispatch('database/uploadProfileImg', img)\r\n                        .then((url) => {\r\n                            context.dispatch('database/setProfileImg', url)\r\n                                .then(() => {\r\n                                    context.commit('setProfileImg', url);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error setting user profile image.');\r\n                                    console.error(error)\r\n                                    reject(error);\r\n                                });\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('Error uploading user profile image.');\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setRegistrationCompleted', img)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error updating user registration state.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRegistrationState ~                                                    >\r\n        // To check what register info the user has already submitted                  >\r\n        //----------------------------------------------------------------------------->\r\n        getRegistrationState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n\r\n                        context.dispatch('checkRegistrationState', profileInfo)\r\n                            .then((state) => {\r\n                                context.commit('setProfile', profileInfo);\r\n                                resolve(state);\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log(error);\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkRegistrationState ~                                                  >\r\n        // To check registration state of a profile                                    >\r\n        // parameters: data {username, gender, description, avgRating, numRatings,     >\r\n        //                   knownLanguages, languagesToLearn, profileImg}             >\r\n        //----------------------------------------------------------------------------->\r\n        checkRegistrationState(context, data) {\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('checkIfEmailIsVerified')\r\n                    .then((isVerified) => {\r\n                        if (isVerified) {\r\n                            // Part 0 completed\r\n                            if (data && data.hasOwnProperty('username') && data.hasOwnProperty('gender')\r\n                                && data.hasOwnProperty('description') && data.hasOwnProperty('avgRating')\r\n                                && data.hasOwnProperty('numRatings')) {\r\n                                // Part 1 completed\r\n                                if (data.hasOwnProperty('knownLanguages') && data.hasOwnProperty('languagesToLearn')) {\r\n                                    // Part 2 completed\r\n                                    if (data.hasOwnProperty('profileImg')) {\r\n                                        // Part 3 completed\r\n                                        // Registration process completed\r\n                                        resolve('dashboard');\r\n                                    } else {\r\n                                        // State 3\r\n                                        resolve('set-your-profile-image');\r\n                                    }\r\n                                } else {\r\n                                    // State 2\r\n                                    resolve('fill-your-languages');\r\n                                }\r\n                            } else {\r\n                                // State 1\r\n                                resolve('fill-your-profile-info');\r\n                            }\r\n                        } else {\r\n                            // State 0\r\n                            resolve('email-verification');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getCurrentLocation ~                                                      >\r\n        // To get the current user location                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getCurrentLocation() {\r\n            return new Promise(function (resolve, reject) {\r\n                try {\r\n                    navigator.geolocation.getCurrentPosition(position => {\r\n                            resolve({\r\n                                lat: position.coords.latitude,\r\n                                lng: position.coords.longitude\r\n                            })\r\n                        },\r\n                        function (error) {\r\n                            console.error(error);\r\n                            reject(Constants.ERROR_GETTING_CURRENT_LOCATION);\r\n                        });\r\n                } catch (error) {\r\n                    console.error(error);\r\n                    reject(Constants.ERROR_GETTING_CURRENT_LOCATION);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getRatings')\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRatings', ratingsInfo);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error retrieving user ratings.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ rateUser ~                                                                >\r\n        // To rate a user                                                              >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        rateUser(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/setRating', data)\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRating', data);\r\n                        context.commit('users/addRating', data);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        console.log('Error rating user.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get the current (or last) user location                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('getCurrentLocation')\r\n                    .then((currentLocation) => {\r\n                        context.commit('setLocation', currentLocation);\r\n                        context.dispatch('database/updateUserLocation', currentLocation)\r\n                            .then(() => {\r\n                                resolve(currentLocation);\r\n                            })\r\n                            .catch(() => {\r\n                                resolve(currentLocation);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n\r\n                        context.dispatch('database/getLocation')\r\n                            .then((location) => {\r\n                                context.commit('setLocation', location);\r\n                                resolve(location);\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        },\r\n\r\n    },\r\n\r\n};","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\nimport haversine from 'haversine-distance'\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                 EVENTS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        events: {},\r\n        eventsToShowIDs: [],\r\n        mapEventsToShowIDs: [],\r\n        lastEventShowed: null,\r\n        languageInvolvedFilter: \"all\"\r\n    },\r\n    getters: {\r\n        getLanguageInvolvedFilter: (state) => {\r\n            return state.languageInvolvedFilter;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                languageInvolved: state.languageInvolvedFilter\r\n            };\r\n        },\r\n        getEvents: (state) => {\r\n            return state.events;\r\n        },\r\n        getEventByID: (state) => (id) => {\r\n            return state.events[id];\r\n        },\r\n        getEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.eventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getMapEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.mapEventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getLastEventShowed: (state) => {\r\n            return state.lastEventShowed;\r\n        },\r\n        amIParticipating: (state) => (data) => {\r\n\r\n            let found = null;\r\n            if (state.events[data.eventID]) {\r\n                found = state.events[data.eventID].participants.find(participantID => participantID == data.userID);\r\n                return found != undefined;\r\n            }\r\n            return null;\r\n\r\n        },\r\n    },\r\n    mutations: {\r\n        setLanguageInvolvedFilter(state, languageInvolvedFilter) {\r\n            state.languageInvolvedFilter = languageInvolvedFilter;\r\n        },\r\n        resetState(state) {\r\n            state.events = {};\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.mapEventsToShowIDs.splice(0, state.mapEventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n            state.languageInvolvedFilter = \"all\";\r\n        },\r\n        resetEventsToShowIDs(state) {\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n        },\r\n        addEvent(state, event) {\r\n            state.events[event.id] = event;\r\n        },\r\n        addParticipantToEvent(state, data) {\r\n            if (-1 == state.events[data.eventID].participants.findIndex(participantID => participantID == data.userID)) {\r\n                state.events[data.eventID].participants.push(data.userID);\r\n            }\r\n        },\r\n        removeParticipantFromEvent(state, data) {\r\n            let searchedUserIndex = state.events[data.eventID].participants.findIndex(function (userID) {\r\n                return userID == data.userID;\r\n            });\r\n            state.events[data.eventID].participants.splice(searchedUserIndex, 1);\r\n        },\r\n        addEventToShow(state, eventID) {\r\n            state.eventsToShowIDs.push(eventID);\r\n        },\r\n        addMapEventToShow(state, eventID) {\r\n            state.mapEventsToShowIDs.push(eventID);\r\n        },\r\n        setEventsToShowIDs(state, eventsToShowIDs) {\r\n            state.eventsToShowIDs = eventsToShowIDs;\r\n        },\r\n        setLastEventShowed(state, lastEventShowed) {\r\n            state.lastEventShowed = lastEventShowed;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init events state info with the appropriate data                         >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getAllEvents')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getNextEventsPage', {\r\n                    lastEventShowed: context.getters.getLastEventShowed,\r\n                    limit: Constants.EVENTS_PAGE_SIZE,\r\n                    filters: filters\r\n                })\r\n                    .then((data) => {\r\n                        context.commit('setLastEventShowed', data.newLastEventShowed);\r\n\r\n                        data.events.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                distance: distance / 1000\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addEventToShow', event.id);\r\n                        });\r\n\r\n                        if (data.events.length > 0) {\r\n                            context.dispatch('database/isNextEventsPageEmpty', {\r\n                                lastEventShowed: context.getters.getLastEventShowed,\r\n                                limit: Constants.EVENTS_PAGE_SIZE,\r\n                                filters: filters\r\n                            })\r\n                                .then((isEmpty) => {\r\n                                    resolve(!isEmpty);\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                        else{\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAllEvents ~                                                            >\r\n        // To get all events that will be celebrated                                   >\r\n        //----------------------------------------------------------------------------->\r\n        getAllEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getEventsToBeCelebrated')\r\n                    .then((eventsRetrieved) => {\r\n\r\n                        eventsRetrieved.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addMapEventToShow', event.id);\r\n                        });\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEventParticipants(context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let event = context.getters.getEventByID(eventID);\r\n                context.dispatch('database/getMultipleProfilesByUID', event.participants)\r\n                    .then((userProfiles) => {\r\n                        userProfiles.forEach(user => {\r\n                            context.commit('users/addUser', user);\r\n                        });\r\n                        resolve(userProfiles);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add user to an Event                                                     >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/addParticipantToEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"addParticipantToEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove user from an Event                                                >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/removeParticipantFromEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"removeParticipantFromEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getEventByID', id)\r\n                    .then((event) => {\r\n                        if (event) {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                distance: distance / 1000\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            resolve(event);\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting event by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n    },\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                  CHATS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        chats: {},\r\n        chatsToShowIDs: [],\r\n\r\n        chatListListener: null,\r\n        chatMessagesListeners: []\r\n    },\r\n    getters: {\r\n        getChatByID: (state) => (id) => {\r\n            return state.chats[id];\r\n        },\r\n        getChatsToShowIDs: (state) => {\r\n            return state.chatsToShowIDs;\r\n        },\r\n        getChatMessagesByChatID: (state, getters) => (chatID) => {\r\n            if (state.chats[chatID] != undefined) {\r\n                return state.chats[chatID].messages;\r\n            } else {\r\n                return [];\r\n            }\r\n\r\n        },\r\n        getUnreadMessagesByChatID: (state, getters) => (chatID) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n            let unreadMessages = [];\r\n\r\n            if (state.chats[chatID] != undefined) {\r\n                for (i = state.chats[chatID].messages.length - 1; i >= 0; i--) {\r\n                    if (state.chats[chatID].messages[i].sender != myID && !state.chats[chatID].messages[i].read) {\r\n                        unreadMessages.push(state.chats[chatID].messages[i].id);\r\n                    } else if (state.chats[chatID].messages[i].sender != myID && state.chats[chatID].messages[i].read) {\r\n                        break;\r\n                    } else if (state.chats[chatID].messages[i].sender == myID) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unreadMessages;\r\n        },\r\n        getChatsToShow: (state) => {\r\n            let chatsToShow = [];\r\n\r\n            state.chatsToShowIDs.forEach((chatID) => {\r\n                let auxChat = {};\r\n                auxChat.users = state.chats[chatID].users;\r\n                auxChat.id = state.chats[chatID].id;\r\n                auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                chatsToShow.push(auxChat)\r\n            });\r\n\r\n            return chatsToShow;\r\n        },\r\n        getUserByChatID: (state, getters) => (chatID) => {\r\n            let userID;\r\n            if (state.chats[chatID].users[0] == getters['user/getID']) {\r\n                userID = state.chats[chatID].users[1];\r\n            } else {\r\n                userID = state.chats[chatID].users[0];\r\n            }\r\n\r\n            return getters['users/getUserByID'](userID);\r\n        },\r\n\r\n        getNotReadMessagesCountByChatID: (state, getters) => (id) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n\r\n            for (i = state.chats[id].messages.length - 1; i >= 0; i--) {\r\n                if (state.chats[id].messages[i].sender != myID && !state.chats[id].messages[i].read) {\r\n                    count++;\r\n                } else if (state.chats[id].messages[i].sender != myID && state.chats[id].messages[i].read) {\r\n                    break;\r\n                } else if (state.chats[id].messages[i].sender == myID) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return count;\r\n        },\r\n\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.chats = {};\r\n            state.chatsToShowIDs.splice(0, state.chatsToShowIDs.length);\r\n\r\n            if (state.chatListListener != null && state.chatListListener != undefined) {\r\n                state.chatListListener();\r\n                state.chatListListener = null;\r\n            }\r\n\r\n            state.chatMessagesListeners.forEach(l => {\r\n                if (l != null && l != undefined) {\r\n                    l();\r\n                }\r\n            });\r\n\r\n            state.chatMessagesListeners.splice(0, state.chatMessagesListeners.length);\r\n        },\r\n        addChatMessagesListener(state, listener) {\r\n            state.chatMessagesListeners.push(listener);\r\n        },\r\n        addChat(state, chat) {\r\n            if (!state.chats[chat.id] || chat.messages.length > state.chats[chat.id].messages.length) {\r\n                Vue.set(state.chats, chat.id, chat);\r\n            }\r\n        },\r\n        updateChatMessages(state, data) {\r\n            for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n\r\n                let index = data.messages.findIndex(function (mMessage) {\r\n                    return mMessage.id === state.chats[data.chatID].messages[i].id;\r\n                });\r\n\r\n                if (index != -1) {\r\n                    Vue.set(state.chats[data.chatID].messages, i, data.messages[index]);\r\n                    data.messages.splice(index, 1);\r\n                    if (data.messages.length == 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        sortChatMessagesByDate(state, chatID) {\r\n\r\n            function compareChatMessagesByDate(a, b) {\r\n                let dateA = a.date;\r\n                let dateB = b.date;\r\n\r\n                if (dateA === null) {\r\n                    return 1;\r\n                } else if (dateB === null) {\r\n                    return -1;\r\n                }\r\n                if (dateB < dateA) {\r\n                    return 1;\r\n                }\r\n                if (dateB > dateA) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chats[chatID].messages.sort(compareChatMessagesByDate);\r\n        },\r\n        addChatToShow(state, chatID) {\r\n            if (-1 == state.chatsToShowIDs.findIndex(id => id == chatID)) {\r\n                state.chatsToShowIDs.push(chatID);\r\n            }\r\n        },\r\n        sortChatsToShowByLastMessage(state) {\r\n            function compareChatsByLastMessageDate(a, b) {\r\n                let chatALastMessageDate = state.chats[a].messages[state.chats[a].messages.length - 1].date;\r\n                let chatBLastMessageDate = state.chats[b].messages[state.chats[b].messages.length - 1].date;\r\n                if (chatALastMessageDate < chatBLastMessageDate) {\r\n                    return 1;\r\n                }\r\n                if (chatALastMessageDate > chatBLastMessageDate) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chatsToShowIDs.sort(compareChatsByLastMessageDate);\r\n        },\r\n\r\n\r\n        setChatListListener(state, chatListListener) {\r\n            state.chatListListener = chatListListener;\r\n        },\r\n\r\n        pushChatMessages(state, data) {\r\n            data.messages.forEach((mp) => {\r\n                if (mp.date != null && mp.date != undefined) {\r\n                    if (state.chats[data.chatID].messages.length == 0) {\r\n                        Vue.set(state.chats[data.chatID].messages, 0, mp);\r\n                    } else {\r\n                        let alreadyAdded = false;\r\n\r\n                        for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n                            if (state.chats[data.chatID].messages[i].date < mp.date && mp.date != null && mp.date != undefined) {\r\n                                state.chats[data.chatID].messages.push(mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!alreadyAdded) {\r\n                            state.chats[data.chatID].messages.push(mp);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            //state.chats[data.chatID].messages = state.chats[data.chatID].messages.concat(data.messages);\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init chats state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context, getters) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('createChatListeners', context.getters['user/getChats'])\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatListChange ~                                                    >\r\n        // To manage the event of changes in a chat-list                               >\r\n        // parameters required: user whose chat list we are managing                   >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatListChange(context, user) {\r\n            return new Promise(async function (resolve, reject) {\r\n\r\n                for (const chatID of user.chats) {\r\n                    if (-1 == context.getters.getChatsToShowIDs.findIndex(id => id == chatID) &&\r\n                        (!context.state.chats.hasOwnProperty(chatID) || context.state.chats[chatID].messages.length == 0)) {\r\n                        // It is new\r\n                        await context.dispatch('database/getChatByID', chatID)\r\n                            .then(async (chat) => {\r\n                                chat = {\r\n                                    ...chat,\r\n                                    messages: []\r\n                                }\r\n\r\n                                let userID;\r\n\r\n                                if (chat.users[0] == context.getters['user/getID']) {\r\n                                    userID = chat.users[1];\r\n                                } else {\r\n                                    userID = chat.users[0];\r\n                                }\r\n\r\n                                await context.dispatch('users/getUserByID', userID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChat\", chat);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                          cch          });\r\n\r\n\r\n                                // Create messages listener\r\n                                await context.dispatch('database/createChatMessagesListener', chatID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChatToShow\", chat.id);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatMessagesChange ~                                                >\r\n        // To manage the event of changes in user chat messages                        >\r\n        // parameters required: chatMessages                                           >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatMessagesChange(context, chatMessages) {\r\n            return new Promise(function (resolve, reject) {\r\n                    context.commit('addChatMessagesListener', chatMessages.listener);\r\n\r\n                    let newMessages = [];\r\n                    let modifiedMessagesToRead = [];\r\n                    let modifiedMessagesDated = [];\r\n\r\n                    chatMessages.messages.forEach((m) => {\r\n                        if (m.change == \"added\" && m.date) {\r\n                            newMessages.push(m);\r\n                        } else if (m.change == \"modified\" && m.read && m.date) {\r\n                            modifiedMessagesToRead.push(m);\r\n                        } else if (m.change == \"modified\" && !m.read && m.date) {\r\n                            modifiedMessagesDated.push(m);\r\n                        }\r\n                    });\r\n\r\n                    if (newMessages.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: newMessages});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                        context.commit(\"sortChatsToShowByLastMessage\");\r\n                    }\r\n                    if (modifiedMessagesDated.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesDated});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                        context.commit(\"sortChatsToShowByLastMessage\");\r\n                    }\r\n                    if (modifiedMessagesToRead.length > 0) {\r\n                        context.commit('updateChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesToRead});\r\n                    }\r\n                    resolve();\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setChatMessagesToReadByChatID ~                                           >\r\n        // To set messages in chat to read state                                       >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setChatMessagesToReadByChatID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let unreadMessages = context.getters.getUnreadMessagesByChatID(chatID);\r\n\r\n                context.dispatch('database/setMessagesToRead', {chatID: chatID, messages: unreadMessages})\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendNewChatMessage ~                                                      >\r\n        // To send a chat message                                                      >\r\n        // parameters required: {chatID, users, messageText}                           >\r\n        //----------------------------------------------------------------------------->\r\n        sendNewChatMessage(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let chat = context.getters.getChatByID(data.chatID);\r\n\r\n                let result;\r\n\r\n                if (context.getters.getChatByID(data.chatID).messages.length == 0) {\r\n                    result = context.dispatch('database/addChat', {id: data.chatID, users: chat.users});\r\n                } else {\r\n                    result = Promise.resolve();\r\n                }\r\n\r\n                result.then(() => {\r\n                    context.dispatch('database/addMessagesToChat', {\r\n                        chatID: data.chatID,\r\n                        message: {sender: context.getters['user/getID'], text: data.messageText}\r\n                    }).then(function () {\r\n                        resolve();\r\n                    }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatListeners ~                                                     >\r\n        // To create listeners for the chats of the user                               >\r\n        //----------------------------------------------------------------------------->\r\n        createChatListeners: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccountListener', context.getters['user/getID'])\r\n                    .then(() => {\r\n                        if (context.state.chatListListener != null && context.state.chatListListener != undefined) {\r\n                            context.state.chatListListener();\r\n                        }\r\n                        context.commit('setChatListListener', user.listener);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        }\r\n    },\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n\r\n////////////////////////////////////////////////////////\r\n//-----               APP RANKING                -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions,\r\n        users,\r\n        user\r\n    },\r\n    state: {\r\n        lastUserShowed: -1,\r\n        rankingUsers: [],\r\n        rankingUsersIDs: [],\r\n        rankingUser: null,\r\n    },\r\n    getters: {\r\n\r\n        getRankingUsersToShow: (state, getters) => {\r\n            let rus = [];\r\n\r\n            let i = 0;\r\n            state.rankingUsersIDs.forEach(uid => {\r\n                let ru = {\r\n                    ...getters['users/getUserByID'](uid)\r\n                };\r\n\r\n                ru[\"score\"] = state.rankingUsers[i].score;\r\n                ru[\"position\"] = state.rankingUsers[i].position;\r\n\r\n                rus.push(ru);\r\n                i++;\r\n            });\r\n\r\n            return rus;\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getRankedUserByIndex: (state) => (index) => {\r\n            return state.rankingUsers[index];\r\n        },\r\n        getRankingUsers: (state) => {\r\n            return state.rankingUsers;\r\n        },\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.lastUserShowed = -1;\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n            state.rankingUser = null;\r\n        },\r\n        setRankingUser(state, rankingUser) {\r\n            state.rankingUser = rankingUser;\r\n        },\r\n        setRankingUsers(state, rankingUsers) {\r\n            rankingUsers.forEach(r => {\r\n                state.rankingUsers.push(r);\r\n            });\r\n        },\r\n        resetRankingUsers(state, rankingUsers) {\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n        },\r\n        resetRankingUsersIDs(state, rankingUsers) {\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n        },\r\n\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRankingUserID(state, rankingUserID) {\r\n            state.rankingUsersIDs.push(rankingUserID);\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init ranking state info with the appropriate data                        >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getRankingUsers')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRankingUsers ~                                                         >\r\n        // To get top 100 ranking users and current user position in ranking           >\r\n        //----------------------------------------------------------------------------->\r\n        getRankingUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getTop100RankingUsers')\r\n                    .then((top100Users) => {\r\n                        let userID = context.getters['user/getID'];\r\n\r\n                        let userIndex = top100Users.findIndex(user => {\r\n                            return user.id == userID;\r\n                        });\r\n\r\n                        context.commit('setRankingUsers', top100Users);\r\n\r\n                        if (userIndex == -1) {\r\n                            context.dispatch('database/getUserRankingPositionByID', userID)\r\n                                .then((user) => {\r\n                                    context.commit('setRankingUser', user);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getPagedRankingUsers ~                                                    >\r\n        // To get page-size users from the group of ranking users retrieved            >\r\n        //----------------------------------------------------------------------------->\r\n        getPagedRankingUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                let pageEnding = newUserShowed + Constants.RANKING_PAGE_SIZE;\r\n\r\n                while (newUserShowed < pageEnding && newUserShowed < context.getters.getRankingUsers.length) {\r\n                    let user = context.getters.getRankedUserByIndex(newUserShowed);\r\n\r\n                    await context.dispatch('users/getUserByID', user.id)\r\n                        .then(() => {\r\n                            context.commit(\"addRankingUserID\", user.id);\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                    newUserShowed++;\r\n                }\r\n\r\n                context.commit('setLastUserShowed', newUserShowed - 1);\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreRankingUsersToShow ~                                          >\r\n        // To check if there are ranking users left to show                            >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreRankingUsersToShow(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport * as firebase from \"firebase\";\r\nimport {GeoFirestore} from 'geofirestore';\r\nimport Constants from \"./Constants\";\r\nimport users from \"./modules/users\";\r\nimport events from \"./modules/events\";\r\nimport user from \"./modules/user\";\r\nimport chats from \"./modules/chats\";\r\nimport ranking from \"./modules/ranking\";\r\nimport database from \"./modules/database\";\r\nimport permissions from \"./modules/permissions\";\r\n\r\nexport default new Vuex.Store({\r\n    modules: {\r\n        user,\r\n        users,\r\n        events,\r\n        chats,\r\n        ranking,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        appInfoLoaded: false,\r\n        allAvailableLanguages: {\r\n            \"de\": \"Alemán\",\r\n            \"zh\": \"Chino\",\r\n            \"es\": \"Español\",\r\n            \"fr\": \"Francés\",\r\n            \"en\": \"Inglés\",\r\n            \"it\": \"Italiano\",\r\n            \"ja\": \"Japonés\",\r\n            \"pt\": \"Portugués\",\r\n            \"all\": \"Cualquier idioma\"\r\n        },\r\n        allAvailableGenders: {\r\n            \"M\": {\r\n                name: \"Hombre\",\r\n                img: \"img/genders/male.svg\"\r\n            },\r\n            \"W\": {\r\n                name: \"Mujer\",\r\n                img: \"img/genders/female.svg\"\r\n            }\r\n        },\r\n        defaultInfo: {\r\n            userImage: 'img/defaultUserImages/defaultUserImage.svg',\r\n            maleUserImage: 'img/defaultUserImages/male-defaultUserImage.svg',\r\n            femaleUserImage: 'img/defaultUserImages/female-defaultUserImage.svg',\r\n            profileHeaderImage: \"img/backgrounds/user_profile_header.png\"\r\n        },\r\n        searchInfo: {\r\n            lastVisible: null,\r\n            userIDs: [],\r\n            filtering: {\r\n                genderW: true,\r\n                genderM: true,\r\n                ageRange: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n                maxDistance: 3,\r\n                maxDistanceRanges: [5000, 10000, 20000, null],\r\n                maxDistanceRangesText: [Constants.TEXT_5_KM, Constants.TEXT_10_KM, Constants.TEXT_10_KM, '∞'],\r\n                searchByUsername: false,\r\n                filterByLanguageToLearn: true,\r\n                knownLanguage:\r\n                    {\r\n                        id: \"all\",\r\n                        text: \"Cualquier idioma\"\r\n                    },\r\n                languageToLearn:\r\n                    {\r\n                        id: \"all\",\r\n                        text: \"Cualquier idioma\"\r\n                    },\r\n                nearbyUsersIDs: [],\r\n            },\r\n\r\n        },\r\n        emailVerified: false,\r\n        userInfo: {\r\n            uid: null,\r\n            registrationState: null,\r\n            username: null,\r\n            email: null,\r\n            name: null,\r\n            lastName: null,\r\n            birthDate: null,\r\n            gender: null,\r\n            description: null,\r\n            knownLanguages: null,\r\n            languagesToLearn: null,\r\n            profileImage: null,\r\n            chatIDs: [],\r\n            chatUsers: [],\r\n            chatIDsListener: null,\r\n            avgRating: null,\r\n            numRatings: null,\r\n            location: {}\r\n        },\r\n        chats: [],\r\n        chatsInfo: {\r\n            activeChat: null\r\n        },\r\n        rankingInfo: {\r\n            lastVisible: null,\r\n            userIDs: []\r\n        },\r\n        activeUser: [],\r\n        eventsInfo: {\r\n            lastVisible: null,\r\n            events: []\r\n        },\r\n        activeEventID: null,\r\n        ratings: {},\r\n        users: []\r\n    },\r\n    getters: {\r\n        getAppInfoLoaded: (state) => {\r\n            return state.appInfoLoaded;\r\n        },\r\n\r\n        notReadMessagesCountByChatID: (state) => (chatID) => {\r\n            let chatIndex = state.chats.findIndex(chat => {\r\n                return chat.id == chatID;\r\n            });\r\n\r\n            let notReadMessagesCount = 0;\r\n\r\n            if (chatIndex != null) {\r\n                state.chats[chatIndex].messages.forEach(function (message) {\r\n                    if (message.sender !== state.userInfo.uid && !message.read) {\r\n                        notReadMessagesCount++;\r\n                    }\r\n                })\r\n            }\r\n\r\n            return notReadMessagesCount;\r\n        },\r\n        getProfileHeaderImage: (state) => {\r\n            return state.defaultInfo.profileHeaderImage;\r\n        },\r\n\r\n        getUserIndexByUID: (state) => (uid) => {\r\n            return state.users.findIndex(user => {\r\n                return user.uid == uid;\r\n            });\r\n        },\r\n        getUserByUID: (state, getters) => (userID) => {\r\n            let userIndex = getters.getUserIndexByUID(userID);\r\n\r\n            if (-1 != userIndex) {\r\n                return state.users[userIndex];\r\n            } else {\r\n                return null;\r\n            }\r\n\r\n        },\r\n        getRankingUsers: (state, getters) => {\r\n            let rankingUsers = [];\r\n            state.rankingInfo.userIDs.forEach(function (rankingUser) {\r\n                let userIndex = getters.getUserIndexByUID(rankingUser);\r\n                if (userIndex != -1) {\r\n                    rankingUsers.push(state.users[userIndex]);\r\n                }\r\n            });\r\n\r\n            return rankingUsers;\r\n        },\r\n        getSearchUsers: (state, getters) => {\r\n            let searchUsers = [];\r\n            state.searchInfo.userIDs.forEach(function (searchUser) {\r\n                let userIndex = getters.getUserIndexByUID(searchUser);\r\n                if (userIndex != -1) {\r\n                    searchUsers.push(state.users[userIndex]);\r\n                }\r\n            });\r\n\r\n            return searchUsers;\r\n        },\r\n        getOtherUserInChatByChatID: (state, getters) => (chatID) => {\r\n            let chat = getters.getChatWithUserByChatID(chatID);\r\n\r\n            let uid = null;\r\n            chat.users.forEach(function (userID) {\r\n                if (userID != state.userInfo.uid) {\r\n                    uid = userID;\r\n                }\r\n            });\r\n\r\n            if (uid != null) {\r\n                return getters.getUserByUID(uid);\r\n            }\r\n\r\n            return null;\r\n        },\r\n        getEmailVerified: (state) => {\r\n            return state.emailVerified;\r\n        },\r\n        getRatingOfUserByUID: (state) => (uid) => {\r\n            return state.ratings[uid];\r\n        },\r\n        getRegistrationState: (state) => {\r\n            return state.userInfo.registrationState;\r\n        },\r\n        getChatsInfoActiveChat: (state) => {\r\n            return state.chatsInfo.activeChat;\r\n        },\r\n        getActiveEvent: (state) => {\r\n            return state.eventsInfo.events.find(function (event) {\r\n                return event.id === state.activeEventID;\r\n            });\r\n\r\n        },\r\n        getEvent: (state) => (id) => {\r\n            return state.eventsInfo.events.find(function (event) {\r\n                return event.id === id;\r\n            });\r\n\r\n        },\r\n        getActiveChatUserID: (state) => {\r\n            return state.activeChat.userID;\r\n        },\r\n        getChatUserByChatID: (state) => (chatID) => {\r\n            return state.userInfo.chatUsers.find(function (user) {\r\n                return user.chatID == chatID;\r\n            })\r\n        },\r\n        getNewChatMessageIndex: (state) => (chatIndex) => {\r\n            return state.chats[chatIndex].messages.length;\r\n        },\r\n        getSearchInfoUsers: function (state) {\r\n            return state.searchInfo.userIDs;\r\n        },\r\n        getSearchInfoUserByUID: (state) => (uid) => {\r\n            return state.searchInfo.userIDs.find(function (user) {\r\n                return user.uid == uid;\r\n            });\r\n        },\r\n        getChatWithUser: function (state) {\r\n            return state.chatWithUser;\r\n        },\r\n        getChats: (state) => {\r\n            return state.chats;\r\n        },\r\n        getSearchInfoFilteringFilterByLanguageToLearn: function (state) {\r\n            return state.searchInfo.filtering.filterByLanguageToLearn;\r\n        },\r\n        getSearchInfoFiltering: function (state) {\r\n            return state.searchInfo.filtering;\r\n        },\r\n        getSearchInfoLastVisible: function (state) {\r\n            return state.searchInfo.lastVisible;\r\n        },\r\n        getSearchInfo: (state) => {\r\n            return state.searchInfo;\r\n        },\r\n        getLanguageNameByID: (state) => (id) => {\r\n            return state.allAvailableLanguages[id];\r\n        },\r\n        getChatWithUserByChatID: (state) => (chatID) => {\r\n            return state.chats.find(function (chat) {\r\n                return chat.id == chatID;\r\n            });\r\n        },\r\n        getAllAvailableLanguagesAsArray: (state, getters) => {\r\n            return Object.keys(state.allAvailableLanguages).map(function (id) {\r\n                let text = getters.getLanguageNameByID(id)\r\n                return new Object({id, text});\r\n            });\r\n        },\r\n        getGenderNameByID: (state) => (id) => {\r\n            return state.allAvailableGenders[id].name;\r\n        },\r\n\r\n        getAngleInRad: () => (x) => {\r\n            return x * Math.PI / 180;\r\n        },\r\n        getHaversineDistance: (state, getters) => (data) => {\r\n            let p1 = data.p1;\r\n            let p2 = data.p2;\r\n\r\n            let R = 6378137; // Earth’s mean radius in meter\r\n            let dLat = getters.getAngleInRad(p2.lat - p1.lat);\r\n            let dLong = getters.getAngleInRad(p2.lng - p1.lng);\r\n            let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(getters.getAngleInRad(p1.lat)) * Math.cos(getters.getAngleInRad(p2.lat)) *\r\n                Math.sin(dLong / 2) * Math.sin(dLong / 2);\r\n            let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            let distance = R * c;\r\n            return distance; // returns the distance in meters\r\n        },\r\n\r\n\r\n        getGenderImgByID: (state) => (id) => {\r\n            return state.allAvailableGenders[id].img;\r\n        },\r\n        getAllAvailableGendersAsArray: (state, getters) => {\r\n            return Object.keys(state.allAvailableGenders).map(function (id) {\r\n                let name = getters.getGenderNameByID(id);\r\n                let img = getters.getGenderImgByID(id);\r\n                return new Object({id, name, img});\r\n            });\r\n        },\r\n        getPathToFlagImageByLanguageID: () => (lang) => {\r\n            return \"img/flags/\" + lang + \".svg\";\r\n        },\r\n        getDefaultInfoUserImage: (state) => {\r\n            return state.defaultInfo.userImage;\r\n        },\r\n        getUserInfo: (state) => {\r\n            return state.userInfo;\r\n        },\r\n        getUserInfoLocation: (state) => {\r\n            return state.userInfo.location;\r\n        },\r\n        getUserInfoUID: (state) => {\r\n            return state.userInfo.uid;\r\n        },\r\n        getUserInfoChatIDs: (state) => {\r\n            return state.userInfo.chatIDs;\r\n        },\r\n        getMaleDefaultInfoUserImage: (state) => {\r\n            return state.defaultInfo.maleUserImage;\r\n        },\r\n        getFemaleDefaultInfoUserImage: (state) => {\r\n            return state.defaultInfo.femaleUserImage;\r\n        },\r\n        getDefaultInfoUserImageByGender: (state, getters) => {\r\n            if (state.userInfo.gender == \"M\") {\r\n                return getters.getMaleDefaultInfoUserImage;\r\n            } else if (state.userInfo.gender == \"W\") {\r\n                return getters.getFemaleDefaultInfoUserImage;\r\n            } else {\r\n                return state.defaultInfo.userImage;\r\n            }\r\n        },\r\n        getUserInfoProfileImage: (state, getters) => {\r\n            if (!state.userInfo.profileImage) {\r\n                return getters.getDefaultInfoUserImageByGender;\r\n            } else {\r\n                return state.userInfo.profileImage;\r\n            }\r\n\r\n        },\r\n        getLanguageObjectsByIDs: (state, getters, lids) => {\r\n            let lobjects = [];\r\n            lids.forEach(function (lid) {\r\n                let lobject = {\r\n                    name: getters.getLanguageNameByID(lid),\r\n                    img: getters.getPathToFlagImageByLanguageID(lid),\r\n                };\r\n                lobjects.push(lobject);\r\n            })\r\n            return lobjects;\r\n        },\r\n        getFormattedDateInTextMonth: () => (date) => {\r\n            let d = new Date(date);\r\n            return d.getDate() + \" \" + Constants.TEXT_OF + \" \" + Constants.MONTHS_OF_THE_YEAR_IN_TEXT[d.getMonth()] + \" \" + Constants.TEXT_OF + \" \" + d.getFullYear();\r\n        },\r\n        getFormattedMonthIn3CapitalLettersText: () => (date) => {\r\n            let d = new Date(date);\r\n            let month = Constants.MONTHS_OF_THE_YEAR_IN_TEXT[d.getMonth()];\r\n            return month.charAt(0).toUpperCase() + month.charAt(1).toUpperCase() + month.charAt(2).toUpperCase();\r\n        },\r\n        getStoreInitiated: (state) => {\r\n            return state.storeInitiated;\r\n        }\r\n\r\n\r\n    },\r\n    mutations: {\r\n        setAppInfoLoaded(state, appInfoLoaded) {\r\n            state.appInfoLoaded = appInfoLoaded;\r\n        },\r\n        setSearchInfoFilteringNearbyUsersIDs(state, nearbyUsersIDs) {\r\n            state.searchInfo.filtering.nearbyUsersIDs = nearbyUsersIDs;\r\n        },\r\n\r\n        setEmailVerified(state, isVerified) {\r\n            state.emailVerified = isVerified;\r\n        },\r\n        setUserInfoLocation(state, location) {\r\n            state.userInfo.location = location;\r\n        },\r\n        resetSearchInfoUserIDs(state) {\r\n            state.searchInfo.userIDs = [];\r\n        },\r\n        resetUserInfo(state) {\r\n            state.userInfo = {\r\n                uid: null,\r\n                registrationState: null,\r\n                username: null,\r\n                email: null,\r\n                name: null,\r\n                lastName: null,\r\n                birthDate: null,\r\n                gender: null,\r\n                description: null,\r\n                knownLanguages: null,\r\n                languagesToLearn: null,\r\n                profileImage: null,\r\n                chatIDs: [],\r\n                chatUsers: [],\r\n                chatIDsListener: null,\r\n                avgRating: null,\r\n                numRatings: null\r\n            };\r\n        },\r\n        setSearchInfoFiltering: function (state, newFiltering) {\r\n            return state.searchInfo.filtering = newFiltering;\r\n        },\r\n        resetRankingInfo(state) {\r\n            state.rankingInfo = {\r\n                lastVisible: null,\r\n                userIDs: []\r\n            };\r\n        },\r\n        resetEventsInfo(state) {\r\n            state.eventsInfo = {\r\n                lastVisible: null,\r\n                events: []\r\n            };\r\n        },\r\n        resetChatsInfoActiveChat(state) {\r\n            state.chatsInfo.activeChat = null;\r\n        },\r\n        resetChats(state) {\r\n            state.chats = [];\r\n        },\r\n        resetRatings(state) {\r\n            state.ratings = {};\r\n        },\r\n        setUserRating(state, data) {\r\n            if (!data.rating) {\r\n                delete state.ratings[data.to];\r\n            } else {\r\n                state.ratings[data.to] = data.rating;\r\n            }\r\n        },\r\n        setUserRatingInfo(state, data) {\r\n            let userIndex = state.users.findIndex(user => {\r\n                return user.uid == data.uid;\r\n            });\r\n            state.users[userIndex].avgRating = data.avgRating;\r\n            state.users[userIndex].numRatings = data.numRatings;\r\n        },\r\n        setNewUserRatingInfo(state, data) {\r\n            let userIndex = state.users.findIndex(user => {\r\n                return user.uid == data.to;\r\n            });\r\n\r\n            if (!data.rating) {\r\n                // Delete existent rating to user\r\n                let newNumRatings = state.users[userIndex].numRatings - 1;\r\n                let oldRatingTotal = state.users[userIndex].avgRating * state.users[userIndex].numRatings;\r\n                let newAvgRating;\r\n                if (newNumRatings > 0) {\r\n                    newAvgRating = (oldRatingTotal - state.ratings[data.to]) / newNumRatings;\r\n                } else {\r\n                    newAvgRating = 0;\r\n                }\r\n\r\n                state.users[userIndex].avgRating = newAvgRating;\r\n                state.users[userIndex].numRatings = newNumRatings;\r\n            } else if (!state.ratings[data.to]) {\r\n                // If first rating to user\r\n                let newNumRatings = state.users[userIndex].numRatings + 1;\r\n                let oldRatingTotal = state.users[userIndex].avgRating * state.users[userIndex].numRatings;\r\n                let newAvgRating = (oldRatingTotal + data.rating) / newNumRatings;\r\n\r\n                state.users[userIndex].avgRating = newAvgRating;\r\n                state.users[userIndex].numRatings = newNumRatings;\r\n            } else {\r\n                // If first rating to user\r\n                let newNumRatings = state.users[userIndex].numRatings;\r\n                let oldRatingTotal = state.users[userIndex].avgRating * state.users[userIndex].numRatings;\r\n                let newAvgRating = (oldRatingTotal - state.ratings[data.to] + data.rating) / newNumRatings;\r\n\r\n                state.users[userIndex].avgRating = newAvgRating;\r\n                state.users[userIndex].numRatings = newNumRatings;\r\n            }\r\n        },\r\n        setUserRatings(state, data) {\r\n            state.ratings = data;\r\n        },\r\n        setUserInfoEmail(state, email) {\r\n            state.userInfo.email = email;\r\n        },\r\n\r\n        setUserInfoChatIDs(state, chatIDs) {\r\n            state.userInfo.chatIDs = chatIDs;\r\n        },\r\n        setUserInfoChatIDsListener(state, chatIDsListener) {\r\n            state.userInfo.chatIDsListener = chatIDsListener;\r\n        },\r\n        addChatToChats(state, newChat) {\r\n            if (state.chats.findIndex(chat => {\r\n                return chat.id == newChat.id;\r\n            }) == -1) {\r\n                state.chats.push(newChat);\r\n            }\r\n        },\r\n        addUserToChatUsers(state, user) {\r\n            if (!state.userInfo.chatUsers.find(function (user2) {\r\n                return user2.chatID == user.chatID;\r\n            })) {\r\n                state.userInfo.chatUsers.push(user);\r\n            }\r\n        },\r\n        addChatIDToChatIDs(state, chatID) {\r\n            state.userInfo.chatIDs.push(chatID);\r\n        },\r\n        addMessageToChat(state, data) {\r\n            state.chats[data.chatIndex].messages.push(data.message);\r\n        },\r\n        setUserInfoUID(state, uid) {\r\n            state.userInfo.uid = uid;\r\n        },\r\n        addUserToSearchInfoUserIDs(state, user) {\r\n            state.searchInfo.userIDs.push(user);\r\n        },\r\n        addRankingInfoUserID(state, userToAddUID) {\r\n            let userIndex = state.rankingInfo.userIDs.findIndex(function (user) {\r\n                return userToAddUID == user.uid;\r\n            });\r\n\r\n            if (userIndex != 1) {\r\n                state.rankingInfo.userIDs.push(userToAddUID);\r\n            }\r\n        },\r\n        addSearchInfoUserID(state, userToAddUID) {\r\n            let userIndex = state.searchInfo.userIDs.findIndex(function (user) {\r\n                return userToAddUID == user.uid;\r\n            });\r\n\r\n            if (userIndex != 1) {\r\n                state.searchInfo.userIDs.push(userToAddUID);\r\n            }\r\n        },\r\n        setSearchInfoUserIDs(state, userIDs) {\r\n            state.searchInfo.userIDs = userIDs;\r\n        },\r\n        addEventsInfoEvent(state, event) {\r\n            state.eventsInfo.events.push(event);\r\n        },\r\n        addUser(state, userToAdd) {\r\n            let userIndex = state.users.findIndex(function (user) {\r\n                return userToAdd.uid == user.uid;\r\n            });\r\n\r\n            if (userIndex != 1) {\r\n                state.users.push(userToAdd);\r\n            } else {\r\n                Vue.set(state.users, userIndex, userToAdd)\r\n            }\r\n        },\r\n        setSearchInfoFilteringSearchByUsername(state, searchByUsername) {\r\n            state.searchInfo.filtering.searchByUsername = searchByUsername;\r\n        },\r\n        resetSearchInfo(state) {\r\n            state.searchInfo = {\r\n                lastVisible: null,\r\n                userIDs: [],\r\n                filtering: {\r\n                    genderW: true,\r\n                    genderM: true,\r\n                    ageRange: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n                    maxDistance: 3,\r\n                    maxDistanceRanges: [1000, 5000, 10000, null],\r\n                    maxDistanceRangesText: [Constants.TEXT_1_KM, Constants.TEXT_5_KM, Constants.TEXT_10_KM, '∞'],\r\n                    searchByUsername: false,\r\n                    filterByLanguageToLearn: true,\r\n                    knownLanguage:\r\n                        {\r\n                            id: \"all\",\r\n                            text: \"Cualquier idioma\"\r\n                        },\r\n                    languageToLearn:\r\n                        {\r\n                            id: \"all\",\r\n                            text: \"Cualquier idioma\"\r\n                        },\r\n                    nearbyUsersIDs: [],\r\n                }\r\n            };\r\n        },\r\n        resetSearchInfoFiltering(state) {\r\n            state.searchInfo.filtering = {\r\n                genderW: true,\r\n                genderM: true,\r\n                ageRange: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n                maxDistance: 3,\r\n                maxDistanceRanges: [1000, 5000, 10000, null],\r\n                maxDistanceRangesText: [Constants.TEXT_1_KM, Constants.TEXT_5_KM, Constants.TEXT_10_KM, '∞'],\r\n                searchByUsername: false,\r\n                filterByLanguageToLearn: true,\r\n                knownLanguage:\r\n                    {\r\n                        id: \"all\",\r\n                        text: \"Cualquier idioma\"\r\n                    },\r\n                languageToLearn:\r\n                    {\r\n                        id: \"all\",\r\n                        text: \"Cualquier idioma\"\r\n                    },\r\n                nearbyUsersIDs: [],\r\n            };\r\n        },\r\n        setSearchInfoLastVisible(state, lastVisible) {\r\n            state.searchInfo.lastVisible = lastVisible;\r\n        },\r\n        setRankingInfoLastVisible(state, lastVisible) {\r\n            state.rankingInfo.lastVisible = lastVisible;\r\n        },\r\n        setEventsInfoLastVisible(state, lastVisible) {\r\n            state.eventsInfo.lastVisible = lastVisible;\r\n        },\r\n        setSearchInfoFilter(state, filter) {\r\n            state.searchInfo.filter = filter;\r\n        },\r\n        setUserInfoUsername(state, username) {\r\n            state.userInfo.username = username;\r\n        },\r\n        setUserInfoName(state, name) {\r\n            state.userInfo.name = name;\r\n        },\r\n        setUserInfoLastName(state, lastName) {\r\n            state.userInfo.lastName = lastName;\r\n        },\r\n        setUserInfoBirthDate(state, birthDate) {\r\n            state.userInfo.birthDate = birthDate;\r\n        },\r\n        setUserInfoGender(state, gender) {\r\n            state.userInfo.gender = gender;\r\n        },\r\n        setUserInfoAvgRating(state, avgRating) {\r\n            state.userInfo.avgRating = avgRating;\r\n        },\r\n        setUserInfoNumRatings(state, numRatings) {\r\n            state.userInfo.numRatings = numRatings;\r\n        },\r\n        setSearchedUserAvgRating(state, data) {\r\n            let userIndex = state.searchInfo.userIDs.findIndex(user => {\r\n                return user.uid == data.uid;\r\n            });\r\n\r\n            state.searchInfo.userIDs[userIndex].avgRating = data.avgRating;\r\n        },\r\n        setSearchedUserNumRatings(state, data) {\r\n            let userIndex = state.searchInfo.userIDs.findIndex(user => {\r\n                return user.uid == data.uid;\r\n            });\r\n\r\n            state.searchInfo.userIDs[userIndex].numRatings = data.numRatings;\r\n        },\r\n        setUserInfoDescription(state, description) {\r\n            state.userInfo.description = description;\r\n        },\r\n        setUserInfoProfileImage(state, profileImage) {\r\n            state.userInfo.profileImage = profileImage;\r\n        },\r\n        setUserInfoKnownLanguages(state, knownLanguages) {\r\n            state.userInfo.knownLanguages = knownLanguages;\r\n        },\r\n        setUserInfoLanguagesToLearn(state, languagesToLearn) {\r\n            state.userInfo.languagesToLearn = languagesToLearn;\r\n        },\r\n        setRegistrationState(state, st) {\r\n            state.userInfo.registrationState = st;\r\n        },\r\n        setChatWithUser(state, data) {\r\n            state.chatWithUser = data;\r\n        },\r\n        setChatsInfoActiveChat(state, data) {\r\n            state.chatsInfo.activeChat = data;\r\n        },\r\n        setActiveEventID(state, eventID) {\r\n            state.activeEventID = eventID;\r\n        },\r\n        setMessageToRead(state, data) {\r\n            let chatIndex = state.chats.findIndex(chat => {\r\n                return chat.id == data.chatID;\r\n            });\r\n\r\n            if (chatIndex != -1) {\r\n                let messageIndex = state.chats[chatIndex].messages.findIndex(message => {\r\n                    return message.id = data.messageID;\r\n                });\r\n                state.chats[chatIndex].messages[messageIndex].read = true;\r\n            }\r\n        },\r\n        closeAllChatListenersFirebase(state) {\r\n            state.chats.forEach(chat => {\r\n                chat.databaseListener();\r\n            });\r\n        },\r\n        addNewMessage(state, data) {\r\n            let chatIndex = state.chats.findIndex(chat => {\r\n                return chat.id == data.chatID;\r\n            });\r\n\r\n            let messageIndex = state.chats[chatIndex].messages.findIndex(message => {\r\n                return message.id == data.message.id;\r\n            });\r\n            if (messageIndex == -1) {\r\n                if (data.message.created == null) {\r\n                    state.chats[chatIndex].messages.splice(state.chats[chatIndex].messages.length, 0, data.message);\r\n                } else {\r\n                    let messageIndex2 = state.chats[chatIndex].messages.findIndex(message => {\r\n                        return message.created.toDate().getTime() > data.message.created.toDate().getTime();\r\n                    });\r\n                    if (messageIndex2 == -1) {\r\n                        state.chats[chatIndex].messages.push(data.message);\r\n                    } else {\r\n                        state.chats[chatIndex].messages.splice(messageIndex2, 0, data.message);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                /*state.chats[chatIndex].messages[messageIndex] = data.message;*/\r\n                Vue.set(state.chats[chatIndex].messages, messageIndex, data.message)\r\n            }\r\n\r\n        },\r\n        resetChat(state) {\r\n            state.chats = [];\r\n            state.chatWithUser = null;\r\n\r\n        },\r\n    },\r\n    actions: {\r\n\r\n        isUsernameInUseFirebase(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                // Is username registered?\r\n                firestoreDB.collection(\"UsersPublicInfo\").where(\"username\", \"==\", username).get()\r\n                    .then((querySnapshot) => {\r\n                        if (querySnapshot.size > 0) {\r\n                            if (firebase.auth().currentUser.uid == querySnapshot.docs[0].id) {\r\n                                resolve(false);\r\n                            } else {\r\n                                resolve(true);\r\n                            }\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n        /*setUserUsernameFirebase(context, username) {\r\n          return new Promise(function (resolve, reject) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            firestoreDB.collection(\"UsersPublicInfo\").doc(firebase.auth().currentUser.uid).set(\r\n                {\r\n                  username: username\r\n                }\r\n            )\r\n                .then(() => {\r\n                  console.log(\"Username successfully written in users\");\r\n                  context.commit('setUserInfoUsername', username);\r\n                  resolve();\r\n                })\r\n                .catch(function (error) {\r\n                  console.error(\"Error writing username in users: \", error);\r\n                  reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM)\r\n                });\r\n          });\r\n        },*/\r\n        setUserPersistanceFirebase(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(() => {\r\n                        context.commit('setUserInfoUID', firebase.auth().currentUser.uid);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error)\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n        registerUserFirebase: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                    if (!context.state.userInfo.registrationState) {\r\n                        firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n                            .then(() => {\r\n                                console.log(\"Success registering user in system.\");\r\n                                context.dispatch('setUserPersistanceFirebase')\r\n                                    .then(() => {\r\n                                        context.dispatch('setUserPrivateInfoFirebase', data).then(() => {\r\n                                            resolve();\r\n                                        })\r\n                                            .catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        context.dispatch('logoutUserFirebase').then(() => {\r\n                                            reject(error);\r\n                                        }).catch(() => {\r\n                                            reject(error);\r\n                                        });\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log(error);\r\n                                if (error.code == 'auth/email-already-in-use') {\r\n                                    reject(Constants.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL);\r\n                                } else {\r\n                                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                }\r\n                            });\r\n                    } else {\r\n                        context.dispatch('setUserPersistanceFirebase')\r\n                            .then(() => {\r\n                                context.dispatch('setUserUsernameFirebase', data.username)\r\n                                    .then(() => {\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    })\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    }\r\n                }\r\n            );\r\n        },\r\n        logoutUserFirebase: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                if (firebase.auth() != null) {\r\n                    context.commit('closeAllChatListenersFirebase');\r\n\r\n                    firebase.auth().signOut()\r\n                        .then(() => {\r\n                            console.log(\"User logged out correctly!\");\r\n                            context.commit('resetChat');\r\n                            resolve();\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(err);\r\n                            reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        setUserPrivateInfoFirebase: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UsersPrivateInfo\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        email: data.email,\r\n                        name: data.name,\r\n                        lastName: data.lastName,\r\n                        registrationState: 'registered'\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Private info successfully written\");\r\n                        context.commit('setRegistrationState', 'registered');\r\n                        context.commit('setUserInfoEmail', data.email);\r\n                        context.commit('setUserInfoName', data.name);\r\n                        context.commit('setUserInfoLastName', data.lastName);\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error writing private info: \", error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        setUserPrivateInfoRegistrationStateFirebase: function (context, st) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UsersPrivateInfo\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        registrationState: st\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Registration state successfully written\");\r\n                        context.commit('setRegistrationState', st);\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error writing registration state info: \", error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n\r\n        sendEmailVerificationFirebase: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.sendEmailVerification().then(function () {\r\n                    console.log('verification sent: ');\r\n                    resolve();\r\n                }, function (error) {\r\n                    console.log('verification not sent: ' + error.message);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n        checkEmailVerifiedFirebase: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.reload().then(() => {\r\n                    if (firebase.auth().currentUser.emailVerified) {\r\n                        console.log(\"Email is verified\");\r\n                        context.dispatch('setUserPrivateInfoRegistrationStateFirebase', 'emailVerified')\r\n                            .then(() => {\r\n                                resolve(true);\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error)\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n        setUserProfileInfoFirebase: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UsersPublicInfo\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        username: data.username.toLowerCase(),\r\n                        birthDate: new Date(data.birthDate),\r\n                        gender: data.gender,\r\n                        description: data.description,\r\n                        avgRating: 0,\r\n                        numRatings: 0\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Profile info successfully written in users\");\r\n                        context.dispatch('setUserPrivateInfoRegistrationStateFirebase', 'profileInfoFilled')\r\n                            .then(() => {\r\n                                context.commit('setUserInfoUsername', data.username);\r\n                                context.commit('setUserInfoBirthDate', data.birthDate);\r\n                                context.commit('setUserInfoGender', data.gender);\r\n                                context.commit('setUserInfoDescription', data.description);\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error writing profile info in users: \", error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n        setUserLanguagesFirebase: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let knownLanguagesDB = [];\r\n                let languagesToLearnDB = [];\r\n                console.log(data);\r\n                for (let i = 0; i < data.knownLanguages.length; i++) {\r\n                    knownLanguagesDB.push(data.knownLanguages[i].id);\r\n                }\r\n                for (let i = 0; i < data.languagesToLearn.length; i++) {\r\n                    languagesToLearnDB.push(data.languagesToLearn[i].id);\r\n                }\r\n                firestoreDB.collection(\"UsersPublicInfo\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        knownLanguages: knownLanguagesDB,\r\n                        languagesToLearn: languagesToLearnDB\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Languages info successfully written in users\");\r\n                        context.dispatch('setUserPrivateInfoRegistrationStateFirebase', 'languagesFilled')\r\n                            .then(() => {\r\n                                context.commit('setUserInfoKnownLanguages', knownLanguagesDB);\r\n                                context.commit('setUserInfoLanguagesToLearn', languagesToLearnDB);\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error writing languages info in users: \", error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        }\r\n        ,\r\n        setUserProfileImageDatabase: function (context, imageUpload) {\r\n            return new Promise(function (resolve, reject) {\r\n                Vue.nextTick(() => {\r\n                    let firestoreDB = firebase.firestore();\r\n                    let userID = firebase.auth().currentUser.uid;\r\n                    let storageDB = firebase.storage().ref().child(\"UserProfileImages/\" + userID);\r\n                    storageDB.putString(imageUpload, 'base64')\r\n                        .then(() => {\r\n                            console.log('User profile image uploaded');\r\n                            storageDB.getDownloadURL().then((url) => {\r\n                                firestoreDB.collection(\"UsersPublicInfo\").doc(userID).set(\r\n                                    {\r\n                                        profileImage: url\r\n                                    },\r\n                                    {merge: true}\r\n                                )\r\n                                    .then(() => {\r\n                                        console.log(\"User profile image url successfully written\");\r\n                                        context.dispatch('setUserPrivateInfoRegistrationStateFirebase', 'registered')\r\n                                            .then(() => {\r\n                                                context.commit('setUserInfoProfileImage', url);\r\n                                                resolve();\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                    })\r\n                                    .catch(function (error) {\r\n                                        console.error(\"Error writing user profile image url info in users: \", error);\r\n                                        context.dispatch('deleteUserProfileImageDatabase', userID);\r\n                                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                    });\r\n                            })\r\n                        })\r\n                        .catch(() => {\r\n                            reject(Constants.ERROR_UPLOADING_IMAGE);\r\n                        });\r\n                });\r\n            });\r\n        }\r\n        ,\r\n        deleteUserProfileImageDatabase: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let storageDB = firebase.storage().ref().child(\"UserProfileImages/\" + userID);\r\n                storageDB.delete().then(function () {\r\n                    console.log(\"User profile image removed from database storage\");\r\n                    context.commit('setUserInfoProfileImage', null);\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(Constants.ERROR_SOMETHING_HAPPENED);\r\n                });\r\n\r\n            });\r\n        },\r\n        loginUserFirebase: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n                    .then((success) => {\r\n                        console.log(\"Success logging user in system.\");\r\n                        context.dispatch('setUserPersistanceFirebase')\r\n                            .then(() => {\r\n                                context.dispatch('getUserPrivateInfo').then(() => {\r\n                                    console.log(\"Success UserPrivateInfo retrieved.\");\r\n\r\n                                    context.dispatch('getUserPublicInfo').then(() => {\r\n                                        console.log(\"Success UserPublicInfo retrieved.\");\r\n                                        context.dispatch('getRatingsInRatingsFirebase')\r\n                                            .then(() => {\r\n                                                resolve(success);\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                console.error(error);\r\n                                                reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                            });\r\n\r\n                                    })\r\n                                        .catch((error) => {\r\n                                            reject(error);\r\n                                        });\r\n\r\n                                })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                context.dispatch('logoutUserFirebase').then(() => {\r\n                                    reject(error);\r\n                                }).catch(() => {\r\n                                    reject(error);\r\n                                });\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error);\r\n                        if (error.code == 'auth/wrong-password') {\r\n                            reject(Constants.ERROR_WRONG_EMAIL_PASSWORD_COMBINATION);\r\n                        } else {\r\n                            reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                        }\r\n                    });\r\n            });\r\n        },\r\n        getAppInfoForLoggedUserFirebase: function (context) {\r\n            context.commit('resetUserInfo');\r\n            context.commit('resetChatsInfoActiveChat');\r\n            context.commit('resetChats');\r\n            context.commit('resetRatings');\r\n\r\n            context.commit('setUserInfoUID', firebase.auth().currentUser.uid);\r\n\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('getUserPrivateInfo').then(() => {\r\n                    console.log(\"Success UserPrivateInfo retrieved.\");\r\n\r\n                    context.dispatch('getUserPublicInfo').then(() => {\r\n                        console.log(\"Success UserPublicInfo retrieved.\");\r\n                        context.dispatch('getRatingsInRatingsFirebase')\r\n                            .then(() => {\r\n                                context.dispatch('getUserLocation')\r\n                                    .then(() => {\r\n                                        resolve()\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.error(error);\r\n                                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                    });\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                            });\r\n\r\n                    })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n\r\n                })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            })\r\n\r\n        },\r\n        getUserPrivateInfo: function (context) {\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let userID = firebase.auth().currentUser.uid;\r\n\r\n                firestoreDB.collection(\"UsersPrivateInfo\").doc(userID).get().then(function (doc) {\r\n                    if (doc.exists) {\r\n                        context.commit('setRegistrationState', doc.data().registrationState);\r\n                        context.commit('setUserInfoEmail', doc.data().email);\r\n                        context.commit('setUserInfoName', doc.data().name);\r\n                        context.commit('setUserInfoLastName', doc.data().lastName);\r\n                        resolve();\r\n                    } else {\r\n                        console.warn(\"No such document!\");\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error getting document:\", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n        getUserPublicInfoDocByUIDFirebase: function (context, uid) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"UsersPublicInfo\").doc(uid).get().then(function (userDoc) {\r\n                    resolve(userDoc);\r\n                })\r\n                    .catch(function (error) {\r\n                        console.warn(\"Error getting document:\", error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n\r\n                    });\r\n            });\r\n        },\r\n        getUserPublicInfo: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let userID = firebase.auth().currentUser.uid;\r\n\r\n                context.dispatch('getUserPublicInfoDocByUIDFirebase', userID).then(function (userDoc) {\r\n                    if (userDoc.exists) {\r\n                        context.commit('setUserInfoUsername', userDoc.data().username);\r\n                        context.commit('setUserInfoBirthDate', userDoc.data().birthDate);\r\n                        context.commit('setUserInfoGender', userDoc.data().gender);\r\n                        context.commit('setUserInfoDescription', userDoc.data().description);\r\n                        context.commit('setUserInfoKnownLanguages', userDoc.data().knownLanguages);\r\n                        context.commit('setUserInfoLanguagesToLearn', userDoc.data().languagesToLearn);\r\n                        context.commit('setUserInfoProfileImage', userDoc.data().profileImage);\r\n                        context.commit('setUserInfoAvgRating', userDoc.data().avgRating);\r\n                        context.commit('setUserInfoNumRatings', userDoc.data().numRatings);\r\n\r\n                        context.dispatch('createChatIDsListenerFirebase')\r\n                            .then(() => {\r\n                                let userChats = userDoc.data().chats;\r\n\r\n                                try {\r\n                                    let promises = [];\r\n                                    userChats.forEach(chatID => {\r\n                                        promises.push(context.dispatch('createChatListenerFirebase', chatID));\r\n                                    });\r\n                                    Promise.all(promises).then(function () {\r\n                                        resolve();\r\n                                    })\r\n                                        .catch(function (error) {\r\n                                            reject(error);\r\n                                        });\r\n                                } catch (e) {\r\n                                    console.error(e);\r\n                                    reject(e);\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                            });\r\n                    } else {\r\n                        console.warn(\"No such document!\");\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error getting document:\", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n        createChatIDsListenerFirebase: function (context) {\r\n            let firestoreDB = firebase.firestore();\r\n            return new Promise(function (resolve, reject) {\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"UsersPublicInfo\").doc(firebase.auth().currentUser.uid)\r\n                        .onSnapshot(function (chatIDs) {\r\n                            if (chatIDs) {\r\n                                context.commit('setUserInfoChatIDs', chatIDs.data().chats);\r\n                                context.commit('setUserInfoChatIDsListener', docRef);\r\n                            }\r\n                            resolve();\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                }\r\n            });\r\n        }\r\n        ,\r\n        setChatWithUserMessagesToRead: function (context, chatID) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                let chatIndex = context.state.chats.findIndex(chat => {\r\n                    return chat.id == chatID;\r\n                });\r\n\r\n                let promises = [];\r\n\r\n                context.state.chats[chatIndex].messages.forEach(message => {\r\n                    if (!message.read && message.sender != context.state.userInfo.uid) {\r\n                        promises.push(firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\").doc(message.id).update(\r\n                            {\r\n                                'read': true\r\n                            })\r\n                            .then(() => {\r\n                                console.log(\"Message successfully updated read state \");\r\n                                /*let setMessageToReadData =\r\n                                    {\r\n                                        'chatID': chatID,\r\n                                        'messageID': message.id\r\n                                    };\r\n                                context.commit('setMessageToRead', setMessageToReadData);*/\r\n                            })\r\n                            .catch(function (error) {\r\n                                console.error(\"Error updating message read state: \", error);\r\n                                reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                            }));\r\n                    }\r\n                });\r\n\r\n                Promise.all(promises).then(function () {\r\n                    resolve();\r\n                })\r\n                    .catch(function () {\r\n                        console.error(\"Error updating messages read state: \");\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n        sendChatMessageFirebase: function (context, data) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                let chatIndex = context.state.chats.findIndex(chat => {\r\n                    return chat.id == data.chatID;\r\n                });\r\n\r\n\r\n                let messageIndex = context.state.chats[chatIndex].messages.length;\r\n\r\n\r\n                let newMessage = {\r\n                    'created': firebase.firestore.FieldValue.serverTimestamp(),\r\n                    'text': data.messageText,\r\n                    'read': false,\r\n                    'sender': context.state.userInfo.uid,\r\n                    /*'id': messageIndex.toString() + context.state.userInfo.uid,*/\r\n                };\r\n\r\n                let promises = [];\r\n                if (messageIndex == 0) {\r\n                    let chatID;\r\n                    let myUID = context.state.userInfo.uid;\r\n                    let otherUserUID = context.getters.getOtherUserInChatByChatID(data.chatID);\r\n\r\n                    if (myUID < otherUserUID) {\r\n                        chatID = myUID + otherUserUID;\r\n                    } else {\r\n                        chatID = otherUserUID + myUID;\r\n                    }\r\n\r\n                    promises.push(firestoreDB.collection(\"UsersPublicInfo\").doc(myUID).update(\r\n                        {\r\n                            'chats': firebase.firestore.FieldValue.arrayUnion(chatID),\r\n                        }\r\n                    )\r\n                        .then(() => {\r\n                            context.commit(\"addChatIDToChatIDs\", chatID);\r\n                            console.log(\"chatID successfuly written p1\")\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(\"Error writing chatID\", error);\r\n                            reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                        }));\r\n\r\n                    promises.push(firestoreDB.collection(\"UsersPublicInfo\").doc(otherUserUID).update(\r\n                        {\r\n                            'chats': firebase.firestore.FieldValue.arrayUnion(chatID),\r\n                        }\r\n                    ).then(() => {\r\n                        console.log(\"chatID successfuly written p2\")\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(\"Error writing chatID\", error);\r\n                            reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                        }));\r\n                }\r\n\r\n                Promise.all(promises).then(function () {\r\n\r\n                    firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc().set(newMessage)\r\n                        .then(() => {\r\n                            console.log(\"Message successfully added\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(\"Error adding message\", error);\r\n                            reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                        });\r\n                })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error writing chatID on users chatIDs: \" + error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n\r\n\r\n            });\r\n        }\r\n        ,\r\n\r\n        /*setChatMessageFirebase: function (context, data) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"UsersPrivateInfo\").doc(data.chatID).get().then(function (doc) {\r\n                    if (doc.exists) {\r\n                        context.commit('setRegistrationState', doc.data().registrationState);\r\n                        context.commit('setUserInfoEmail', doc.data().email);\r\n                        context.commit('setUserInfoName', doc.data().name);\r\n                        context.commit('setUserInfoLastName', doc.data().lastName);\r\n                        context.commit('setUserInfoChatIDs', doc.data().chats);\r\n                        resolve();\r\n                    } else {\r\n                        console.warn(\"No such document!\");\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error getting document:\", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },*/\r\n        listUsersSearchedPageFirebase: function (context, data) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                if (data.first) {\r\n                    context.commit('setSearchInfoUserIDs', []);\r\n                    context.commit('setSearchInfoLastVisible', null);\r\n                }\r\n\r\n                let page = firestoreDB.collection(\"UsersPublicInfo\");\r\n\r\n                //GENDER FILTERING\r\n                if (context.state.searchInfo.filtering.genderM && !context.state.searchInfo.filtering.genderW) {\r\n                    page = page.where(Constants.DATABASE_GENDER_FIELD, \"==\", \"M\");\r\n                } else if (context.state.searchInfo.filtering.genderW && !context.state.searchInfo.filtering.genderM) {\r\n                    page = page.where(Constants.DATABASE_GENDER_FIELD, \"==\", \"W\");\r\n                } else if (!context.state.searchInfo.filtering.genderW && !context.state.searchInfo.filtering.genderM) {\r\n                    context.commit('setSearchInfoUserIDs', []);\r\n                    context.commit('setSearchInfoLastVisible', null);\r\n                }\r\n\r\n                //AGE FILTERING\r\n                let currentDate = new Date();\r\n                currentDate.setFullYear(currentDate.getFullYear() - context.state.searchInfo.filtering.ageRange[0]);\r\n                currentDate.setHours(0, 0, 0)\r\n                /*currentDate.setMonth(currentDate.getMonth()-context.state.searchInfo.filtering.ageRange[0]);\r\n                currentDate.setDate(currentDate.getDate()-context.state.searchInfo.filtering.ageRange[0]);\r\n                console.log(currentDate.toISOString().substr(0, 10));*/\r\n                page = page.where(Constants.DATABASE_BIRTHDATE_FIELD, \"<\", currentDate);\r\n                currentDate = new Date();\r\n                currentDate.setFullYear(currentDate.getFullYear() - context.state.searchInfo.filtering.ageRange[1] - 1);\r\n                currentDate.setHours(0, 0, 0)\r\n                page = page.where(Constants.DATABASE_BIRTHDATE_FIELD, \">\", currentDate);\r\n\r\n                //LANGUAGES FILTERING\r\n                if (context.state.searchInfo.filtering.filterByLanguageToLearn && context.state.searchInfo.filtering.languageToLearn.id != \"all\") {\r\n                    page = page.where(Constants.DATABASE_LANGUAGES_TO_LEARN_FIELD, \"array-contains\", context.state.searchInfo.filtering.languageToLearn.id);\r\n                } else if (!context.state.searchInfo.filtering.filterByLanguageToLearn && context.state.searchInfo.filtering.knownLanguage.id != \"all\") {\r\n                    page = page.where(Constants.DATABASE_KNOWN_LANGUAGES_FIELD, \"array-contains\", context.state.searchInfo.filtering.knownLanguage.id);\r\n                }\r\n\r\n                let page2 = page.orderBy(data.orderBy).startAfter(context.state.searchInfo.lastVisible).limit(Constants.SEARCHED_USERS_PAGE_SIZE);\r\n                page2.get().then(function (documentSnapshots) {\r\n                    let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                        return searchedUser.id == context.state.userInfo.uid;\r\n                    });\r\n\r\n\r\n                    let newDocs = documentSnapshots.docs;\r\n                    if (searchedUserIndex != -1) {\r\n                        newDocs.splice(searchedUserIndex, 1);\r\n                        let lastVisible2 = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n                        context.commit('setSearchInfoLastVisible', lastVisible2);\r\n                        let page3 = page.orderBy(data.orderBy).startAfter(context.state.searchInfo.lastVisible).limit(1);\r\n                        page3.get().then(function (documentSnapshots2) {\r\n                            newDocs.push(documentSnapshots2.docs[0]);\r\n\r\n                            context.dispatch('setSearchedUsersState', {\r\n                                newDocs: newDocs,\r\n                                originalDocs: documentSnapshots2.docs\r\n                            }).then(function () {\r\n                                resolve();\r\n                            });\r\n                        })\r\n                            .catch(function (error) {\r\n                                console.warn(\"Error fetching page: \", error);\r\n                                reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                            });\r\n                    } else {\r\n                        context.dispatch('setSearchedUsersState', {\r\n                            newDocs: newDocs,\r\n                            originalDocs: documentSnapshots.docs\r\n                        }).then(function () {\r\n                            resolve();\r\n                        })\r\n\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error fetching page: \", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        setSearchedUsersState(context, data) {\r\n            return new Promise(function (resolve) {\r\n                let usersRetrieved = data.newDocs.map(doc => {\r\n                    const uid = doc.id;\r\n                    const dataDocs = doc.data();\r\n                    return {uid, ...dataDocs};\r\n\r\n                });\r\n\r\n\r\n                usersRetrieved.forEach(function (user) {\r\n                    context.commit('addUser', user);\r\n                    context.commit('addSearchInfoUserID', user.uid);\r\n                });\r\n\r\n\r\n                if (data.originalDocs.length > 0) {\r\n                    let lastVisible2 = data.originalDocs[data.originalDocs.length - 1];\r\n                    context.commit('setSearchInfoLastVisible', lastVisible2);\r\n                } else {\r\n                    context.commit('setSearchInfoUserIDs', []);\r\n                    context.commit('setSearchInfoLastVisible', null);\r\n                }\r\n\r\n                resolve();\r\n            });\r\n        },\r\n        isNextUsersSearchedPageEmptyFirebase(context, data) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                let page = firestoreDB.collection(\"UsersPublicInfo\");\r\n\r\n                //GENDER FILTERING\r\n                if (context.state.searchInfo.filtering.genderM && !context.state.searchInfo.filtering.genderW) {\r\n                    page = page.where(Constants.DATABASE_GENDER_FIELD, \"==\", \"M\");\r\n                } else if (context.state.searchInfo.filtering.genderW && !context.state.searchInfo.filtering.genderM) {\r\n                    page = page.where(Constants.DATABASE_GENDER_FIELD, \"==\", \"W\");\r\n                } else if (!context.state.searchInfo.filtering.genderW && !context.state.searchInfo.filtering.genderM) {\r\n                    context.commit('setSearchInfoUserIDs', []);\r\n                    context.commit('setSearchInfoLastVisible', null);\r\n\r\n                    resolve(true)\r\n                }\r\n\r\n                //AGE FILTERING\r\n                let currentDate = new Date();\r\n                currentDate.setFullYear(currentDate.getFullYear() - context.state.searchInfo.filtering.ageRange[0]);\r\n                currentDate.setHours(0, 0, 0)\r\n                /*currentDate.setMonth(currentDate.getMonth()-context.state.searchInfo.filtering.ageRange[0]);\r\n                currentDate.setDate(currentDate.getDate()-context.state.searchInfo.filtering.ageRange[0]);\r\n                console.log(currentDate.toISOString().substr(0, 10));*/\r\n                page = page.where(Constants.DATABASE_BIRTHDATE_FIELD, \"<\", currentDate);\r\n                currentDate = new Date();\r\n                currentDate.setFullYear(currentDate.getFullYear() - context.state.searchInfo.filtering.ageRange[1] - 1);\r\n                currentDate.setHours(0, 0, 0)\r\n                page = page.where(Constants.DATABASE_BIRTHDATE_FIELD, \">\", currentDate);\r\n\r\n                //LANGUAGES FILTERING\r\n                if (context.state.searchInfo.filtering.filterByLanguageToLearn && context.state.searchInfo.filtering.languageToLearn.id != \"all\") {\r\n                    page = page.where(Constants.DATABASE_LANGUAGES_TO_LEARN_FIELD, \"array-contains\", context.state.searchInfo.filtering.languageToLearn.id);\r\n                } else if (!context.state.searchInfo.filtering.filterByLanguageToLearn && context.state.searchInfo.filtering.knownLanguage.id != \"all\") {\r\n                    page = page.where(Constants.DATABASE_KNOWN_LANGUAGES_FIELD, \"array-contains\", context.state.searchInfo.filtering.knownLanguage.id);\r\n                    console.log(context.state.searchInfo.filtering.knownLanguage.id)\r\n                }\r\n\r\n                page.orderBy(data.orderBy).startAfter(context.state.searchInfo.lastVisible).limit(Constants.SEARCHED_USERS_PAGE_SIZE).get()\r\n                    .then(function (documentSnapshots) {\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == context.state.userInfo.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n\r\n                        }\r\n\r\n                        resolve(newDocs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n\r\n        },\r\n        searchUsersByUsernameFirebase: function (context, data) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetSearchInfo');\r\n                context.commit('setSearchInfoFilteringSearchByUsername', true);\r\n\r\n                let page = firestoreDB.collection(\"UsersPublicInfo\").orderBy(data.orderBy).startAt(data.searchByUsernameField).endAt(data.searchByUsernameField + \"\\uf8ff\");\r\n\r\n                page.get().then(function (documentSnapshots) {\r\n                    let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                        return searchedUser.id == context.state.userInfo.uid;\r\n                    });\r\n\r\n                    if (searchedUserIndex != 1) {\r\n                        documentSnapshots.docs.splice(searchedUserIndex, 1);\r\n                    }\r\n\r\n                    let usersRetrieved = documentSnapshots.docs.map(doc => {\r\n                        const uid = doc.id\r\n                        const dataDocs = doc.data()\r\n                        return {uid, ...dataDocs}\r\n\r\n                    });\r\n\r\n                    let userIDs = [];\r\n                    usersRetrieved.forEach(function (user) {\r\n                        context.commit('addUser', user);\r\n                        userIDs.push(user.uid)\r\n                    });\r\n\r\n                    context.commit('setSearchInfoUserIDs', userIDs);\r\n\r\n\r\n                    if (documentSnapshots.docs.length > 0) {\r\n                        let lastVisible2 = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n                        context.commit('setSearchInfoLastVisible', lastVisible2);\r\n                    }\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error fetching users: \", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        }\r\n        ,\r\n\r\n        prepareChatWithUser: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                // if it does not exist a chat between this users yet\r\n                context.dispatch('createChatFirebase', {\r\n                    chatID: data.chatID,\r\n                    userID: data.userID\r\n                })\r\n                    .then(() => {\r\n                        context.commit('setChatsInfoActiveChat', data.chatID);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n\r\n                //context.commit('setChatWithUser', chat);\r\n            });\r\n            /*let user = context.getters.getSearchInfoUserByUID(data.userID);*/\r\n\r\n\r\n        },\r\n\r\n        createChatFirebase: function (context, data) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                let newChat = {\r\n                    'messages': [],\r\n                    'users': [context.state.userInfo.uid, data.userID]\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(data.chatID).set(newChat)\r\n                    .then(() => {\r\n                        console.log(\"Chats info successfully written in Chats\");\r\n                        context.dispatch('createChatListenerFirebase', data.chatID).then(() => {\r\n                            resolve();\r\n                        })\r\n                            .catch(function (error) {\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error writing profile info in users: \", error);\r\n                        reject(error);\r\n                    });\r\n\r\n\r\n            });\r\n            /*let user = context.getters.getSearchInfoUserByUID(data.userID);*/\r\n\r\n\r\n        },\r\n\r\n        createChatListenerFirebase: function (context, chatID) {\r\n            let firestoreDB = firebase.firestore();\r\n            return new Promise(function (resolve, reject) {\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Chats\").doc(chatID)\r\n                        .onSnapshot(function (chat) {\r\n                            if (chat && chat.data()) {\r\n                                context.commit('addChatToChats', {\r\n                                    'id': chat.id, ...chat.data(),\r\n                                    'databaseListener': docRef,\r\n                                    'messages': []\r\n                                });\r\n\r\n                                try {\r\n                                    firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\")\r\n                                        .onSnapshot(function (chatMessages) {\r\n                                                if (chatMessages && chatMessages.docs) {\r\n                                                    let messages = chatMessages.docs.map(doc => {\r\n                                                        const id = doc.id;\r\n                                                        const dataDocs = doc.data();\r\n                                                        return {id, ...dataDocs};\r\n\r\n                                                    });\r\n                                                    messages.forEach(message => {\r\n                                                            let data = {\r\n                                                                'chatID': chat.id,\r\n                                                                'message': message\r\n                                                            }\r\n                                                            context.commit('addNewMessage', data);\r\n\r\n                                                            if (context.state.chatsInfo.activeChat == data.chatID) {\r\n                                                                context.dispatch('setChatWithUserMessagesToRead', context.state.chatsInfo.activeChat)\r\n                                                                    .catch(function (error) {\r\n                                                                        console.warn(\"Error updating messages to read:\", error);\r\n                                                                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                                                    });\r\n                                                            }\r\n                                                            /*try {\r\n                                                                let messageDocRef = firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\").doc(message.id)\r\n                                                                    .onSnapshot(function (message2) {\r\n                                                                        if (message2 && message2.data()) {\r\n                                                                            let data = {\r\n                                                                                'chatID': chat.id,\r\n                                                                                'message': {\r\n                                                                                    'id': message.id,\r\n                                                                                    ...message2.data(),\r\n                                                                                    'databaseListener': messageDocRef\r\n                                                                                }\r\n                                                                            }\r\n                                                                            console.log(\"CAMBIO EN DOCUMENTO DE MESSAGE\")\r\n                                                                            if(context.state.activeChat && context.state.activeChat.chatID){\r\n                                                                                context.dispatch('setChatWithUserMessagesToRead',context.state.activeChat.chatID)\r\n                                                                                    .catch(function (error) {\r\n                                                                                        console.warn(\"Error updating messages to read:\", error);\r\n                                                                                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                                                                    });\r\n                                                                            }\r\n\r\n                                                                            context.commit('addNewMessage', data);\r\n                                                                        }\r\n                                                                    });\r\n                                                        }\r\n                                                    catch\r\n                                                        (e)\r\n                                                        {\r\n                                                            console.error(e);\r\n                                                            reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                                        }\r\n                                                        let data = {\r\n                                                            'chatID': chat.id,\r\n                                                            'message': message,\r\n                                                        }\r\n                                                        context.commit('addNewMessage', data);*/\r\n                                                        }\r\n                                                    );\r\n                                                }\r\n                                            }\r\n                                        );\r\n                                } catch (e) {\r\n                                    console.error(e);\r\n                                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                }\r\n\r\n                                let otherUserID = chat.data().users.find(function (user) {\r\n                                    return user != firebase.auth().currentUser.uid;\r\n                                });\r\n\r\n                                context.dispatch('getUserPublicInfoDocByUIDFirebase', otherUserID).then(function (userDoc) {\r\n                                    if (userDoc.exists) {\r\n\r\n                                        let user = {\r\n                                            id: otherUserID,\r\n                                            chatID: chatID,\r\n                                            username: userDoc.data().username,\r\n                                            birthDate: userDoc.data().birthDate,\r\n                                            gender: userDoc.data().gender,\r\n                                            description: userDoc.data().description,\r\n                                            knownLanguages: userDoc.data().knownLanguages,\r\n                                            languagesToLearn: userDoc.data().languagesToLearn,\r\n                                            profileImage: userDoc.data().profileImage\r\n\r\n                                        };\r\n\r\n                                        context.commit('addUserToChatUsers', user);\r\n                                    }\r\n                                }).catch(function (error) {\r\n                                    console.warn(\"Error getting document:\", error);\r\n                                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                                });\r\n\r\n                            }\r\n                            resolve();\r\n                        });\r\n                } catch\r\n                    (e) {\r\n                    console.error(e);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                }\r\n            });\r\n\r\n            /*openChatWithUserFirebase: function (context, chatID) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let docRef = firestoreDB.doc(chatID)\r\n                    .onSnapshot(function (chat) {\r\n                        if (chat && chat.data()) {\r\n                            chat.data().messages.forEach(message => {\r\n                                    context.state.chat.chatWithUser.messages.push(message)\r\n                                    console.log(message)\r\n                                }\r\n                            )\r\n                            context.state.chat.chatWithUser.created = chat.data().created;\r\n                            context.state.chat.chatWithUser.users = chat.data().users;\r\n                        }\r\n                    });\r\n                context.state.chat.chatWithUser.databaseRef = docRef;\r\n            },\r\n\r\n            closeChatWithUserFirebase: function (context) {\r\n                context.state.chat.chatWithUser.databaseRef();\r\n            }*/\r\n\r\n        },\r\n        /*\r\n         * Action to set rating data.rating from user data.from to user data.to\r\n         */\r\n        rateUser: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('getRatingInUsersPublicInfo', data.to)\r\n                    .then((ratingInfo) => {\r\n                        context.commit('setUserRatingInfo', ratingInfo);\r\n                        context.dispatch('setRatingInRatingsFirebase', data)\r\n                            .then(() => {\r\n                                context.commit('setNewUserRatingInfo', data);\r\n                                context.commit('setUserRating', data);\r\n                                resolve();\r\n                            })\r\n                            .catch(function (error2) {\r\n                                console.error(error2);\r\n                                reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error)\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                    });\r\n            });\r\n        },\r\n        setRatingInRatingsFirebase: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let newRating = {};\r\n\r\n                newRating[data.to] = data.rating;\r\n                if (data.rating) {\r\n                    firestoreDB.collection(\"Ratings\").doc(data.from).set(newRating, {merge: true})\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully written in Ratings\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(\"Error writing rating info in Ratings: \", error);\r\n                            reject(error);\r\n                        });\r\n                } else {\r\n                    firestoreDB.collection(\"Ratings\").doc(data.from).update({\r\n                        [data.to]: firebase.firestore.FieldValue.delete()\r\n                    })\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully deleted of Ratings\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(\"Error deleting rating info of Ratings: \", error);\r\n                            reject(error);\r\n                        });\r\n                }\r\n\r\n            });\r\n        },\r\n        getRatingsInRatingsFirebase: function (context) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"Ratings\").doc(context.state.userInfo.uid).get().then(function (doc) {\r\n                    if (doc.exists) {\r\n                        context.commit('setUserRatings', doc.data());\r\n                    }\r\n                    resolve();\r\n                })\r\n                    .catch(function (error) {\r\n                        console.warn(\"Error getting document:\", error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n\r\n                    });\r\n            });\r\n        },\r\n\r\n        getRatingInUsersPublicInfo: function (context, uid) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"UsersPublicInfo\").doc(uid).get().then(function (userDoc) {\r\n\r\n                    console.log(userDoc.data())\r\n                    console.log(uid)\r\n                    let returnValue = {\r\n                        'uid': uid,\r\n                        'avgRating': userDoc.data().avgRating,\r\n                        'numRatings': userDoc.data().numRatings\r\n                    };\r\n\r\n                    resolve(returnValue);\r\n                })\r\n                    .catch(function (error) {\r\n                        console.warn(\"Error getting document:\", error);\r\n                        reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n\r\n                    });\r\n            });\r\n        },\r\n        listUsersRankingPageFirebase: function (context, first) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                if (first) {\r\n                    context.commit('resetRankingInfo');\r\n                }\r\n\r\n                let page;\r\n                if (context.state.rankingInfo.lastVisible == null) {\r\n                    page = firestoreDB.collection(\"UsersPublicInfo\").orderBy(Constants.DATABASE_AVG_RATING_FIELD, \"desc\").orderBy(Constants.DATABASE_NUM_RATINGS_FIELD, \"desc\");\r\n                } else {\r\n                    page = firestoreDB.collection(\"UsersPublicInfo\").orderBy(Constants.DATABASE_AVG_RATING_FIELD, \"desc\").orderBy(Constants.DATABASE_NUM_RATINGS_FIELD, \"desc\").startAfter(context.state.rankingInfo.lastVisible);\r\n                }\r\n                page.limit(Constants.RANKING_PAGE_SIZE).get().then(function (documentSnapshots) {\r\n                    console.log(documentSnapshots)\r\n                    let usersRetrieved = documentSnapshots.docs.map(doc => {\r\n                        const uid = doc.id;\r\n                        const dataDocs = doc.data();\r\n                        return {uid, ...dataDocs};\r\n\r\n                    });\r\n\r\n                    usersRetrieved.forEach(function (user) {\r\n                        context.commit('addUser', user);\r\n                        context.commit('addRankingInfoUserID', user.uid);\r\n                    });\r\n\r\n                    if (documentSnapshots.docs.length > 0) {\r\n                        let lastVisible2 = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n                        context.commit('setRankingInfoLastVisible', lastVisible2);\r\n                    }\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error fetching page: \", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n        isNextRankingUsersPageEmptyFirebase(context) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                let page = firestoreDB.collection(\"UsersPublicInfo\").orderBy(Constants.DATABASE_AVG_RATING_FIELD, \"desc\").orderBy(Constants.DATABASE_NUM_RATINGS_FIELD, \"desc\").startAfter(context.state.rankingInfo.lastVisible).limit(Constants.RANKING_PAGE_SIZE);\r\n                page.get().then(function (documentSnapshots) {\r\n                    console.log(documentSnapshots.docs.length)\r\n                    resolve(documentSnapshots.docs.length == 0);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n        /*createEmailVerifiedListenerFirebase: function (context, uid) {\r\n            return new Promise(function (resolve, reject) {\r\n                try {\r\n                    let docRef = firebase.auth.onSnapshot(function (chatIDs) {\r\n                            if (chatIDs) {\r\n                                context.commit('setUserInfoChatIDs', chatIDs.data().chats);\r\n                                context.commit('setUserInfoChatIDsListener', docRef);\r\n                            }\r\n                            resolve();\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                }\r\n            });\r\n        },*/\r\n\r\n        getUserLocation(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('geolocateUser').then(function (location) {\r\n                    context.commit('setUserInfoLocation', location);\r\n                    context.dispatch('updateUserLocationFirebase', location)\r\n                        .then(() => {\r\n                            resolve();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                        });\r\n                }).catch(() => {\r\n                    context.dispatch('getUserLocationFirebase', context.state.userInfo.uid)\r\n                        .then((lastLocation) => {\r\n                            context.commit('setUserInfoLocation', lastLocation);\r\n                            reject(Constants.TEXT_PROBLEM_GETTING_CURRENT_LOCATION)\r\n                        })\r\n                        .catch(() => {\r\n                            context.commit('setUserInfoLocation', null);\r\n                            reject(Constants.TEXT_PROBLEM_GETTING_CURRENT_LOCATION)\r\n                        });\r\n\r\n                });\r\n            });\r\n        },\r\n        getUserLocationFirebase(context, uid) {\r\n            let geofirestore = new GeoFirestore(firebase.firestore());\r\n            return new Promise(function (resolve, reject) {\r\n                geofirestore.collection('UsersLocation').doc(uid).get()\r\n                    .then((snapshot) => {\r\n                        let lastLocationData = snapshot.data();\r\n                        console.log(JSON.stringify(lastLocationData))\r\n                        if (!lastLocationData) {\r\n                            reject();\r\n                        } else {\r\n                            resolve({\r\n                                lat: lastLocationData.coordinates._lat,\r\n                                lng: lastLocationData.coordinates._long\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error);\r\n                        reject();\r\n                    });\r\n            });\r\n        },\r\n\r\n        updateUserLocationFirebase(context, location) {\r\n            let geofirestore = new GeoFirestore(firebase.firestore());\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                geofirestore.collection('UsersLocation').doc(context.state.userInfo.uid).set({\r\n                    coordinates: new firebase.firestore.GeoPoint(location.lat, location.lng)\r\n                }).then(function () {\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject();\r\n                });\r\n            });\r\n        },\r\n        geolocateUser() {\r\n            return new Promise(function (resolve, reject) {\r\n                try {\r\n                    navigator.geolocation.getCurrentPosition(position => {\r\n                            resolve({\r\n                                lat: position.coords.latitude,\r\n                                lng: position.coords.longitude\r\n                            })\r\n                        },\r\n                        function (error) {\r\n                            console.log(error);\r\n                            reject();\r\n                        });\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    reject();\r\n                }\r\n\r\n            });\r\n        },\r\n        getNearbyUsersFirebase(context, meters) {\r\n            let geofirestore = new GeoFirestore(firebase.firestore());\r\n            let queryNearbyUsers = geofirestore.collection('UsersLocation').near({\r\n                center: new firebase.firestore.GeoPoint(context.state.userInfo.location.lat, context.state.userInfo.location.lng),\r\n                radius: meters\r\n            });\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    resolve(snapshot.docs);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        listNearbyUsersSearchedPageFirebase(context, data) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            let pageUsers = 0;\r\n            let nearbyUsersIndex = 0;\r\n\r\n            let promises = [];\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                if (data.first) {\r\n                    context.commit('setSearchInfoUserIDs', []);\r\n                    context.commit('setSearchInfoLastVisible', null);\r\n\r\n                    context.dispatch('getNearbyUsersFirebase', context.state.searchInfo.filtering.maxDistanceRanges[context.state.searchInfo.filtering.maxDistance])\r\n                        .then((nearbyUsersDocs) => {\r\n                            let nearbyUsersIDs = [];\r\n                            nearbyUsersDocs.forEach(function (doc) {\r\n                                if (doc.id != context.state.userInfo.uid) {\r\n                                    nearbyUsersIDs.push(doc.id)\r\n                                }\r\n\r\n                            });\r\n                            context.commit('setSearchInfoUserIDs', nearbyUsersIDs);\r\n\r\n                            while (pageUsers < Constants.SEARCHED_USERS_PAGE_SIZE && nearbyUsersIndex < context.state.searchInfo.filtering.nearbyUsersIDs.length) {\r\n                                console.log(context.state.searchInfo.filtering.nearbyUsersIDs[nearbyUsersIndex]);\r\n\r\n                                promises.push(firestoreDB.collection(\"UsersPublicInfo\").doc(context.state.searchInfo.filtering.nearbyUsersIDs[nearbyUsersIndex]).get().then(function (doc) {\r\n                                    console.log(doc)\r\n                                    context.commit('addUserToSearchInfoUserIDs', doc.id);\r\n                                }).catch((error) => {\r\n                                    console.log(error);\r\n                                    context.commit('setSearchInfoLastVisible', nearbyUsersIndex - 1);\r\n                                    reject(Constants.TEXT_PROBLEM_GETTING_NEARBY_USERS);\r\n                                }));\r\n\r\n                                pageUsers++;\r\n                                nearbyUsersIndex++;\r\n                            }\r\n                            Promise.all(promises).then(function () {\r\n                                context.commit('setSearchInfoLastVisible', nearbyUsersIndex - 1);\r\n                                resolve();\r\n                            })\r\n                                .catch(function (error) {\r\n                                    context.commit('setSearchInfoLastVisible', nearbyUsersIndex - 1);\r\n                                    reject(error);\r\n                                });\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(error);\r\n                            reject(Constants.TEXT_PROBLEM_GETTING_NEARBY_USERS);\r\n                        });\r\n                } else {\r\n                    nearbyUsersIndex = context.state.searchInfo.lastVisible + 1;\r\n\r\n                    while (pageUsers < Constants.SEARCHED_USERS_PAGE_SIZE && nearbyUsersIndex < context.state.searchInfo.filtering.nearbyUsersIDs.length) {\r\n                        console.log(context.state.searchInfo.filtering.nearbyUsersIDs[nearbyUsersIndex]);\r\n\r\n                        promises.push(firestoreDB.collection(\"UsersPublicInfo\").doc(context.state.searchInfo.filtering.nearbyUsersIDs[nearbyUsersIndex]).get().then(function (doc) {\r\n                            console.log(doc)\r\n                            context.commit('addUserToSearchInfoUserIDs', doc.id);\r\n                        }).catch((error) => {\r\n                            console.log(error);\r\n                            context.commit('setSearchInfoLastVisible', nearbyUsersIndex - 1);\r\n                            reject(Constants.TEXT_PROBLEM_GETTING_NEARBY_USERS);\r\n                        }));\r\n\r\n                        pageUsers++;\r\n                        nearbyUsersIndex++;\r\n                    }\r\n                    Promise.all(promises).then(function () {\r\n                        context.commit('setSearchInfoLastVisible', nearbyUsersIndex - 1);\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            context.commit('setSearchInfoLastVisible', nearbyUsersIndex - 1);\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n        isNextNearbyUsersSearchedPageEmptyFirebase(context) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                console.log(\"--\" + context.state.searchInfo.lastVisible)\r\n                console.log(\"--\" + context.state.searchInfo.filtering.nearbyUsersIDs.length)\r\n\r\n                if (context.state.searchInfo.lastVisible >= context.state.searchInfo.filtering.nearbyUsersIDs.length - 1) {\r\n                    resolve(true);\r\n                }\r\n\r\n                let nearbyUsersIndex = context.state.searchInfo.lastVisible + 1;\r\n\r\n                while (nearbyUsersIndex < context.state.searchInfo.filtering.nearbyUsersIDs.length - 1) {\r\n\r\n                    firestoreDB.collection(\"UsersPublicInfo\").doc(context.state.searchInfo.filtering.nearbyUsersIDs[nearbyUsersIndex]).get().then(function (doc) {\r\n                        context.commit('addUserToSearchInfoUserIDs', {uid: doc.id, ...doc.data()});\r\n                        console.log(\"!!\" + context.state.searchInfo.lastVisible)\r\n                        resolve(false);\r\n\r\n                    }).catch((error) => {\r\n                        console.log(error);\r\n                        context.commit('setSearchInfoLastVisible', nearbyUsersIndex - 1);\r\n                        reject(true);\r\n                    });\r\n\r\n                    nearbyUsersIndex++;\r\n                }\r\n            });\r\n        },\r\n        listEventsEventsPageFirebase: function (context, first) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                if (first) {\r\n                    context.commit('resetEventsInfo');\r\n                }\r\n\r\n                let page;\r\n                let currentDate = new Date();\r\n                if (context.state.eventsInfo.lastVisible == null) {\r\n                    page = firestoreDB.collection(Constants.DATABASE_COLLECTION_EVENTS).where(Constants.DATABASE_DATE_FIELD, \">\", currentDate).orderBy(Constants.DATABASE_DATE_FIELD);\r\n                } else {\r\n                    page = firestoreDB.collection(Constants.DATABASE_COLLECTION_EVENTS).where(Constants.DATABASE_DATE_FIELD, \">\", currentDate).orderBy(Constants.DATABASE_DATE_FIELD).startAfter(context.state.eventsInfo.lastVisible);\r\n                }\r\n                page.limit(Constants.EVENTS_PAGE_SIZE).get().then(function (documentSnapshots) {\r\n\r\n                    let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                        const id = doc.id;\r\n                        const dataDocs = doc.data();\r\n                        return {id, ...dataDocs};\r\n\r\n                    });\r\n\r\n                    eventsRetrieved.forEach(function (event) {\r\n                        console.log(event)\r\n                        let eventCoordinates = {\r\n                            lat: event.coordinates.latitude,\r\n                            lng: event.coordinates.longitude\r\n                        };\r\n                        console.log(eventCoordinates)\r\n                        console.log(context.state.userInfo.location)\r\n                        if (context.state.userInfo.location != null) {\r\n                            let distanceInKm = context.getters.getHaversineDistance({\r\n                                p1: eventCoordinates,\r\n                                p2: context.state.userInfo.location\r\n                            }) / 1000;\r\n                            event = {\r\n                                ...event,\r\n                                distance: parseFloat(distanceInKm).toFixed(1)\r\n                            }\r\n                        } else {\r\n                            event = {\r\n                                ...event,\r\n                                distance: null\r\n                            }\r\n                        }\r\n\r\n                        context.commit('addEventsInfoEvent', event);\r\n                    });\r\n\r\n                    if (documentSnapshots.docs.length > 0) {\r\n                        let lastVisible2 = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n                        context.commit('setEventsInfoLastVisible', lastVisible2);\r\n                    }\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error fetching page: \", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n        isNextEventsEventsPageEmptyFirebase(context) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                let currentDate = new Date();\r\n                let page = firestoreDB.collection(Constants.DATABASE_COLLECTION_EVENTS).where(Constants.DATABASE_DATE_FIELD, \">\", currentDate).orderBy(Constants.DATABASE_DATE_FIELD).startAfter(context.state.eventsInfo.lastVisible).limit(Constants.EVENTS_PAGE_SIZE);\r\n                page.get().then(function (documentSnapshots) {\r\n                    resolve(documentSnapshots.docs.length == 0);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n        setSearchInfoFiltering(context, newFiltering) {\r\n            return context.commit('setEventsInfoLastVisible', newFiltering);\r\n        },\r\n        getUserByUID(context, uid) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = context.getters.getUserByUID(uid);\r\n                console.log(user)\r\n                if (null != user) {\r\n                    resolve(user);\r\n                } else {\r\n                    context.dispatch('getUserPublicInfoDocByUIDFirebase', uid)\r\n                        .then(function (doc) {\r\n                            if (doc.data()) {\r\n                                user = {\r\n                                    uid: uid,\r\n                                    ...doc.data()\r\n                                };\r\n                                context.commit('addUser', user);\r\n                                resolve(user);\r\n                            } else {\r\n                                reject();\r\n                            }\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.log(error);\r\n                            reject();\r\n                        })\r\n                }\r\n\r\n            });\r\n        },\r\n        getEventFirebase: function (context, eventID) {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(Constants.DATABASE_COLLECTION_EVENTS).doc(eventID).get().then(function (documentSnapshot) {\r\n                    let eventCoordinates = {\r\n                        lat: documentSnapshot.data().coordinates.latitude,\r\n                        lng: documentSnapshot.data().coordinates.longitude\r\n                    };\r\n\r\n                    let distanceInKm = context.getters.getHaversineDistance({\r\n                        p1: eventCoordinates,\r\n                        p2: context.state.userInfo.location\r\n                    }) / 1000;\r\n                    let event = {\r\n                        id: documentSnapshot.id,\r\n                        ...documentSnapshot.data(),\r\n                        distance: parseFloat(distanceInKm).toFixed(1)\r\n                    };\r\n\r\n                    resolve(event);\r\n                }).catch(function (error) {\r\n                    console.warn(\"Error fetching event: \", error);\r\n                    reject(Constants.ERROR_GENERIC_CONNECTION_PROBLEM);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLoggedUser ~                                                           >\r\n        // To get user logged                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getLoggedUser: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((user) => {\r\n                        resolve(user);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset all modules state info                                             >\r\n        //----------------------------------------------------------------------------->\r\n        resetAppState: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                if(context.getters.getAppInfoLoaded) {\r\n                    let promises = [];\r\n\r\n                    promises.push(context.dispatch('user/resetState'));\r\n                    promises.push(context.dispatch('users/resetState'));\r\n                    promises.push(context.dispatch('chats/resetState'));\r\n                    promises.push(context.dispatch('events/resetState'));\r\n                    promises.push(context.dispatch('ranking/resetState'));\r\n                    promises.push(context.dispatch('permissions/resetState'));\r\n\r\n                    Promise.all(promises).then(() => {\r\n                        console.log('state successfully reseted.');\r\n                        context.commit('setAppInfoLoaded', false);\r\n                        resolve();\r\n                    })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            console.log('Error resetting state.');\r\n                            reject(Constants.ERROR_GENERIC_PROBLEM);\r\n                        });\r\n                }\r\n                else{\r\n                    resolve();\r\n                }\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initAppInfo ~                                                             >\r\n        // To init the necessary info to init the app for a logged user                >\r\n        //----------------------------------------------------------------------------->\r\n        initAppInfo: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('user/isUserLogged')\r\n                    .then((isUserLogged) => {\r\n                        if (isUserLogged && !context.getters.getAppInfoLoaded) {\r\n                            context.dispatch('user/initState')\r\n                                .then(() => {\r\n                                    console.log('user module state successfully initiated.');\r\n                                    context.dispatch('chats/initState')\r\n                                        .then(() => {\r\n                                            console.log('chats module state successfully initiated.');\r\n                                            context.dispatch('ranking/initState')\r\n                                                .then(() => {\r\n                                                    console.log('ranking module state successfully initiated.');\r\n                                                    context.dispatch('events/initState')\r\n                                                        .then(() => {\r\n                                                            console.log('events module state successfully initiated.');\r\n                                                            context.commit('setAppInfoLoaded', true);\r\n                                                            resolve();\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                })\r\n                                                .catch((error) => {\r\n                                                    reject(error);\r\n                                                });\r\n                                        })\r\n                                        .catch((error) => {\r\n                                            reject(error);\r\n                                        });\r\n\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error initiating users module state.');\r\n                        reject(error);\r\n                    });\r\n            })\r\n\r\n        },\r\n\r\n\r\n    },\r\n});\r\n","import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport firebase from \"firebase\";\r\nimport Home from './views/Home.vue'\r\nimport store from './store/store.js'\r\n\r\nVue.use(Router)\r\n\r\nconst router = new Router({\r\n    /*mode: 'history',*/\r\n    base: process.env.BASE_URL,\r\n    routes: [\r\n        {\r\n            //To redirect all routes that do not exist to /home\r\n            path: '*',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            //To redirect root route to /home\r\n            path: '/',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            path: '/home',\r\n            name: 'home',\r\n            component: Home\r\n        },\r\n        {\r\n            path: '/login',\r\n            name: 'login',\r\n            component: () => import('./views/Accounts/Login.vue'),\r\n        },\r\n        {\r\n            path: '/sign-up',\r\n            name: 'signUp',\r\n            component: () => import('./views/Accounts/SignUp.vue'),\r\n        },\r\n        {\r\n            path: '/email-verification',\r\n            name: 'emailVerification',\r\n            component: () => import('./views/Accounts/EmailVerification.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-profile-info',\r\n            name: 'fillYourProfileInfo',\r\n            component: () => import('./views/Accounts/FillYourProfileInfo.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-languages',\r\n            name: 'fillYourLanguages',\r\n            component: () => import('./views/Accounts/FillYourLanguages.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/set-your-profile-image',\r\n            name: 'setYourProfileImage',\r\n            component: () => import('./views/Accounts/SetYourProfileImage.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/send-change-password-email',\r\n            name: 'sendChangePasswordEmail',\r\n            component: () => import('./views/Accounts/SendChangePasswordEmail.vue'),\r\n            meta: {\r\n                requiresAuth: false\r\n            }\r\n        },\r\n        {\r\n            path: '/dashboard',\r\n            name: 'dashboard',\r\n            redirect: {name: 'profileHome'},\r\n            meta: {requiresAuth: true},\r\n            component: () => import('./views/Dashboard.vue'),\r\n            children: [\r\n                {\r\n                    path: 'ranking',\r\n                    name: 'rankingHome',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/Ranking/RankingHome.vue'),\r\n                },\r\n                {\r\n                    path: 'ranking/user/:id/',\r\n                    name: 'userProfileRanking',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'events',\r\n                    name: 'eventsHome',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventsHome.vue'),\r\n                },\r\n                {\r\n                    path: 'event/:id/',\r\n                    name: 'eventDescription',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventDescription.vue'),\r\n                },\r\n                {\r\n                    path: 'search',\r\n                    name: 'searchHome',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchHome.vue'),\r\n                },\r\n                {\r\n                    path: 'search/filter',\r\n                    name: 'searchFilter',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchFilter.vue'),\r\n                },\r\n                {\r\n                    path: 'search/user/:id/',\r\n                    name: 'userProfileSearch',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'chats',\r\n                    name: 'chatHome',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatHome.vue'),\r\n                },\r\n                {\r\n                    path: 'chats/chat/:id/',\r\n                    name: 'chatWithUser',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatWithUser.vue'),\r\n                },\r\n                {\r\n                    path: 'chats/user/:id/',\r\n                    name: 'userProfileChat',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'profile',\r\n                    name: 'profileHome',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileHome.vue'),\r\n                },\r\n                {\r\n                    path: 'profile/:id/edit',\r\n                    name: 'profileEdit',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileEdit.vue')\r\n                },\r\n                {\r\n                    path: 'settings',\r\n                    name: 'settings',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsHome.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account',\r\n                    name: 'settingsAccount',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccount.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/name-and-last-name',\r\n                    name: 'settingsAccountEditNameAndLastName',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditNameAndLastName.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/email',\r\n                    name: 'settingsAccountEditEmail',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditEmail.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/password-verification',\r\n                    name: 'settingsAccountPasswordVerification',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountPasswordVerification.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/password',\r\n                    name: 'settingsAccountEditPassword',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditPassword.vue')\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n});\r\n\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n    const currentUser = firebase.auth().currentUser;\r\n    const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\r\n    if (requiresAuth && !currentUser) {\r\n        next('home');\r\n    } else if ((requiresAuth && currentUser && (to.name !== from.name) && (!to.path.startsWith('/dashboard') || !from.path.startsWith('/dashboard'))) || (!requiresAuth && currentUser)) {\r\n        store.dispatch('user/getRegistrationState').then(registrationState => {\r\n            if (to.path.startsWith('/' + registrationState)) {\r\n                next()\r\n            } else if (from.path.startsWith('/' + registrationState)) {\r\n                next({name: from.name});\r\n            } else {\r\n                next({path: '/' + registrationState});\r\n            }\r\n        });\r\n        //next()\r\n    }\r\n    else {\r\n        next();\r\n    }\r\n    /*else if(to.matched.some(record =>['login','signUp','home','sendChangePasswordEmail'].includes(record.name))){\r\n      if (currentUser) {\r\n        next({\r\n          path: '/dashboard'\r\n        })\r\n      }\r\n      else{\r\n        next();\r\n      }*/\r\n});\r\n\r\nexport default router;\r\n","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}firebase-messaging-sw.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","import Vue from 'vue';\nimport Vuetify from 'vuetify/lib';\n\n\nVue.use(Vuetify);\n\nexport default new Vuetify({\n  icons: {\n    iconfont: 'mdi',\n  },\n  theme: {\n    light: {\n      primary: '#1976D2',\n      secondary: '#424242',\n      accent: '#82B1FF',\n      error: '#FF5252',\n      info: '#2196F3',\n      success: '#4CAF50',\n      warning: '#FFC107',\n    }\n  }\n});\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store/store'\r\nimport './registerServiceWorker'\r\nimport vuetify from './plugins/vuetify';\r\nimport firebase from \"firebase\";\r\nimport VueChatScroll from 'vue-chat-scroll'\r\nVue.use(VueChatScroll)\r\nimport * as VueGoogleMaps from \"vue2-google-maps\";\r\n\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: \"AIzaSyBYhPYAZkG6ML2kRArdK8xITPrZWzF0JSw\",\r\n    libraries: \"places\" // necessary for places input\r\n  }\r\n});\r\n\r\n\r\nVue.config.productionTip = false\r\n\r\nlet app = '';\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyABGil2afckXxQ127FS8fW6y5phy1wzd6g\",\r\n  authDomain: \"tfg-vue-m3m.firebaseapp.com\",\r\n  databaseURL: \"https://tfg-vue-m3m.firebaseio.com\",\r\n  projectId: \"tfg-vue-m3m\",\r\n  storageBucket: \"tfg-vue-m3m.appspot.com\",\r\n  messagingSenderId: \"144506012173\",\r\n  appId: \"1:144506012173:web:8a58aa4b50d8b336184b44\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// Initialize Cloud Firestore through Firebase\r\nlet db = firebase.firestore();\r\n\r\n// Disable deprecated features\r\ndb.settings({\r\n  timestampsInSnapshots: true\r\n});\r\n\r\ndb.enablePersistence({experimentalTabSynchronization:true})\r\n\r\nconst storage = firebase.storage()\r\n\r\nconst messaging = firebase.messaging()\r\n\r\nexport default {\r\n  db,\r\n  storage,\r\n  messaging\r\n}\r\n\r\nfirebase.auth().onAuthStateChanged(() => {\r\n  if (!app) {\r\n    app = new Vue({\r\n      router,\r\n      store,\r\n      vuetify,\r\n      render: h => h(App)\r\n    }).$mount('#app');\r\n  }\r\n})","module.exports = __webpack_public_path__ + \"img/logo.82b9c7a5.png\";","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=58559630&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=58559630&scoped=true&lang=css&\""],"sourceRoot":""}