{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?9745","webpack:///./src/views/Home.vue?cbb6","webpack:///./src/store/Constants.js","webpack:///./src/store/AuxMethods.js","webpack:///./src/App.vue?7ab5","webpack:///src/App.vue","webpack:///./src/App.vue?0bd2","webpack:///./src/App.vue","webpack:///./src/views/Home.vue?ecea","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?f351","webpack:///./src/views/Home.vue","webpack:///./src/store/modules/database.js","webpack:///./src/store/modules/permissions.js","webpack:///./src/store/modules/users.js","webpack:///./src/store/modules/user.js","webpack:///./src/store/modules/events.js","webpack:///./src/store/modules/chats.js","webpack:///./src/store/modules/ranking.js","webpack:///./src/store/store.js","webpack:///./src/router.js","webpack:///./src/registerServiceWorker.js","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js","webpack:///./src/assets/WhiteLogoWeBabble.png","webpack:///./src/I18NMessages.js","webpack:///./src/i18n.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","RULE_MIN_VALUE_CHARACTERS_USERNAME","RULE_MAX_VALUE_CHARACTERS_USERNAME","RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_MIN_VALUE_AGE","RANKING_PAGE_SIZE","MAX_RANKING_PAGE_SIZE","SEARCHED_USERS_PAGE_SIZE","EVENTS_PAGE_SIZE","MIN_USER_AGE","MAX_USER_AGE","IMG_USER_PROFILE_HEADER","IMG_EMOJI_SAD_FACE","arraysContainSameElements","arr1","arr2","Array","isArray","arr1_aux","concat","sort","arr2_aux","shuffle","array","Math","random","emptyCallback","angleInRad","x","PI","generateChatID","id1","id2","chatID","_vm","this","_h","$createElement","_c","_self","staticStyle","_e","staticRenderFns","component","VApp","staticClass","attrs","_v","_s","sloganText","on","$event","$router","createAnAccountText","toLogInText","VBtn","VContainer","Vue","use","Vuex","genericDatabaseError","i18n","alreadyRegisteredEmailError","emailPasswordCombinationError","tooManyRequestsError","genericError","uploadingImageError","namespaced","state","getters","mutations","actions","isUserAuth","firebase","currentUser","setAccount","context","firestoreDB","collection","doc","uid","set","lastName","role","chats","tokens","merge","log","catch","askForMessagingPermission","requestPermission","generatePushNotificationToken","getToken","token","localStorage","getItem","currentMessageToken","update","FieldValue","arrayUnion","getAccount","id","email","createAccountListener","userID","docRef","onSnapshot","user","formattedUser","listener","dispatch","root","createAccount","createUserWithEmailAndPassword","password","setPersistance","setPersistence","Auth","Persistence","LOCAL","login","signInWithEmailAndPassword","logout","arrayRemove","signOut","sendEmailVerification","isEmailVerified","reload","emailVerified","sendPasswordResetEmail","updateAccountData","batch","infoToUpdate","commit","updateAccountEmail","updateEmail","updateAccountPassword","updatePassword","getProfileByUID","toDate","setHours","getProfile","profileInfo","getMultipleProfilesByUID","ids","userProfiles","forEach","getProfileByUsername","username","where","querySnapshot","size","docs","setProfile","toLowerCase","birthDate","Date","gender","description","avgRating","numRatings","score","setRegistrationCompleted","registrationCompleted","updateProfile","knownLanguages","languagesToLearn","setLanguages","uploadProfileImg","img","path","url","uploadImg","storageDB","ref","child","putString","getDownloadURL","setProfileImg","profileImg","updateUserLocation","location","geoFirestore","GeoFirestore","coordinates","GeoPoint","lat","lng","date","getLocation","getRatings","exists","setRating","newRating","rating","delete","isNextUsersPageEmpty","page","lastUserShowed","filters","ageRange","Constants","orderBy","currentDate","setFullYear","getFullYear","language","filterBy","languageToLearn","knownLanguage","startAfter","endAt","limit","documentSnapshots","searchedUserIndex","findIndex","searchedUser","newDocs","map","dataDocs","getNextUsersPage","newLastUserShowed","startAt","users","getNearbyUserIDs","geofirestore","queryNearbyUsers","near","center","radius","maxDistance","snapshot","getUsersWithSimilarUsername","getEventByID","getNextEventsPage","newLastEventShowed","lastEventShowed","languageInvolved","eventsRetrieved","events","getEventsToBeCelebrated","isNextEventsPageEmpty","addParticipantToEvent","eventID","participants","removeParticipantFromEvent","createChatMessagesListener","chatMessages","messages","docChanges","change","formattedChatMessages","setMessagesToRead","addMessagesToChat","newMessage","serverTimestamp","sender","read","text","addChat","chat","newChat","getChatByID","getTop100RankingUsers","position","getUserRankingPositionByID","database","isGeolocationPermissionGranted","isPushNotificationPermissionGranted","getIsGeolocationPermissionGranted","getIsPushNotificationPermissionGranted","resetState","setIsGeolocationPermissionGranted","setIsPushNotificationPermissionGranted","checkForGeolocationPermission","navigator","permissions","query","geolocation","getCurrentPosition","AuxMethods","onchange","checkForPushNotificationsPermission","isPermissionGranted","searchedUsersIDs","genderFilter","ageRangeFilter","languageFilter","searchByUsernameFilter","maxDistanceFilter","maxDistanceRanges","maxDistanceRangesText","locationFilter","nearbyUsersIDs","distanceSearchFilter","getUsers","getLanguagesByUserID","getGenderFilter","getAgeRangeFilter","getLanguageFilter","getSearchByUsernameFilter","getMaxDistanceFilter","getMaxDistanceRanges","getMaxDistanceRangesText","getUserByID","getNearbyUsersIDs","getNearbyUsersIDsLength","areThereFiltersOn","getFilters","filtersOn","getLastUserShowed","getSearchedUsers","searchedUsersReturn","getSearchedUsersIDsLength","getSearchedUsersIDs","setUsers","setGenderFilter","setAgeRangeFilter","setNearbyUsersIDs","setLanguageFilter","setLocationFilter","setSearchByUsernameFilter","setMaxDistanceFilter","addUser","addSearchedUserID","resetSearchedUsersIDs","setLastUserShowed","addRating","userTo","prev","newAvgRating","areThereMore","isEmpty","data2","isEmpty2","areThereMoreNearbyUsers","allIDs","idsToGetProfiles","isValid","startsWith","languageToLearnIndex","lang","knownLanguageIndex","getNearbyUsersProfiles","usersAdded","resetSearchedUsers","setFilters","resetFilters","alreadyAccountUsernameError","gettingCurrentLocationError","ratings","genderOptions","defaultProfileImg","languageOptions","getName","getID","getLastName","getEmail","getRole","getChats","getUsername","getBirthDate","getGender","getDescription","getProfileImg","getAvgRating","getNumRatings","getKnownLanguages","getLanguagesToLearn","getGenderImgByID","getGenderDefaultProfileImgByUserGender","getGenderOptionsAsArray","keys","getLanguageImgByID","getLanguageOptionsAsArray","getLanguageFromLanguageOptionsByID","getRating","setIDe","setName","setLastName","setEmail","setRole","setChats","accountInfo","setUsername","setBirthDate","setGender","setDescription","setAvgRating","setNumRatings","setKnownLanguages","setLanguagesToLearn","setRatings","setLocation","initState","generateNotificationToken","updateAccountNameAndLastName","isUserLogged","isIt","checkIfEmailIsVerified","isVerified","checkIfUsernameIsAlreadyRegistered","createProfile","isAlreadyRegistered","nextTick","getRegistrationState","checkRegistrationState","getCurrentLocation","coords","latitude","longitude","ratingsInfo","rateUser","currentLocation","eventsToShowIDs","mapEventsToShowIDs","languageInvolvedFilter","eventsTab","getLanguageInvolvedFilter","getEvents","getEventsTab","getEventsToShow","eventsToShow","getMapEventsToShow","getLastEventShowed","amIParticipating","found","find","participantID","setLanguageInvolvedFilter","setEventsTab","resetEventsToShowIDs","addEvent","addEventToShow","addMapEventToShow","setEventsToShowIDs","setLastEventShowed","userLocation","distance","eventLocation","_lat","_long","eventNonFormattedLoc","haversine","getAllEvents","getEventParticipants","chatsToShowIDs","chatListListener","chatMessagesListeners","usernameFilter","getChatsToShowIDs","getChatMessagesByChatID","getUnreadMessagesByChatID","myID","unreadMessages","getUnreadMessages","count","getChatsToShow","chatsToShow","auxChat","lastMessage","lowNotMe","getUserByChatID","includes","getNotReadMessagesCountByChatID","addChatMessagesListener","updateChatMessages","index","mMessage","sortChatMessagesByDate","compareChatMessagesByDate","a","b","dateA","dateB","addChatToShow","sortChatsToShowByLastMessage","compareChatsByLastMessageDate","chatALastMessageDate","chatBLastMessageDate","setUsernameFilter","setChatListListener","pushChatMessages","mp","alreadyAdded","manageChatListChange","cch","manageChatMessagesChange","newMessages","modifiedMessagesToRead","modifiedMessagesDated","setChatMessagesToReadByChatID","sendNewChatMessage","messageText","createChatListeners","rankingUsers","rankingUsersIDs","rankingUser","getRankingUsersToShow","rus","ru","getRankedUserByIndex","getRankingUsers","setRankingUser","setRankingUsers","resetRankingUsers","resetRankingUsersIDs","addRankingUserID","rankingUserID","top100Users","userIndex","getPagedRankingUsers","newUserShowed","pageEnding","areThereMoreRankingUsersToShow","Store","ranking","appInfoLoaded","getAppInfoLoaded","setAppInfoLoaded","getLoggedUser","resetAppState","$i18n","initAppInfo","Router","router","base","process","routes","redirect","Home","meta","requiresAuth","children","menu","beforeEach","to","from","next","auth","matched","some","record","store","registrationState","register","ready","registered","cached","updatefound","updated","offline","Vuetify","icons","iconfont","theme","themes","light","primary","secondary","thirdary","accent","info","success","warning","VueChatScroll","VueI18n","VueGoogleMaps","load","libraries","config","productionTip","app","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","db","firestore","settings","timestampsInSnapshots","enablePersistence","experimentalTabSynchronization","storage","messaging","onAuthStateChanged","vuetify","render","h","App","$mount","es","ERROR_GENERIC_PROBLEM","ERROR_GENERIC_CONNECTION_PROBLEM","ERROR_GENERIC_DATABASE_PROBLEM","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME","ERROR_WRONG_EMAIL_PASSWORD_COMBINATION","ERROR_UPLOADING_IMAGE","ERROR_SOMETHING_HAPPENED","ERROR_API_FILEREADER_NOT_SUPPORTED","ERROR_PASSWORDS_DONT_MATCH","ERROR_TOO_MANY_REQUESTS","ERROR_TEXT_WRONG_PASSWORD","ERROR_NO_ACCOUNT_WITH_THIS_EMAIL","ERROR_GETTING_CURRENT_LOCATION","ERROR_COULD_NOT_SET_YOUR_RATING","ERROR_PROBLEM_RETRIEVING_RANKING","ERROR_PROBLEM_GETTING_CURRENT_LOCATION","ERROR_PROBLEM_GETTING_NEARBY_USERS","ERROR_PROBLEM_GETTING_EVENTS","RULE_TEXT_MANDATORY_FIELD","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING","RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD","RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER","ASK_FOR_IMAGE_SELECTION","TEXT_VERIFICATION_EMAIL_SENT_TO","TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE","TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE","TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGES","TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE","TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE","TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGE","TEXT_LANGUAGE","TEXT_GENDER","TEXT_DISTANCE","TEXT_AGE","TEXT_FILTER_BY_MOTHER_LANGUAGE","TEXT_FILTER_BY_LANGUAGE_TO_LEARN","TEXT_SEARCH","TEXT_NO_FIT_USERS_TO_LIST","TEXT_FILTERS","TEXT_RATE_USER","TEXT_YOU","TEXT_CANCEL","TEXT_RATE","TEXT_REMOVE","TEXT_NO_LIMIT","TEXT_REMOVE_FILTERS","TEXT_YOUR_PROFILE","TEXT_EDIT","TEXT_EDIT_PROFILE","TEXT_USERS","TEXT_TO_FILTER","TEXT_EVENTS","TEXT_RANKING","TEXT_CHATS","TEXT_CLOSE","TEXT_SHOW_USERS","TEXT_OF","TEXT_CREATE_YOUR_ACCOUNT","TEXT_CREATE_AN_ACCOUNT","TEXT_NAME","TEXT_LASTNAME","TEXT_EMAIL","TEXT_EMAIL_DIRECTION","TEXT_PASSWORD","TEXT_REPEAT_PASSWORD","TEXT_REGISTER","TEXT_REGISTER_NOW","TEXT_ALREADY_HAVE_AN_ACCOUNT","TEXT_ACCESS_NOW","TEXT_ACCESS_TO_YOUR_ACCOUNT","TEXT_VERIFY_YOUR_EMAIL","TEXT_USERNAME","TEXT_FILL_YOUR_PROFILE","TEXT_BIRTHDATE","TEXT_TELL_US_A_LITTLE_ABOUT_YOU","TEXT_TO_CONTINUE","TEXT_YOUR_LANGUAGES","TEXT_WOMAN","TEXT_MAN","TEXT_ANY","TEXT_OTHER","TEXT_CHOOSE_YOUR_PROFILE_IMAGE","TEXT_PROFILE_IMAGE","TEXT_EMAIL_NOT_VALID","TEXT_USERNAME_NOT_VALID","TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD","TEXT_STILL_DONT_HAVE_AN_ACCOUNT","TEXT_TO_LOG_IN","TEXT_TO_LOG_OUT","TEXT_RESEND_EMAIL","TEXT_YOU_ARE_ABOUT_TO_LOG_OUT","TEXT_CONFIRM","TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT","TEXT_PROFILE_INFO","TEXT_LANGUAGES_TO_PRACTICE","TEXT_SAVE","TEXT_SETTINGS","TEXT_ACCOUNT","TEXT_PERMISSIONS","TEXT_NAME_AND_LASTNAME","TEXT_CHANGE_NAME_AND_LASTNAME","TEXT_CHANGE_EMAIL","TEXT_UPDATE","TEXT_VERIFY_YOUR_PASSWORD","TEXT_REMOVE_ACCOUNT","TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE","TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED","TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED","TEXT_CHANGE_PASSWORD","TEXT_CURRENT_PASSWORD","TEXT_NEW_PASSWORD","TEXT_CONFIRM_PASSWORD","TEXT_UPDATE_PASSWORD","TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD","TEXT_RESET_PASSWORD","TEXT_RESET_PASSWORD_INSTRUCTIONS","TEXT_SPACE_YEARS","TEXT_PARTICIPANTS","TEXT_NO_PARTICIPANTS_YET","TEXT_VERIFICATION_EMAIL_SENT","TEXT_NO_USERS_MATCH_SEARCH","TEXT_NO_EVENTS_AVAILABLE","TEXT_NO_CHATS_AVAILABLE","TEXT_NO_CHATS_MATCH_SEARCH","TEXT_LANGUAGE_INVOLVED_IN_EVENTS","TEXT_LOCATION_PERMISSION_NOT_GRANTED","TEXT_CONFIRM_EVENT_PARTICIPATION","TEXT_CANCEL_EVENT_PARTICIPATION","TEXT_APP_LANGUAGE","TEXT_LANGUAGE_OF_APP","TEXT_LANGUAGE_DE","TEXT_LANGUAGE_ZH","TEXT_LANGUAGE_ES","TEXT_LANGUAGE_FR","TEXT_LANGUAGE_EN","TEXT_LANGUAGE_IT","TEXT_LANGUAGE_JA","TEXT_LANGUAGE_PT","TEXT_LANGUAGE_ALL","TEXT_WE_BABBLE_SLOGAN","en","dateTimeFormats","abbrMonth","month","short","year","day","long","weekday","hour","minute","hour12","localeLanguage","locale","I18NMessages"],"mappings":"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","file":"js/app.47f241ed.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-280e35b4\":\"62188993\",\"chunk-2cb12f8f\":\"e8628d4b\",\"chunk-751629f2\":\"2ae68d4a\",\"chunk-fd58f02a\":\"04f33ddf\",\"chunk-3030d936\":\"601940b0\",\"chunk-21b5aa80\":\"fd34ed6d\",\"chunk-347cda0c\":\"7b219aee\",\"chunk-149ca684\":\"97ec2b7f\",\"chunk-4ab0690a\":\"4a97f981\",\"chunk-2ab413da\":\"d8a52255\",\"chunk-5a535783\":\"f740f451\",\"chunk-622f8ab8\":\"06c6d001\",\"chunk-047f451e\":\"4d654498\",\"chunk-0ad883c1\":\"1c0df5a8\",\"chunk-b94650e2\":\"ad18e1c0\",\"chunk-37c497f4\":\"810305c7\",\"chunk-20f43660\":\"7d859c0a\",\"chunk-21974a50\":\"8ce7fdcd\",\"chunk-9f6958ae\":\"1df27a0e\",\"chunk-ff55b83e\":\"297e5891\",\"chunk-49302222\":\"baf4463a\",\"chunk-583efd79\":\"6f4ed929\",\"chunk-b838f74c\":\"bc4d8800\",\"chunk-e380ce90\":\"3c93b379\",\"chunk-682d72e6\":\"ea6e7806\",\"chunk-59bad21b\":\"c6929d2e\",\"chunk-0b007d3a\":\"85daf05c\",\"chunk-25986f28\":\"0352990b\",\"chunk-116c160c\":\"549820ab\",\"chunk-fd745e64\":\"c4eceee9\",\"chunk-7926c4f8\":\"034c0c12\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-280e35b4\":1,\"chunk-2cb12f8f\":1,\"chunk-751629f2\":1,\"chunk-fd58f02a\":1,\"chunk-3030d936\":1,\"chunk-21b5aa80\":1,\"chunk-347cda0c\":1,\"chunk-149ca684\":1,\"chunk-4ab0690a\":1,\"chunk-2ab413da\":1,\"chunk-5a535783\":1,\"chunk-622f8ab8\":1,\"chunk-047f451e\":1,\"chunk-0ad883c1\":1,\"chunk-b94650e2\":1,\"chunk-37c497f4\":1,\"chunk-20f43660\":1,\"chunk-21974a50\":1,\"chunk-9f6958ae\":1,\"chunk-ff55b83e\":1,\"chunk-49302222\":1,\"chunk-583efd79\":1,\"chunk-b838f74c\":1,\"chunk-e380ce90\":1,\"chunk-682d72e6\":1,\"chunk-59bad21b\":1,\"chunk-0b007d3a\":1,\"chunk-25986f28\":1,\"chunk-116c160c\":1,\"chunk-fd745e64\":1,\"chunk-7926c4f8\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-280e35b4\":\"a18fcf01\",\"chunk-2cb12f8f\":\"18ea9c54\",\"chunk-751629f2\":\"c3849757\",\"chunk-fd58f02a\":\"8704c37e\",\"chunk-3030d936\":\"2ac6643f\",\"chunk-21b5aa80\":\"1d440bae\",\"chunk-347cda0c\":\"eefe45bc\",\"chunk-149ca684\":\"8cea3ea7\",\"chunk-4ab0690a\":\"8cea3ea7\",\"chunk-2ab413da\":\"8cea3ea7\",\"chunk-5a535783\":\"9a7436ff\",\"chunk-622f8ab8\":\"dc35a825\",\"chunk-047f451e\":\"bff4b736\",\"chunk-0ad883c1\":\"bff4b736\",\"chunk-b94650e2\":\"b9163a27\",\"chunk-37c497f4\":\"b69ea1e5\",\"chunk-20f43660\":\"14eaa1ab\",\"chunk-21974a50\":\"964a5b22\",\"chunk-9f6958ae\":\"076ea886\",\"chunk-ff55b83e\":\"ad2e3bd1\",\"chunk-49302222\":\"71f89d8e\",\"chunk-583efd79\":\"2ed52535\",\"chunk-b838f74c\":\"a0cb59c5\",\"chunk-e380ce90\":\"bff4b736\",\"chunk-682d72e6\":\"d5ba967b\",\"chunk-59bad21b\":\"3c176f56\",\"chunk-0b007d3a\":\"650191b5\",\"chunk-25986f28\":\"650191b5\",\"chunk-116c160c\":\"650191b5\",\"chunk-fd745e64\":\"94914940\",\"chunk-7926c4f8\":\"6d8851e2\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"","export default{\r\n\r\n    /* RULES */\r\n    RULE_MIN_VALUE_CHARACTERS_USERNAME: 5,\r\n    RULE_MAX_VALUE_CHARACTERS_USERNAME: 14,\r\n    RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 20,\r\n    RULE_MIN_VALUE_AGE: 16,\r\n    RANKING_PAGE_SIZE: 10,\r\n    MAX_RANKING_PAGE_SIZE: 100,\r\n    SEARCHED_USERS_PAGE_SIZE: 5, //Allways SEARCHED_USERS_PAGE_SIZE >= 2\r\n    EVENTS_PAGE_SIZE: 1,\r\n\r\n    /* DATA */\r\n    MIN_USER_AGE: 16,\r\n    MAX_USER_AGE: 100,\r\n\r\n    /* IMAGES */\r\n    IMG_USER_PROFILE_HEADER: \"img/backgrounds/user_profile_header.png\",\r\n    IMG_EMOJI_SAD_FACE: 'img/emojis/sad_face.png',\r\n}\r\n","export default {\r\n    arraysContainSameElements: function (arr1, arr2) {\r\n\r\n        if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length)\r\n            return false;\r\n\r\n        var arr1_aux = arr1.concat().sort();\r\n        var arr2_aux = arr2.concat().sort();\r\n\r\n        for (var i = 0; i < arr1_aux.length; i++) {\r\n\r\n            if (arr1_aux[i] !== arr2_aux[i])\r\n                return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    },\r\n\r\n    shuffle: function (array) {\r\n        array.sort(() => Math.random() - 0.5);\r\n    },\r\n\r\n    emptyCallback: function () {\r\n\r\n    },\r\n    angleInRad: () => (x) => {\r\n        return x * Math.PI / 180;\r\n    },\r\n\r\n    generateChatID(id1, id2){\r\n        let chatID;\r\n\r\n        if (id1 < id2) {\r\n            chatID = id1 + id2;\r\n        } else {\r\n            chatID = id2 + id1;\r\n        }\r\n\r\n        return chatID;\r\n    }\r\n\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}},[(_vm.dataIsReady)?_c('router-view',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}}):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <v-app style=\"max-width: 100%; height: 100%;\">\r\n        <router-view v-if=\"dataIsReady\" style=\"max-width: 100%; height: 100%;\"/>\r\n    </v-app>\r\n</template>\r\n\r\n<script>\r\n\r\n    import {mapActions, mapMutations} from 'vuex';\r\n\r\n    export default {\r\n        name: 'App',\r\n        components: {},\r\n        data() {\r\n            return {\r\n                dataIsReady: false\r\n            }\r\n        },\r\n        methods: {\r\n            ...mapActions('user', ['getRegistrationState', 'initState']),\r\n            ...mapActions(['getLoggedUser']),\r\n        },\r\n        created() {\r\n            let self = this;\r\n\r\n            self.getLoggedUser().then(currentUser => {\r\n                if (currentUser != null && currentUser != undefined) {\r\n                    // user is logged in\r\n                    let resultInitAppInfo = self.initState();\r\n\r\n                    resultInitAppInfo\r\n                        .then(() => {\r\n                            self.dataIsReady = true;\r\n                        })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n                } else {\r\n                    self.$store.dispatch('resetAppState').then(() => {\r\n                        self.$router.replace('home');\r\n                    })\r\n                        .catch((error) => {\r\n                            self.snackbarText = error;\r\n                            self.snackbar = true;\r\n                        });\r\n\r\n                    self.dataIsReady = true;\r\n                    console.log(\"No user logged\");\r\n                }\r\n            });\r\n            //this.checkRegistrationState();\r\n            /*let self = this;\r\n            let resultInitAppInfo = this.initAppInfo();\r\n\r\n            resultInitAppInfo.then(() => {\r\n                self.dataIsReady = true;\r\n            })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                });*/\r\n\r\n        },\r\n\r\n    };\r\n</script>\r\n\r\n<style>\r\n    #app-toolbar {\r\n        width: 100%;\r\n    }\r\n\r\n    #loading {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        text-align: center;\r\n        min-height: 100vh;\r\n    }\r\n</style>\r\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=49935086&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\ninstallComponents(component, {VApp})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"img-back\",staticStyle:{\"position\":\"relative\",\"height\":\"100%!important\"}},[_c('v-container',{staticClass:\"home justify-center text-center\",staticStyle:{\"height\":\"100%\",\"position\":\"relative\",\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('p',{staticClass:\"white--text\"},[_vm._v(\"webabble.es\")]),_c('div',{staticStyle:{\"width\":\"100%\",\"margin-top\":\"12vh\"},attrs:{\"align\":\"center\"}},[_c('img',{staticStyle:{\"width\":\"44vw\",\"max-width\":\"200px\"},attrs:{\"src\":require(\"../assets/WhiteLogoWeBabble.png\")}}),_c('p',{staticClass:\"white--text slogan\"},[_c('i',[_vm._v(_vm._s(_vm.sloganText))])])]),_c('div',{staticClass:\"bottom-centered-buttons\",staticStyle:{\"margin-bottom\":\"20px\",\"max-width\":\"600px\"},attrs:{\"align\":\"center\"}},[_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'signUp'})}}},[_vm._v(\"\\n                    \"+_vm._s(_vm.createAnAccountText)+\"\\n                \")])],1),_c('br'),_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'login'})}}},[_vm._v(\"\\n                    \"+_vm._s(_vm.toLogInText)+\"\\n                \")])],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"img-back\" style=\"position: relative; height: 100%!important;\">\r\n        <v-container class=\"home justify-center text-center\" style=\"height: 100%; position: relative; width: 100%\" align=\"center\">\r\n            <p class=\"white--text\">webabble.es</p>\r\n\r\n            <div align=\"center\" style=\"width: 100%; margin-top: 12vh\">\r\n                <img style=\"width: 44vw; max-width: 200px\" src=\"../assets/WhiteLogoWeBabble.png\"/>\r\n                <p class=\"white--text slogan\"><i>{{sloganText}}</i></p>\r\n            </div>\r\n\r\n            <div class=\"bottom-centered-buttons\" align=\"center\" style=\"margin-bottom: 20px; max-width: 600px\">\r\n                <div align=\"center\" style=\"width: 94%\">\r\n                    <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'signUp'})\" style=\"width: 100%;\">\r\n                        {{createAnAccountText}}\r\n                    </v-btn>\r\n                </div>\r\n                <br>\r\n                <div align=\"center\" style=\"width: 94%\">\r\n                    <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'login'})\" style=\"width: 100%\">\r\n                        {{toLogInText}}\r\n                    </v-btn>\r\n                </div>\r\n            </div>\r\n        </v-container>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \"home\",\r\n        data() {\r\n            return {\r\n                createAnAccountText: null,\r\n                toLogInText: null,\r\n                sloganText: null\r\n            }\r\n        },\r\n        created() {\r\n            this.createAnAccountText = this.$i18n.t('messages.TEXT_CREATE_AN_ACCOUNT');\r\n            this.toLogInText = this.$i18n.t('messages.TEXT_TO_LOG_IN');\r\n            this.sloganText = this.$i18n.t('messages.TEXT_WE_BABBLE_SLOGAN');\r\n        }\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    .bottom-centered-buttons {\r\n        width: 92.5%;\r\n        bottom: 5%;\r\n        left: 50%;\r\n        transform: translate(-50%, 0);\r\n        position: fixed;\r\n    }\r\n\r\n    .slogan {\r\n        font-family: \"Arial\", sans-serif;\r\n    }\r\n\r\n    .btn-grad {\r\n        background-image: linear-gradient(to right, #02AAB0 0%, #00CDAC 51%, #02AAB0 100%)\r\n    }\r\n\r\n    .btn-grad:hover {\r\n        background-position: right center;\r\n    }\r\n\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=758cbadf&scoped=true&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=758cbadf&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"758cbadf\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VContainer})\n","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport * as firebase from \"firebase\";\r\nimport Constants from \"../Constants\";\r\nimport {GeoFirestore} from \"geofirestore\";\r\nimport i18n from \"../../i18n\";\r\n\r\nconst genericDatabaseError = i18n.t('messages.ERROR_GENERIC_DATABASE_PROBLEM');\r\nconst alreadyRegisteredEmailError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL');\r\nconst emailPasswordCombinationError = i18n.t('messages.ERROR_WRONG_EMAIL_PASSWORD_COMBINATION');\r\nconst tooManyRequestsError = i18n.t('messages.ERROR_TOO_MANY_REQUESTS');\r\nconst genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nconst uploadingImageError = i18n.t('messages.ERROR_UPLOADING_IMAGE');\r\nconst genericConnectionError = i18n.t('messages.ERROR_GENERIC_CONNECTION_PROBLEM');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----     DATABASE (Firebase) INTERACTION      -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {},\r\n    getters: {},\r\n    mutations: {},\r\n    actions: {\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- ACCOUNTS ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserAuth ~                                                              >\r\n        // To determine if user is or is not authenticated                             >\r\n        //----------------------------------------------------------------------------->\r\n        isUserAuth: function () {\r\n            return firebase.auth().currentUser;\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setAccount ~                                                              >\r\n        // To set user account info                                                    >\r\n        // parameters required: data {email, password, name, lastName, role}           >\r\n        //----------------------------------------------------------------------------->\r\n        setAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        name: data.name,\r\n                        lastName: data.lastName,\r\n                        role: 'user',\r\n                        chats: [],\r\n                        tokens: []\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Account info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ askForMessagingPermission ~                                               >\r\n        // To asf for messaging push notifications permission                          >\r\n        //----------------------------------------------------------------------------->\r\n        askForMessagingPermission(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.messaging().requestPermission()\r\n                    .then(() => {\r\n                        resolve(true);\r\n                    })\r\n                    .catch(() => {\r\n                        resolve(false);\r\n                    });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generatePushNotificationToken ~                                           >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generatePushNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                firebase.messaging().getToken().then(async (token) => {\r\n                    if (token) {\r\n                        const currentMessageToken = await window.localStorage.getItem('messagingToken');\r\n\r\n                        console.log('token will be updated', currentMessageToken != token)\r\n                        if (currentMessageToken != token) {\r\n                            console.log(\"token\")\r\n                            let firestoreDB = firebase.firestore();\r\n                            firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayUnion(token)}\r\n                            )\r\n                                .then(() => {\r\n                                    resolve();\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.error(error);\r\n                                    reject(genericDatabaseError);\r\n                                });\r\n                        }\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAccount ~                                                              >\r\n        // To get user auth account info                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getAccount() {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"Account info successfully retrieved from firebase\");\r\n                        resolve({\r\n                            id: doc.id,\r\n                            email: firebase.auth().currentUser.email,\r\n                            ...doc.data()\r\n                        });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccountListener ~                                                   >\r\n        // To listen on changes on user account info                                   >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccountListener: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Accounts\").doc(userID)\r\n                        .onSnapshot(function (user) {\r\n                            let formattedUser = {\r\n                                id: userID,\r\n                                ...user.data(),\r\n                                listener: docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatListChange\", formattedUser, {root: true}).then(() => {\r\n                                resolve(formattedUser);\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                    firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n                        .then(() => {\r\n                            console.log(\"Success creating account in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            if (error.code == 'auth/email-already-in-use') {\r\n                                reject(alreadyRegisteredEmailError);\r\n                            } else {\r\n                                reject(genericDatabaseError);\r\n                            }\r\n                        });\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setPersistance ~                                                          >\r\n        // To set firebase account persistance                                         >\r\n        //----------------------------------------------------------------------------->\r\n        setPersistance: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(() => {\r\n                        console.log(\"Success setting firebase account persistence.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error)\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log in firebase user account                                             >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n                    .then(() => {\r\n                        console.log(\"Success logging user in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        if (error.code == 'auth/wrong-password' || error.code == \"auth/user-not-found\") {\r\n                            reject(emailPasswordCombinationError);\r\n                        } else if (error.code == \"auth/too-many-requests\") {\r\n                            reject(tooManyRequestsError);\r\n                        } else {\r\n                            reject(genericError);\r\n                        }\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log out of firebase user account                                         >\r\n        //----------------------------------------------------------------------------->\r\n        logout: function () {\r\n            return new Promise(async function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                if (firebase.auth() != null) {\r\n                    await firebase.messaging().getToken().then(async (token) => {\r\n                        if (token) {\r\n                            await firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayRemove(token)}\r\n                            )\r\n                                .catch(function (error) {\r\n                                    console.error(error);\r\n                                    reject(genericDatabaseError);\r\n                                });\r\n                        }\r\n\r\n                    }).catch(function (error) {\r\n                        console.error(error);\r\n\r\n                        if (error.code != 'messaging/failed-serviceworker-registration') {\r\n                            reject(genericDatabaseError);\r\n                        }\r\n                    });\r\n\r\n                    firebase.auth().signOut()\r\n                        .then(() => {\r\n                            resolve();\r\n                        })\r\n                        .catch(err => {\r\n                            console.error(err);\r\n                            reject(genericError);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send firebase account email verification                                 >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.sendEmailVerification().then(function () {\r\n                    console.log('Firebase verification email sent.');\r\n                    resolve();\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    if (error.code == \"auth/too-many-requests\") {\r\n                        reject(tooManyRequestsError);\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isEmailVerified ~                                                         >\r\n        // To check if firebase account email is verified                              >\r\n        //----------------------------------------------------------------------------->\r\n        isEmailVerified: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.reload().then(() => {\r\n                    if (firebase.auth().currentUser.emailVerified) {\r\n                        console.log(\"Firebase account email is verified.\");\r\n                        resolve(true);\r\n                    } else {\r\n                        resolve(false);\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendPasswordResetEmail ~                                                  >\r\n        // To send firebase account password reset email                               >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().sendPasswordResetEmail(email).then(function () {\r\n                    console.log(\"Password reset email sent.\");\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    // An error happened.\r\n                    if (error.code == 'auth/user-not-found') {\r\n                        console.log(\"No account attached to the specified email.\");\r\n                        resolve();\r\n                    } else {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountData ~                                                       >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName], [email]}                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountData: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('name')) {\r\n                    batch.update(docRef, {\"name\": data.name});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('lastName')) {\r\n                    batch.update(docRef, {\"lastName\": data.lastName});\r\n                    infoToUpdate = true;\r\n                }\r\n\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Account info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updateEmail(email).then(function () {\r\n                    console.log(\"Account email successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword: function (context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updatePassword(password).then(function () {\r\n                    console.log(\"Account password successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- PROFILES ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUID ~                                                         >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUID(context, uid) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(uid).get()\r\n                    .then((doc) => {\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            if (doc.data().hasOwnProperty(\"birthDate\")) {\r\n                                doc.data()[\"birthDate\"] = doc.data()[\"birthDate\"].toDate().setHours(0, 0, 0,);\r\n                            }\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfile ~                                                              >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfile(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('getProfileByUID', firebase.auth().currentUser.uid)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo && profileInfo.hasOwnProperty(\"birthDate\")) {\r\n                            profileInfo[\"birthDate\"] = profileInfo[\"birthDate\"].toDate().setHours(0, 0, 0,);\r\n                        }\r\n\r\n                        console.log(\"Profile info successfully retrieved from firebase\");\r\n                        resolve(profileInfo);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getMultipleProfilesByUID ~                                                >\r\n        // To get multiple user profiles by their uids                                 >\r\n        // parameters required: ids[]                                                  >\r\n        // return: userProfiles[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getMultipleProfilesByUID(context, ids) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let promises = [];\r\n                let userProfiles = [];\r\n\r\n                ids.forEach(id => {\r\n                    promises.push(\r\n                        context.dispatch('getProfileByUID', id)\r\n                            .then((profileInfo) => {\r\n                                userProfiles.push({\r\n                                    id: id,\r\n                                    ...profileInfo\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(genericDatabaseError);\r\n                            })\r\n                    );\r\n                });\r\n                Promise.all(promises).then(function () {\r\n                    resolve(userProfiles);\r\n                })\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUsername ~                                                    >\r\n        // To get user profile info by its username                                    >\r\n        // parameters required: username                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").where(\"username\", \"==\", username).get()\r\n                    .then((querySnapshot) => {\r\n                        if (querySnapshot.size > 0) {\r\n                            console.log(\"Profile info successfully retrieved from firebase\");\r\n                            resolve(querySnapshot.docs);\r\n                        } else {\r\n                            console.log(\"Profile info was not found in firebase\");\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfile ~                                                              >\r\n        // To set user profile info                                                    >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        setProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        username: data.username.toLowerCase(),\r\n                        birthDate: new Date(new Date(data.birthDate).setHours(0, 0, 0,)),\r\n                        gender: data.gender,\r\n                        description: data.description,\r\n                        avgRating: 0,\r\n                        numRatings: 0,\r\n                        score: 0\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Profile info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        registrationCompleted: true\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Registration state successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile info                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('username')) {\r\n                    batch.update(docRef, {\"username\": data.username});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('description')) {\r\n                    batch.update(docRef, {\"description\": data.description});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('gender')) {\r\n                    batch.update(docRef, {\"gender\": data.gender});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('birthDate')) {\r\n                    batch.update(docRef, {\"birthDate\": new Date(new Date(data.birthDate).setHours(0, 0, 0,))});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('knownLanguages')) {\r\n                    batch.update(docRef, {\"knownLanguages\": data.knownLanguages});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('languagesToLearn')) {\r\n                    batch.update(docRef, {\"languagesToLearn\": data.languagesToLearn});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Profile info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        knownLanguages: data.knownLanguages,\r\n                        languagesToLearn: data.languagesToLearn,\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User languages info successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadProfileImg ~                                                        >\r\n        // To upload a profile image to firebase storage                               >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        uploadProfileImg: function (context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let userID = firebase.auth().currentUser.uid;\r\n                let path = \"UserProfileImages/\" + userID;\r\n\r\n                let data = {\r\n                    img: img,\r\n                    path: path\r\n                };\r\n\r\n                context.dispatch('uploadImg', data)\r\n                    .then((url) => {\r\n                        resolve(url);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadImg ~                                                               >\r\n        // To upload an image to firebase storage                                      >\r\n        // parameters required: data {path, img}                                       >\r\n        //----------------------------------------------------------------------------->\r\n        uploadImg: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let storageDB = firebase.storage().ref().child(data.path);\r\n                storageDB.putString(data.img, 'base64')\r\n                    .then(() => {\r\n                        storageDB.getDownloadURL().then((url) => {\r\n                            console.log('User profile image uploaded.');\r\n                            resolve(url)\r\n                        })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(uploadingImageError);\r\n                            });\r\n                    }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image url in firebase profile                           >\r\n        // parameters required: url                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg: function (context, url) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        profileImg: url\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User profile image successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateUserLocation ~                                                      >\r\n        // To update user location in firebase using GeoFirestore library              >\r\n        // parameters required: location{lat, lng}                                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateUserLocation: function (context, location) {\r\n            let geoFirestore = new GeoFirestore(firebase.firestore());\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                geoFirestore.collection('UserLocations').doc(firebase.auth().currentUser.uid).set({\r\n                    coordinates: new firebase.firestore.GeoPoint(location.lat, location.lng),\r\n                    date: new Date()\r\n                }).then(function () {\r\n                    console.log(\"User location successfully written in firebase.\");\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get user location                                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UserLocations\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"User location successfully retrieved from firebase.\");\r\n                        let location = {\r\n                            lat: doc.data().l[0],\r\n                            lng: doc.data().l[1]\r\n                        };\r\n                        resolve(location);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------  RATINGS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        // return: ratingsInfo/null                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings: function () {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).get().then(function (doc) {\r\n                    console.log(\"User ratings successfully retrieved from firebase.\");\r\n\r\n                    if (doc.exists) {\r\n                        resolve(doc.data());\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRating ~                                                              >\r\n        // To set user rating given by the logged user                                 >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        setRating: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let newRating = {};\r\n\r\n                newRating[data.id] = data.rating;\r\n                if (data.rating) {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).set(newRating, {merge: true})\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully written in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).update({\r\n                        [data.id]: firebase.firestore.FieldValue.delete()\r\n                    })\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully deleted in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------  SEARCH ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextUsersPageEmpty ~                                                    >\r\n        // To check that if we search users with pagination, next page won't be empty  >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextUsersPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let geoFirestore = new GeoFirestore(firestoreDB);\r\n                let page;\r\n                let lastUserShowed = data.lastUserShowed;\r\n                let newLastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextUsersPage ~                                                        >\r\n        // To get search users with pagination                                         >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: {newLastUserShowed, users}                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getNextUsersPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let geoFirestore = new GeoFirestore(firestoreDB);\r\n                let page;\r\n                let newLastUserShowed;\r\n                let lastUserShowed = data.lastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> END USERNAME FILTERING\r\n\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n\r\n                if (data.lastUserShowed == null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAt(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else if (data.lastUserShowed != null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n                        newLastUserShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n\r\n                        resolve({\r\n                            newLastUserShowed: newLastUserShowed,\r\n                            users: newDocs\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUserIDs ~                                                        >\r\n        // To get IDs of nearby users                                                  >\r\n        // parameters required: data{location, maxDistance}                            >\r\n        // return: ids[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUserIDs(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUsersWithSimilarUsername ~                                             >\r\n        // To get profiles of users which username starts with the one passed as a     >\r\n        // parameter.                                                                  >\r\n        // parameters required: username                                               >\r\n        // return: userProfiles[]                                                      >\r\n        //----------------------------------------------------------------------------->\r\n        getUsersWithSimilarUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- EVENTS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                            >\r\n        // To get an event by its id                                                   >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(id).get()\r\n                    .then((doc) => {\r\n\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextEventsPage ~                                                       >\r\n        // To get events with pagination                                               >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: {newLastEventShowed, events}                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getNextEventsPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                if (lastEventShowed == null) {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAt(lastEventShowed);\r\n                } else {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                }\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        newLastEventShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve({\r\n                            newLastEventShowed: newLastEventShowed,\r\n                            events: eventsRetrieved\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventsToBeCelebrated ~                                                 >\r\n        // To get events which will be celebrated in the future                        >\r\n        // return: events[]                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getEventsToBeCelebrated: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\");\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(eventsRetrieved);\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextEventsPageEmpty ~                                                   >\r\n        // To check if next page of events is empty                                    >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextEventsPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        resolve(documentSnapshots.docs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add the logged user to an Event                                          >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayUnion(firebase.auth().currentUser.uid)\r\n                }).then(function (documentSnapshots) {\r\n                    console.log(\"User successfully added to event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove the logged user from an Event                                     >\r\n        // parameters required: eventID                                                >\r\n        // return: userID                                                              >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayRemove(firebase.auth().currentUser.uid)\r\n                }).then(function (documentSnapshots) {\r\n                    console.log(\"User successfully remove from event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*--------------------------  CHATS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatMessagesListener ~                                              >\r\n        // To create a listener for chat messages by chat id                           >\r\n        // parameters required: chatID                                                 >\r\n        // return: messages                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        createChatMessagesListener: function (context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\")\r\n                        .onSnapshot(function (chatMessages) {\r\n\r\n                            let messages = chatMessages.docChanges().map(change => {\r\n                                const id = change.doc.id;\r\n                                const dataDocs = change.doc.data();\r\n                                return {id, change: change.type, ...dataDocs};\r\n                            });\r\n\r\n                            let formattedChatMessages = {\r\n                                id: chatID,\r\n                                messages: messages,\r\n                                listener: docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatMessagesChange\", formattedChatMessages, {root: true}).then(() => {\r\n                                resolve();\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setMessagesToRead ~                                                       >\r\n        // To set messages unread in chat to read state                                >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setMessagesToRead(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let promises = [];\r\n\r\n                let batch = firestoreDB.batch();\r\n\r\n                data.messages.forEach(message => {\r\n                    batch.update(firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc(message),\r\n                        {\r\n                            'read': true\r\n                        });\r\n                });\r\n\r\n                batch.commit().then(function () {\r\n                    resolve();\r\n                })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addMessagesToChat ~                                                       >\r\n        // To add a new message to a chat in firebase                                  >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        addMessagesToChat(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newMessage = {\r\n                    date: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    sender: data.message.sender,\r\n                    read: false,\r\n                    text: data.message.text,\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc().set(newMessage)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding message\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addChat ~                                                                 >\r\n        // To create a new chat and add it to the user chat list                       >\r\n        // parameters required: chat{id, users[]}                                      >\r\n        //----------------------------------------------------------------------------->\r\n        addChat(context, chat) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newChat = {\r\n                    users: chat.users,\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chat.id).set(newChat)\r\n                    .then(() => {\r\n                        firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update({chats: firebase.firestore.FieldValue.arrayUnion(chat.id)})\r\n                            .then(() => {\r\n                                resolve();\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding chat\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getChatByID ~                                                             >\r\n        // To get a chat by its id                                                     >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getChatByID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chatID).get()\r\n                    .then((doc) => {\r\n                        resolve({\r\n                            id: doc.id,\r\n                            ...doc.data()\r\n                        });\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- RANKING ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getTop100RankingUsers ~                                                   >\r\n        // To get the top 100 ranked users in the app                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getTop100RankingUsers: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page = firestoreDB.collection(\"Ranking\");\r\n                page = page.orderBy(\"position\").limit(Constants.MAX_RANKING_PAGE_SIZE);\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserRankingPositionByID ~                                              >\r\n        // To get user position in app ranking                                         >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getUserRankingPositionByID: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Ranking\").where(\"id\", \"==\", userID).get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        if (newDocs.length > 1 || newDocs.length < 1) {\r\n                            resolve(null);\r\n                        } else {\r\n                            resolve(newDocs[0]);\r\n                        }\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n    },\r\n\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport AuxMethods from \"../AuxMethods\";\r\nimport database from \"./database\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----        APP PERMISSIONS MANAGEMENT        -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database\r\n    },\r\n    state: {\r\n        isGeolocationPermissionGranted: false,\r\n        isPushNotificationPermissionGranted: false,\r\n    },\r\n    getters: {\r\n        getIsGeolocationPermissionGranted: (state) => {\r\n            return state.isGeolocationPermissionGranted;\r\n        },\r\n        getIsPushNotificationPermissionGranted: (state) => {\r\n            return state.isPushNotificationPermissionGranted;\r\n        },\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.isGeolocationPermissionGranted = false;\r\n            state.isPushNotificationPermissionGranted = false;\r\n        },\r\n        setIsGeolocationPermissionGranted(state, isGeolocationPermissionGranted) {\r\n            state.isGeolocationPermissionGranted = isGeolocationPermissionGranted;\r\n        },\r\n        setIsPushNotificationPermissionGranted(state, isPushNotificationPermissionGranted) {\r\n            state.isPushNotificationPermissionGranted = isPushNotificationPermissionGranted;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForGeolocationPermission ~                                           >\r\n        // To check if geolocation permission has been granted by the user             >\r\n        //----------------------------------------------------------------------------->\r\n        checkForGeolocationPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                navigator.permissions.query({name: 'geolocation'}).then(function (result) {\r\n                    if (result.state == 'granted') {\r\n                        // Permission is already granted\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                        context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n\r\n                        resolve(true);\r\n                    } else if (result.state == 'prompt') {\r\n                        // Navigator will ask for permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n                    } else if (result.state == 'denied') {\r\n                        // User has denied permission\r\n                        context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n\r\n                    result.onchange = function () {\r\n                        // Whenever permission state changes\r\n\r\n                        if (result.state == 'granted') {\r\n                            // Permission is already granted\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                            context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n\r\n                            resolve(true);\r\n                        } else if (result.state == 'prompt') {\r\n                            // Navigator will ask for permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n\r\n                        } else if (result.state == 'denied') {\r\n                            // User has denied permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            resolve(false);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForPushNotificationsPermission ~                                     >\r\n        // To check if push notifications permission has been granted by the user      >\r\n        //----------------------------------------------------------------------------->\r\n        checkForPushNotificationsPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch(\"database/askForMessagingPermission\").then(function (isPermissionGranted) {\r\n                    if (isPermissionGranted) {\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", true);\r\n                        context.dispatch('user/generateNotificationToken', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                        resolve(true);\r\n                    } else{\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                APP USERS                 -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        /* All users retrieved */\r\n        users: {},\r\n\r\n        /* User IDs result of the searching process */\r\n        searchedUsersIDs: [],\r\n        lastUserShowed: null,\r\n        genderFilter: \"O\",\r\n        ageRangeFilter: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n        languageFilter: {\r\n            filterBy: \"languageToLearn\",\r\n            knownLanguage: \"all\",\r\n            languageToLearn: \"all\"\r\n        },\r\n        searchByUsernameFilter: null,\r\n        maxDistanceFilter: 3,\r\n        maxDistanceRanges: [1, 5, 10, null],\r\n        maxDistanceRangesText: ['1 km', '5 km', '10 km', '∞'],\r\n        locationFilter: null,\r\n        nearbyUsersIDs: null,\r\n\r\n        /* Filtering fields */\r\n        distanceSearchFilter: null,\r\n    },\r\n    getters: {\r\n\r\n        getUsers: (state) => {\r\n            return state.users;\r\n        },\r\n        getLanguagesByUserID: (state) => (id) => {\r\n            return state.users[id].knownLanguages.concat(state.users[id].languagesToLearn);\r\n        },\r\n        getGenderFilter: (state) => {\r\n            return state.genderFilter;\r\n        },\r\n        getAgeRangeFilter: (state) => {\r\n            return state.ageRangeFilter;\r\n        },\r\n        getLanguageFilter: (state) => {\r\n            return state.languageFilter;\r\n        },\r\n        getSearchByUsernameFilter: (state) => {\r\n            return state.searchByUsernameFilter;\r\n        },\r\n        getMaxDistanceFilter: (state) => {\r\n            return state.maxDistanceFilter;\r\n        },\r\n        getMaxDistanceRanges: (state) => {\r\n            return state.maxDistanceRanges;\r\n        },\r\n        getMaxDistanceRangesText: (state) => {\r\n            return state.maxDistanceRangesText;\r\n        },\r\n        getUserByID: (state) => (id) => {\r\n            return state.users[id];\r\n        },\r\n        getNearbyUsersIDs: (state) => {\r\n            return state.nearbyUsersIDs;\r\n        },\r\n        getNearbyUsersIDsLength: (state) => {\r\n            return state.nearbyUsersIDs.length;\r\n        },\r\n        areThereFiltersOn: (state, getters) => {\r\n            let filters = getters.getFilters;\r\n            let filtersOn = false;\r\n\r\n            if (filters.gender === \"M\" || filters.gender === \"W\"\r\n                || filters.ageRange[0] > Constants.MIN_USER_AGE\r\n                || filters.ageRange[1] < Constants.MAX_USER_AGE\r\n                || (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\")\r\n                || (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\")\r\n                || filters.maxDistance != null) {\r\n                filtersOn = true;\r\n            }\r\n\r\n            return filtersOn;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                gender: state.genderFilter,\r\n                ageRange: state.ageRangeFilter,\r\n                language: state.languageFilter,\r\n                maxDistance: state.maxDistanceRanges[state.maxDistanceFilter],\r\n                location: state.locationFilter,\r\n                username: state.searchByUsernameFilter\r\n            };\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getSearchedUsers: (state) => {\r\n\r\n            let searchedUsersReturn = [];\r\n\r\n            state.searchedUsersIDs.forEach(userID => {\r\n                searchedUsersReturn.push({\r\n                    id: userID,\r\n                    ...state.users[userID]\r\n                });\r\n            });\r\n\r\n            return searchedUsersReturn;\r\n        },\r\n        getSearchedUsersIDsLength: (state) => {\r\n            return state.searchedUsersIDs.length;\r\n        },\r\n        getSearchedUsersIDs: (state) => {\r\n            return state.searchedUsersIDs;\r\n        },\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            /* All users retrieved */\r\n            state.users = {};\r\n\r\n            /* User IDs result of the searching process */\r\n            state.searchedUsersIDs = [];\r\n            state.lastUserShowed = null;\r\n            state.genderFilter = \"O\";\r\n            state.ageRangeFilter = [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE];\r\n            state.languageFilter = {\r\n                filterBy: \"languageToLearn\",\r\n                knownLanguage: \"all\",\r\n                languageToLearn: \"all\"\r\n            };\r\n            state.searchByUsernameFilter = null;\r\n            state.maxDistanceFilter = 3;\r\n            state.maxDistanceRanges = [1000, 5000, 10000, null];\r\n            state.maxDistanceRangesText = ['1 km', '5 km', '10 km', '∞'];\r\n            state.locationFilter = null;\r\n            state.nearbyUsersIDs = null;\r\n\r\n            /* Filtering fields */\r\n            state.distanceSearchFilter = null;\r\n        },\r\n        setUsers(state, users) {\r\n            state.users = users;\r\n        },\r\n        setGenderFilter: (state, genderFilter) => {\r\n            state.genderFilter = genderFilter;\r\n        },\r\n        setAgeRangeFilter: (state, ageRangeFilter) => {\r\n            state.ageRangeFilter = ageRangeFilter;\r\n        },\r\n        setNearbyUsersIDs: (state, nearbyUsersIDs) => {\r\n            state.nearbyUsersIDs = nearbyUsersIDs;\r\n        },\r\n        setLanguageFilter: (state, languageFilter) => {\r\n            state.languageFilter = languageFilter;\r\n        },\r\n        setLocationFilter: (state, locationFilter) => {\r\n            state.locationFilter = locationFilter;\r\n        },\r\n        setSearchByUsernameFilter: (state, searchByUsernameFilter) => {\r\n            state.searchByUsernameFilter = searchByUsernameFilter;\r\n        },\r\n        setMaxDistanceFilter: (state, maxDistanceFilter) => {\r\n            state.maxDistanceFilter = maxDistanceFilter;\r\n        },\r\n        addUser(state, user) {\r\n            state.users[user.id] = user;\r\n        },\r\n        addSearchedUserID(state, userID) {\r\n            state.searchedUsersIDs.push(userID);\r\n        },\r\n        resetSearchedUsersIDs(state) {\r\n            state.searchedUsersIDs = [];\r\n        },\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRating(state, data) {\r\n            let userTo = state.users[data.id];\r\n\r\n            if (data.prev == null) {\r\n                //new rate\r\n                let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                newAvgRating += data.rating;\r\n                newAvgRating /= (userTo.numRatings + 1);\r\n                state.users[data.id].avgRating = newAvgRating;\r\n                state.users[data.id].numRatings = userTo.numRatings + 1;\r\n            } else {\r\n                if (data.rating == null) {\r\n                    //remove rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating - data.prev;\r\n                    if ((userTo.numRatings - 1) != 0)\r\n                        newAvgRating /= (userTo.numRatings - 1);\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                    state.users[data.id].numRatings = userTo.numRatings - 1;\r\n                } else {\r\n                    //modify rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating + data.rating - data.prev;\r\n                    if (userTo.numRatings != 0)\r\n                        newAvgRating /= userTo.numRatings;\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                }\r\n\r\n            }\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            context.commit('resetState');\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getSearchedUsers ~                                                        >\r\n        // To list searched users using pagination                                     >\r\n        // return: true/false (are there more users to show?)                          >\r\n        //----------------------------------------------------------------------------->\r\n        getSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                if (filters.location != null && filters.location != undefined && filters.maxDistance != null) {\r\n                    if (context.getters.getLastUserShowed == null) {\r\n                        context.dispatch('database/getNearbyUserIDs', {\r\n                            location: filters.location,\r\n                            maxDistance: filters.maxDistance\r\n                        })\r\n                            .then((ids) => {\r\n                                context.commit('setNearbyUsersIDs', ids);\r\n                                context.dispatch('getNearbyUsersProfiles')\r\n                                    .then(() => {\r\n                                        context.dispatch('areThereMoreNearbyUsers')\r\n                                            .then((areThereMore) => {\r\n                                                resolve(areThereMore);\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    } else {\r\n                        context.dispatch('getNearbyUsersProfiles')\r\n                            .then(() => {\r\n                                context.dispatch('areThereMoreNearbyUsers')\r\n                                    .then((areThereMore) => {\r\n                                        resolve(areThereMore);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    }\r\n                } else {\r\n                    context.dispatch('database/getNextUsersPage', {\r\n                        lastUserShowed: context.getters.getLastUserShowed,\r\n                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                        filters: filters\r\n                    })\r\n                        .then((data) => {\r\n                            context.commit('setLastUserShowed', data.newLastUserShowed);\r\n\r\n                            data.users.forEach(user => {\r\n                                context.commit('addUser', user);\r\n                                context.commit('addSearchedUserID', user.id);\r\n                            });\r\n                            if (data.users.length > 0) {\r\n\r\n                                context.dispatch('database/isNextUsersPageEmpty', {\r\n                                    lastUserShowed: context.getters.getLastUserShowed,\r\n                                    limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                    filters: filters\r\n                                })\r\n                                    .then((isEmpty) => {\r\n                                        if (data.users.length > 0 && data.users.length < Constants.SEARCHED_USERS_PAGE_SIZE\r\n                                            && !isEmpty) {\r\n                                            context.dispatch('database/getNextUsersPage', {\r\n                                                lastUserShowed: context.getters.getLastUserShowed,\r\n                                                limit: Constants.SEARCHED_USERS_PAGE_SIZE - data.users.length,\r\n                                                filters: filters\r\n                                            })\r\n                                                .then((data2) => {\r\n                                                    context.commit('setLastUserShowed', data2.newLastUserShowed);\r\n                                                    data2.users.forEach(user => {\r\n                                                        context.commit('addUser', user);\r\n                                                        context.commit('addSearchedUserID', user.id);\r\n                                                    });\r\n                                                    context.dispatch('database/isNextUsersPageEmpty', {\r\n                                                        lastUserShowed: context.getters.getLastUserShowed,\r\n                                                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                                        filters: filters\r\n                                                    })\r\n                                                        .then((isEmpty2) => {\r\n                                                            resolve(!isEmpty2);\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                }).catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                        } else {\r\n                                            resolve(!isEmpty);\r\n                                        }\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreNearbyUsers ~                                                 >\r\n        // To check if there are valid nearby users to show yet                        >\r\n        // return: true/false (are there more valid nearby users to show?)             >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreNearbyUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n                let lastUserShowed = context.getters.getLastUserShowed;\r\n                let i;\r\n\r\n                while (lastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    let aux = Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1;\r\n\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n\r\n                    }\r\n\r\n                    lastUserShowed = i - 1;\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then((userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (!user.registrationCompleted) {\r\n                                    isValid = false;\r\n                                }\r\n\r\n                                if (isValid) {\r\n                                    resolve(true);\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n\r\n                resolve(false);\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUsersProfiles ~                                                  >\r\n        // To show valid nearby users with pagination                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUsersProfiles(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let usersAdded = 0;\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n\r\n                while (usersAdded < Constants.SEARCHED_USERS_PAGE_SIZE && context.getters.getLastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    let i;\r\n                    let lastUserShowed = context.getters.getLastUserShowed;\r\n\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                        lastUserShowed = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n                    }\r\n\r\n                    context.commit('setLastUserShowed', i - 1);\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then(async (userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0,)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (isValid) {\r\n                                    context.commit('addUser', user);\r\n                                    context.commit('addSearchedUserID', user.id);\r\n                                    usersAdded++;\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetSearchedUsers ~                                                      >\r\n        // To reset variables related to user searching                                >\r\n        //----------------------------------------------------------------------------->\r\n        resetSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"resetSearchedUsersIDs\");\r\n                context.commit('setLastUserShowed', null);\r\n\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setFilters ~                                                              >\r\n        // To set the filtering values selected by the user for the searching          >\r\n        //----------------------------------------------------------------------------->\r\n        setFilters(context, filters) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"setGenderFilter\", filters.gender);\r\n                context.commit(\"setAgeRangeFilter\", filters.ageRange);\r\n                context.commit(\"setLanguageFilter\", filters.language);\r\n                context.commit(\"setMaxDistanceFilter\", filters.maxDistance);\r\n                context.commit(\"setLocationFilter\", filters.location);\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getUserByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfileByUID', id)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            context.commit('addUser', profileInfo);\r\n                            resolve(profileInfo);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting user by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetFilters ~                                                            >\r\n        // To reset the filtering values to default                                    >\r\n        //----------------------------------------------------------------------------->\r\n        resetFilters(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit(\"setGenderFilter\", \"O\");\r\n                context.commit(\"setAgeRangeFilter\", [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE]);\r\n                context.commit('setLanguageFilter', {\r\n                    filterBy: \"languageToLearn\",\r\n                    knownLanguage: \"all\",\r\n                    languageToLearn: \"all\"\r\n                });\r\n\r\n                context.commit(\"setLocationFilter\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setMaxDistanceFilter\", 3)\r\n                context.commit(\"setSearchByUsernameFilter\", null)\r\n\r\n                let filters = context.getters.getFilters;\r\n                filters[\"maxDistance\"] = null;\r\n\r\n                resolve(filters);\r\n            });\r\n        },\r\n\r\n\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database.js\";\r\nimport users from \"./users.js\";\r\nimport i18n from \"../../i18n\";\r\n\r\nlet alreadyAccountUsernameError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME');\r\nlet genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nlet gettingCurrentLocationError = i18n.t('messages.ERROR_GETTING_CURRENT_LOCATION');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----         ACCOUNTS & PROFILES INFO         -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        users\r\n    },\r\n    state: {\r\n        /* User account*/\r\n        id: null,\r\n        name: null,\r\n        lastName: null,\r\n        email: null,\r\n        chats: [],\r\n        role: 'user',\r\n\r\n        /* User profile */\r\n        // 1st part\r\n        username: null,\r\n        birthDate: null,\r\n        gender: null,\r\n        description: null,\r\n        avgRating: null,\r\n        numRatings: null,\r\n        // 2nd part\r\n        knownLanguages: null,\r\n        languagesToLearn: null,\r\n        // 3rd part\r\n        profileImg: null,\r\n\r\n        /* Geolocation info */\r\n        location: null,\r\n\r\n        /* Ratings info */\r\n        ratings: null,\r\n\r\n        /* Constants */\r\n        genderOptions: {\r\n            \"M\": {\r\n                img: \"img/genders/male.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg',\r\n            },\r\n            \"W\": {\r\n                img: \"img/genders/female.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg',\r\n            },\r\n            \"O\": {\r\n                img: \"img/genders/other.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg',\r\n            }\r\n        },\r\n        languageOptions: {\r\n            \"de\": {\r\n                img: \"img/flags/de.svg\"\r\n            },\r\n            \"zh\": {\r\n                img: \"img/flags/zh.svg\"\r\n            },\r\n            \"es\": {\r\n                img: \"img/flags/es.svg\"\r\n            },\r\n            \"fr\": {\r\n                img: \"img/flags/fr.svg\"\r\n            },\r\n            \"en\": {\r\n                img: \"img/flags/en.svg\"\r\n            },\r\n            \"it\": {\r\n                img: \"img/flags/it.svg\"\r\n            },\r\n            \"ja\": {\r\n                img: \"img/flags/ja.svg\"\r\n            },\r\n            \"pt\": {\r\n                img: \"img/flags/pt.svg\"\r\n            },\r\n            \"all\": {\r\n                img: \"img/flags/all.svg\"\r\n            },\r\n        },\r\n    },\r\n    getters: {\r\n        getName: (state) => {\r\n            return state.name;\r\n        },\r\n        getID: (state) => {\r\n            return state.id;\r\n        },\r\n        getLastName: (state) => {\r\n            return state.lastName;\r\n        },\r\n        getEmail: (state) => {\r\n            return state.email;\r\n        },\r\n        getRole: (state) => {\r\n            return state.role;\r\n        },\r\n        getChats: (state) => {\r\n            return state.chats;\r\n        },\r\n        getProfile: (state) => {\r\n            let data = {};\r\n\r\n            if (state.username) {\r\n                data = {\r\n                    username: state.username,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.birthDate) {\r\n                data = {\r\n                    birthDate: state.birthDate,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.gender) {\r\n                data = {\r\n                    gender: state.gender,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.description) {\r\n                data = {\r\n                    description: state.description,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.profileImg) {\r\n                data = {\r\n                    profileImg: state.profileImg,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.knownLanguages) {\r\n                data = {\r\n                    knownLanguages: state.knownLanguages,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.languagesToLearn) {\r\n                data = {\r\n                    languagesToLearn: state.languagesToLearn,\r\n                    ...data\r\n                }\r\n            }\r\n\r\n            data = {\r\n                avgRating: state.avgRating,\r\n                numRatings: state.numRatings,\r\n                ...data\r\n            }\r\n\r\n            return data;\r\n        },\r\n        getUsername: (state) => {\r\n            return state.username;\r\n        },\r\n        getBirthDate: (state) => {\r\n            return state.birthDate;\r\n        },\r\n        getGender: (state) => {\r\n            return state.gender;\r\n        },\r\n        getDescription: (state) => {\r\n            return state.description;\r\n        },\r\n        getProfileImg: (state) => {\r\n            return state.profileImg;\r\n        },\r\n        getAvgRating: (state) => {\r\n            return state.avgRating;\r\n        },\r\n        getNumRatings: (state) => {\r\n            return state.numRatings;\r\n        },\r\n        getKnownLanguages: (state) => {\r\n            return state.knownLanguages;\r\n        },\r\n        getLanguagesToLearn: (state) => {\r\n            return state.languagesToLearn;\r\n        },\r\n\r\n        getGenderImgByID: (state) => (id) => {\r\n            return state.genderOptions[id].img;\r\n        },\r\n        getGenderDefaultProfileImgByUserGender: (state) => {\r\n            if (null == state.gender) {\r\n                return state.genderOptions[\"O\"].defaultProfileImg;\r\n            } else {\r\n                return state.genderOptions[state.gender].defaultProfileImg;\r\n            }\r\n        },\r\n        getGenderOptionsAsArray: (state, getters) => {\r\n            let genderOptions = {\r\n                \"M\": {\r\n                    text: i18n.t('messages.TEXT_MAN'),\r\n                },\r\n                \"W\": {\r\n                    text: i18n.t('messages.TEXT_WOMAN'),\r\n                },\r\n                \"O\": {\r\n                    text: i18n.t('messages.TEXT_OTHER'),\r\n                }\r\n            };\r\n            return Object.keys(genderOptions).map(function (id) {\r\n                let text = genderOptions[id].text;\r\n                let img = getters.getGenderImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageImgByID: (state) => (id) => {\r\n            return state.languageOptions[id].img;\r\n        },\r\n        getLanguageOptionsAsArray: (state, getters) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_DE'),\r\n                },\r\n                \"zh\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ZH'),\r\n                },\r\n                \"es\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ES'),\r\n                },\r\n                \"fr\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_FR'),\r\n                },\r\n                \"en\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_EN'),\r\n                },\r\n                \"it\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_IT'),\r\n                },\r\n                \"ja\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_JA'),\r\n                },\r\n                \"pt\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_PT'),\r\n                },\r\n                \"all\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ALL'),\r\n                },\r\n            };\r\n            return Object.keys(state.languageOptions).map(function (id) {\r\n                let text = languageOptions[id].text;\r\n                let img = getters.getLanguageImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageFromLanguageOptionsByID: (state) => (id) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_DE'),\r\n                },\r\n                \"zh\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ZH'),\r\n                },\r\n                \"es\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ES'),\r\n                },\r\n                \"fr\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_FR'),\r\n                },\r\n                \"en\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_EN'),\r\n                },\r\n                \"it\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_IT'),\r\n                },\r\n                \"ja\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_JA'),\r\n                },\r\n                \"pt\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_PT'),\r\n                },\r\n                \"all\": {\r\n                    text: i18n.t('messages.TEXT_LANGUAGE_ALL'),\r\n                },\r\n            };\r\n\r\n            return {\r\n                ...state.languageOptions[id],\r\n                text: languageOptions[id].text\r\n            };\r\n        },\r\n        getLocation: (state) => {\r\n            return state.location;\r\n        },\r\n        getRatings: (state) => {\r\n            return state.ratings;\r\n        },\r\n        getRating: (state) => (id) => {\r\n            if (state.ratings) {\r\n                return state.ratings[id];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n    },\r\n    mutations: {\r\n        setIDe(state, id) {\r\n            state.id = id;\r\n        },\r\n        setName(state, name) {\r\n            state.name = name;\r\n        },\r\n        setLastName(state, lastName) {\r\n            state.lastName = lastName;\r\n        },\r\n        setEmail(state, email) {\r\n            state.email = email;\r\n        },\r\n        setRole(state, role) {\r\n            state.role = role;\r\n        },\r\n        setChats(state, chats) {\r\n            state.chats = chats;\r\n        },\r\n        setAccount(state, accountInfo) {\r\n            if (accountInfo.hasOwnProperty('email')) {\r\n                state.email = accountInfo.email;\r\n            }\r\n            if (accountInfo.hasOwnProperty('name')) {\r\n                state.name = accountInfo.name;\r\n            }\r\n            if (accountInfo.hasOwnProperty('lastName')) {\r\n                state.lastName = accountInfo.lastName;\r\n            }\r\n            if (accountInfo.hasOwnProperty('profileImg')) {\r\n                state.role = accountInfo.role;\r\n            }\r\n            if (accountInfo.hasOwnProperty('id')) {\r\n                state.id = accountInfo.id;\r\n            }\r\n            if (accountInfo.hasOwnProperty('chats')) {\r\n                state.chats = accountInfo.chats;\r\n            }\r\n        },\r\n        setUsername(state, username) {\r\n            state.username = username;\r\n        },\r\n        setBirthDate(state, birthDate) {\r\n            state.birthDate = birthDate;\r\n        },\r\n        setGender(state, gender) {\r\n            state.gender = gender;\r\n        },\r\n        setDescription(state, description) {\r\n            state.description = description;\r\n        },\r\n        setAvgRating(state, avgRating) {\r\n            state.avgRating = avgRating;\r\n        },\r\n        setNumRatings(state, numRatings) {\r\n            state.numRatings = numRatings;\r\n        },\r\n        setKnownLanguages(state, knownLanguages) {\r\n            state.knownLanguages = knownLanguages;\r\n        },\r\n        setLanguagesToLearn(state, languagesToLearn) {\r\n            state.languagesToLearn = languagesToLearn;\r\n        },\r\n        setProfileImg(state, profileImg) {\r\n            state.profileImg = profileImg;\r\n        },\r\n        setRatings(state, ratings) {\r\n            state.ratings = ratings;\r\n        },\r\n        setRating(state, data) {\r\n            if (state.ratings == null) {\r\n                state.ratings = {};\r\n            }\r\n            state.ratings[data.id] = data.rating;\r\n        },\r\n\r\n        setProfile(state, profileInfo) {\r\n            if (profileInfo) {\r\n\r\n                if (profileInfo.hasOwnProperty('username')) {\r\n                    state.username = profileInfo.username;\r\n                }\r\n                if (profileInfo.hasOwnProperty('birthDate')) {\r\n                    state.birthDate = profileInfo.birthDate;\r\n                }\r\n                if (profileInfo.hasOwnProperty('gender')) {\r\n                    state.gender = profileInfo.gender;\r\n                }\r\n                if (profileInfo.hasOwnProperty('description')) {\r\n                    state.description = profileInfo.description;\r\n                }\r\n                if (profileInfo.hasOwnProperty('avgRating')) {\r\n                    state.avgRating = profileInfo.avgRating;\r\n                }\r\n                if (profileInfo.hasOwnProperty('numRatings')) {\r\n                    state.numRatings = profileInfo.numRatings;\r\n                }\r\n                if (profileInfo.hasOwnProperty('knownLanguages')) {\r\n                    state.knownLanguages = profileInfo.knownLanguages;\r\n                }\r\n                if (profileInfo.hasOwnProperty('languagesToLearn')) {\r\n                    state.languagesToLearn = profileInfo.languagesToLearn;\r\n                }\r\n                if (profileInfo.hasOwnProperty('profileImg')) {\r\n                    state.profileImg = profileInfo.profileImg;\r\n                }\r\n            }\r\n        },\r\n        resetState(state) {\r\n            /* User account*/\r\n            state.id = null;\r\n            state.name = null;\r\n            state.lastName = null;\r\n            state.email = null;\r\n            state.role = 'user';\r\n            state.chats = [];\r\n\r\n            /* User profile */\r\n            // 1st part\r\n            state.username = null;\r\n            state.birthDate = null;\r\n            state.gender = null;\r\n            state.description = null;\r\n            state.avgRating = null;\r\n            state.numRatings = null;\r\n            // 2nd part\r\n            state.knownLanguages = null;\r\n            state.languagesToLearn = null;\r\n            // 3rd part\r\n            state.profileImg = null;\r\n\r\n            /* Ratings info */\r\n            state.ratings = null;\r\n\r\n            /* Geolocation info */\r\n            state.location = null;\r\n        },\r\n        setLocation(state, location) {\r\n            state.location = location;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init users state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n                        context.commit('setProfile', profileInfo);\r\n\r\n                        context.dispatch('database/getAccount')\r\n                            .then((accountInfo) => {\r\n                                context.commit('setAccount', accountInfo);\r\n                                context.dispatch('getRatings')\r\n                                    .then(() => {\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error)\r\n                                    });\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccount', data)\r\n                    .then(() => {\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                context.dispatch('database/setAccount', data)\r\n                                    .then(() => {\r\n                                        context.commit('setAccount', data);\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log('Error creating user account.');\r\n                                        reject(error)\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generateNotificationToken ~                                               >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generateNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/generatePushNotificationToken')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountNameAndLastName ~                                            >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountNameAndLastName(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountData', data)\r\n                    .then(() => {\r\n                        if (data.hasOwnProperty('name')) {\r\n                            context.commit('setName', data.name);\r\n                        }\r\n                        if (data.hasOwnProperty('lastName')) {\r\n                            context.commit('setLastName', data.lastName);\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountEmail', email)\r\n                    .then(() => {\r\n                        context.commit('setEmail', email);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword(context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountPassword', password)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log user in                                                              >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/login', data)\r\n                    .then(() => {\r\n                        context.commit('setAccount', data);\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserLogged ~                                                            >\r\n        // To determine if user is or is not logged                                    >\r\n        //----------------------------------------------------------------------------->\r\n        isUserLogged: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((isIt) => {\r\n                        resolve(isIt);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ logout ~                                                                  >\r\n        // To log user out                                                             >\r\n        //----------------------------------------------------------------------------->\r\n        logout(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/logout')\r\n                    .then(() => {\r\n                        context.dispatch('resetAppState', null, {root: true});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendEmailVerification')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending verification email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendPasswordResetEmail', email)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending password email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfEmailIsVerified ~                                                  >\r\n        // To check if email is verified                                               >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfEmailIsVerified(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isEmailVerified')\r\n                    .then((isVerified) => {\r\n                        resolve(isVerified);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if email is verified.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfUsernameIsAlreadyRegistered ~                                      >\r\n        // To check if a username is already in use                                    >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfUsernameIsAlreadyRegistered(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfileByUsername', username)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            resolve(true);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if username is already registered.');\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createProfile ~                                                           >\r\n        // To create user profile                                                      >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        createProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('checkIfUsernameIsAlreadyRegistered', data.username)\r\n                    .then((isAlreadyRegistered) => {\r\n                        if (isAlreadyRegistered) {\r\n                            reject(alreadyAccountUsernameError);\r\n                        } else {\r\n                            context.dispatch('database/setProfile', data)\r\n                                .then(() => {\r\n                                    context.commit('setUsername', data.username);\r\n                                    context.commit('setBirthDate', data.birthDate);\r\n                                    context.commit('setGender', data.gender);\r\n                                    context.commit('setDescription', data.description);\r\n                                    context.commit('setAvgRating', 0);\r\n                                    context.commit('setNumRatings', 0);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error creating user profile.');\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile data                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateProfile', data)\r\n                    .then(async () => {\r\n\r\n                        if (data.hasOwnProperty('username')) {\r\n                            context.commit('setUsername', data.username);\r\n                        }\r\n                        if (data.hasOwnProperty('description')) {\r\n                            context.commit('setDescription', data.description);\r\n                        }\r\n                        if (data.hasOwnProperty('gender')) {\r\n                            context.commit('setGender', data.gender);\r\n                        }\r\n                        if (data.hasOwnProperty('birthDate')) {\r\n                            context.commit('setBirthDate', data.birthDate);\r\n                        }\r\n                        if (data.hasOwnProperty('knownLanguages')) {\r\n                            context.commit('setKnownLanguages', data.knownLanguages);\r\n                        }\r\n                        if (data.hasOwnProperty('languagesToLearn')) {\r\n                            context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        }\r\n                        if (data.hasOwnProperty('profileImg')) {\r\n                            await context.dispatch('setProfileImg', data.profileImg).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setLanguages', data)\r\n                    .then(() => {\r\n                        context.commit('setKnownLanguages', data.knownLanguages);\r\n                        context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error setting user languages.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image                                                   >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n                Vue.nextTick(() => {\r\n\r\n                    context.dispatch('database/uploadProfileImg', img)\r\n                        .then((url) => {\r\n                            context.dispatch('database/setProfileImg', url)\r\n                                .then(() => {\r\n                                    context.commit('setProfileImg', url);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error setting user profile image.');\r\n                                    console.error(error)\r\n                                    reject(error);\r\n                                });\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('Error uploading user profile image.');\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setRegistrationCompleted', img)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error updating user registration state.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRegistrationState ~                                                    >\r\n        // To check what register info the user has already submitted                  >\r\n        //----------------------------------------------------------------------------->\r\n        getRegistrationState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n\r\n                        context.dispatch('checkRegistrationState', profileInfo)\r\n                            .then((state) => {\r\n                                context.commit('setProfile', profileInfo);\r\n                                resolve(state);\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log(error);\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkRegistrationState ~                                                  >\r\n        // To check registration state of a profile                                    >\r\n        // parameters: data {username, gender, description, avgRating, numRatings,     >\r\n        //                   knownLanguages, languagesToLearn, profileImg}             >\r\n        //----------------------------------------------------------------------------->\r\n        checkRegistrationState(context, data) {\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('checkIfEmailIsVerified')\r\n                    .then((isVerified) => {\r\n                        if (isVerified) {\r\n                            // Part 0 completed\r\n                            if (data && data.hasOwnProperty('username') && data.hasOwnProperty('gender')\r\n                                && data.hasOwnProperty('description') && data.hasOwnProperty('avgRating')\r\n                                && data.hasOwnProperty('numRatings')) {\r\n                                // Part 1 completed\r\n                                if (data.hasOwnProperty('knownLanguages') && data.hasOwnProperty('languagesToLearn')) {\r\n                                    // Part 2 completed\r\n                                    if (data.hasOwnProperty('profileImg')) {\r\n                                        // Part 3 completed\r\n                                        // Registration process completed\r\n                                        resolve('dashboard');\r\n                                    } else {\r\n                                        // State 3\r\n                                        resolve('set-your-profile-image');\r\n                                    }\r\n                                } else {\r\n                                    // State 2\r\n                                    resolve('fill-your-languages');\r\n                                }\r\n                            } else {\r\n                                // State 1\r\n                                resolve('fill-your-profile-info');\r\n                            }\r\n                        } else {\r\n                            // State 0\r\n                            resolve('email-verification');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getCurrentLocation ~                                                      >\r\n        // To get the current user location                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getCurrentLocation() {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                navigator.geolocation.getCurrentPosition(position => {\r\n                        resolve({\r\n                            lat: position.coords.latitude,\r\n                            lng: position.coords.longitude\r\n                        })\r\n                    },\r\n                    function (error) {\r\n                        console.error(error);\r\n                        reject(gettingCurrentLocationError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getRatings')\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRatings', ratingsInfo);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error retrieving user ratings.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ rateUser ~                                                                >\r\n        // To rate a user                                                              >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        rateUser(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/setRating', data)\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRating', data);\r\n                        context.commit('users/addRating', data);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        console.log('Error rating user.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get the current (or last) user location                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('getCurrentLocation')\r\n                    .then((currentLocation) => {\r\n                        context.commit('setLocation', currentLocation);\r\n                        context.dispatch('database/updateUserLocation', currentLocation)\r\n                            .then(() => {\r\n                                resolve(currentLocation);\r\n                            })\r\n                            .catch(() => {\r\n                                resolve(currentLocation);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        context.dispatch('database/getLocation')\r\n                            .then((location) => {\r\n                                context.commit('setLocation', location);\r\n                                resolve(location);\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        },\r\n\r\n    },\r\n\r\n};","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\nimport haversine from 'haversine-distance'\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                 EVENTS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        events: {},\r\n        eventsToShowIDs: [],\r\n        mapEventsToShowIDs: [],\r\n        lastEventShowed: null,\r\n        languageInvolvedFilter: \"all\",\r\n        eventsTab: 0\r\n    },\r\n    getters: {\r\n        getLanguageInvolvedFilter: (state) => {\r\n            return state.languageInvolvedFilter;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                languageInvolved: state.languageInvolvedFilter\r\n            };\r\n        },\r\n        getEvents: (state) => {\r\n            return state.events;\r\n        },\r\n        getEventsTab: (state) => {\r\n            return state.eventsTab;\r\n        },\r\n        getEventByID: (state) => (id) => {\r\n            return state.events[id];\r\n        },\r\n        getEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.eventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getMapEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.mapEventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getLastEventShowed: (state) => {\r\n            return state.lastEventShowed;\r\n        },\r\n        amIParticipating: (state) => (data) => {\r\n\r\n            let found = null;\r\n            if (state.events[data.eventID]) {\r\n                found = state.events[data.eventID].participants.find(participantID => participantID == data.userID);\r\n                return found != undefined;\r\n            }\r\n            return null;\r\n\r\n        },\r\n    },\r\n    mutations: {\r\n        setLanguageInvolvedFilter(state, languageInvolvedFilter) {\r\n            state.languageInvolvedFilter = languageInvolvedFilter;\r\n        },\r\n        setEventsTab(state, eventsTab) {\r\n            state.eventsTab = eventsTab;\r\n        },\r\n        resetState(state) {\r\n            state.events = {};\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.mapEventsToShowIDs.splice(0, state.mapEventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n            state.languageInvolvedFilter = \"all\";\r\n        },\r\n        resetEventsToShowIDs(state) {\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n        },\r\n        addEvent(state, event) {\r\n            state.events[event.id] = event;\r\n        },\r\n        addParticipantToEvent(state, data) {\r\n            if (-1 == state.events[data.eventID].participants.findIndex(participantID => participantID == data.userID)) {\r\n                state.events[data.eventID].participants.push(data.userID);\r\n            }\r\n        },\r\n        removeParticipantFromEvent(state, data) {\r\n            let searchedUserIndex = state.events[data.eventID].participants.findIndex(function (userID) {\r\n                return userID == data.userID;\r\n            });\r\n            state.events[data.eventID].participants.splice(searchedUserIndex, 1);\r\n        },\r\n        addEventToShow(state, eventID) {\r\n            state.eventsToShowIDs.push(eventID);\r\n        },\r\n        addMapEventToShow(state, eventID) {\r\n            state.mapEventsToShowIDs.push(eventID);\r\n        },\r\n        setEventsToShowIDs(state, eventsToShowIDs) {\r\n            state.eventsToShowIDs = eventsToShowIDs;\r\n        },\r\n        setLastEventShowed(state, lastEventShowed) {\r\n            state.lastEventShowed = lastEventShowed;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init events state info with the appropriate data                         >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getAllEvents')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        resetEventsToShowIDs(context){\r\n            context.commit('resetEventsToShowIDs');\r\n        },\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getNextEventsPage', {\r\n                    lastEventShowed: context.getters.getLastEventShowed,\r\n                    limit: Constants.EVENTS_PAGE_SIZE,\r\n                    filters: filters\r\n                })\r\n                    .then((data) => {\r\n                        context.commit('setLastEventShowed', data.newLastEventShowed);\r\n\r\n                        data.events.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                                distance = distance / 1000;\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                distance: distance\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addEventToShow', event.id);\r\n                        });\r\n\r\n                        if (data.events.length > 0) {\r\n                            context.dispatch('database/isNextEventsPageEmpty', {\r\n                                lastEventShowed: context.getters.getLastEventShowed,\r\n                                limit: Constants.EVENTS_PAGE_SIZE,\r\n                                filters: filters\r\n                            })\r\n                                .then((isEmpty) => {\r\n                                    resolve(!isEmpty);\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                        else{\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAllEvents ~                                                            >\r\n        // To get all events that will be celebrated                                   >\r\n        //----------------------------------------------------------------------------->\r\n        getAllEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getEventsToBeCelebrated')\r\n                    .then((eventsRetrieved) => {\r\n\r\n                        eventsRetrieved.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addMapEventToShow', event.id);\r\n                        });\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEventParticipants(context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let event = context.getters.getEventByID(eventID);\r\n                context.dispatch('database/getMultipleProfilesByUID', event.participants)\r\n                    .then((userProfiles) => {\r\n                        userProfiles.forEach(user => {\r\n                            context.commit('users/addUser', user);\r\n                        });\r\n                        resolve(userProfiles);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add user to an Event                                                     >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/addParticipantToEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"addParticipantToEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove user from an Event                                                >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/removeParticipantFromEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"removeParticipantFromEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getEventByID', id)\r\n                    .then((event) => {\r\n                        if (event) {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                lat: event.location.coordinates._lat,\r\n                                lng: event.location.coordinates._long,\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                distance: distance / 1000\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            resolve(event);\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting event by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n    },\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                  CHATS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        chats: {},\r\n        chatsToShowIDs: [],\r\n\r\n        chatListListener: null,\r\n        chatMessagesListeners: [],\r\n\r\n        usernameFilter: null\r\n    },\r\n    getters: {\r\n        getChatByID: (state) => (id) => {\r\n            return state.chats[id];\r\n        },\r\n        getChatsToShowIDs: (state) => {\r\n            return state.chatsToShowIDs;\r\n        },\r\n        getChatMessagesByChatID: (state, getters) => (chatID) => {\r\n            if (state.chats[chatID] != undefined) {\r\n                return state.chats[chatID].messages;\r\n            } else {\r\n                return [];\r\n            }\r\n        },\r\n        getUnreadMessagesByChatID: (state, getters) => (chatID) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n            let unreadMessages = [];\r\n\r\n            if (state.chats[chatID] != undefined) {\r\n                for (i = state.chats[chatID].messages.length - 1; i >= 0; i--) {\r\n                    if (state.chats[chatID].messages[i].sender != myID && !state.chats[chatID].messages[i].read) {\r\n                        unreadMessages.push(state.chats[chatID].messages[i].id);\r\n                    } else if (state.chats[chatID].messages[i].sender != myID && state.chats[chatID].messages[i].read) {\r\n                        break;\r\n                    } else if (state.chats[chatID].messages[i].sender == myID) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unreadMessages;\r\n        },\r\n        getUnreadMessages: (state, getters) => {\r\n            let i, count = 0;\r\n\r\n            state.chatsToShowIDs.forEach(c => {\r\n                count += getters.getUnreadMessagesByChatID(c).length;\r\n            });\r\n\r\n            return count;\r\n        },\r\n        getChatsToShow: (state, getters) => {\r\n            let chatsToShow = [];\r\n            let self = this;\r\n\r\n            if (state.usernameFilter == null) {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n                    auxChat.id = state.chats[chatID].id;\r\n                    auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                    chatsToShow.push(auxChat)\r\n                });\r\n            } else {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n\r\n                    let lowNotMe = getters.getUserByChatID(chatID).username.toLowerCase();\r\n\r\n                    if (lowNotMe.includes(state.usernameFilter.toLowerCase())) {\r\n                        auxChat.id = state.chats[chatID].id;\r\n                        auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                        chatsToShow.push(auxChat)\r\n                    }\r\n                });\r\n            }\r\n\r\n            return chatsToShow;\r\n        },\r\n        getUserByChatID: (state, getters) => (chatID) => {\r\n            let userID;\r\n            if (state.chats[chatID].users[0] == getters['user/getID']) {\r\n                userID = state.chats[chatID].users[1];\r\n            } else {\r\n                userID = state.chats[chatID].users[0];\r\n            }\r\n\r\n            return getters['users/getUserByID'](userID);\r\n        },\r\n\r\n        getNotReadMessagesCountByChatID: (state, getters) => (id) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n\r\n            for (i = state.chats[id].messages.length - 1; i >= 0; i--) {\r\n                if (state.chats[id].messages[i].sender != myID && !state.chats[id].messages[i].read) {\r\n                    count++;\r\n                } else if (state.chats[id].messages[i].sender != myID && state.chats[id].messages[i].read) {\r\n                    break;\r\n                } else if (state.chats[id].messages[i].sender == myID) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return count;\r\n        },\r\n\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.chats = {};\r\n            state.chatsToShowIDs.splice(0, state.chatsToShowIDs.length);\r\n\r\n            if (state.chatListListener != null && state.chatListListener != undefined) {\r\n                state.chatListListener();\r\n                state.chatListListener = null;\r\n            }\r\n\r\n            state.chatMessagesListeners.forEach(l => {\r\n                if (l != null && l != undefined) {\r\n                    l();\r\n                }\r\n            });\r\n\r\n            state.chatMessagesListeners.splice(0, state.chatMessagesListeners.length);\r\n        },\r\n        addChatMessagesListener(state, listener) {\r\n            state.chatMessagesListeners.push(listener);\r\n        },\r\n        addChat(state, chat) {\r\n            if (!state.chats[chat.id] || chat.messages.length > state.chats[chat.id].messages.length) {\r\n                Vue.set(state.chats, chat.id, chat);\r\n            }\r\n        },\r\n        updateChatMessages(state, data) {\r\n            for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n\r\n                let index = data.messages.findIndex(function (mMessage) {\r\n                    return mMessage.id === state.chats[data.chatID].messages[i].id;\r\n                });\r\n\r\n                if (index != -1) {\r\n                    Vue.set(state.chats[data.chatID].messages, i, data.messages[index]);\r\n                    data.messages.splice(index, 1);\r\n                    if (data.messages.length == 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        sortChatMessagesByDate(state, chatID) {\r\n\r\n            function compareChatMessagesByDate(a, b) {\r\n                let dateA = a.date;\r\n                let dateB = b.date;\r\n\r\n                if (dateA === null) {\r\n                    return 1;\r\n                } else if (dateB === null) {\r\n                    return -1;\r\n                }\r\n                if (dateB < dateA) {\r\n                    return 1;\r\n                }\r\n                if (dateB > dateA) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chats[chatID].messages.sort(compareChatMessagesByDate);\r\n        },\r\n        addChatToShow(state, chatID) {\r\n            if (-1 == state.chatsToShowIDs.findIndex(id => id == chatID)) {\r\n                state.chatsToShowIDs.push(chatID);\r\n            }\r\n        },\r\n        sortChatsToShowByLastMessage(state) {\r\n            function compareChatsByLastMessageDate(a, b) {\r\n                let chatALastMessageDate = null;\r\n                let chatBLastMessageDate = null;\r\n\r\n                if(state.chats[a].messages[state.chats[a].messages.length - 1]){\r\n                    chatALastMessageDate = state.chats[a].messages[state.chats[a].messages.length - 1].date;\r\n                }\r\n\r\n                if(state.chats[b].messages[state.chats[b].messages.length - 1]){\r\n                    chatBLastMessageDate = state.chats[b].messages[state.chats[b].messages.length - 1].date;\r\n                }\r\n\r\n                if (chatALastMessageDate < chatBLastMessageDate) {\r\n                    return 1;\r\n                }\r\n                if (chatALastMessageDate > chatBLastMessageDate) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chatsToShowIDs.sort(compareChatsByLastMessageDate);\r\n        },\r\n\r\n        setUsernameFilter(state, usernameFilter) {\r\n            state.usernameFilter = usernameFilter;\r\n        },\r\n\r\n        setChatListListener(state, chatListListener) {\r\n            state.chatListListener = chatListListener;\r\n        },\r\n\r\n        pushChatMessages(state, data) {\r\n            data.messages.forEach((mp) => {\r\n                if (mp.date != null && mp.date != undefined) {\r\n                    if (state.chats[data.chatID].messages.length == 0) {\r\n                        Vue.set(state.chats[data.chatID].messages, 0, mp);\r\n                    } else {\r\n                        let alreadyAdded = false;\r\n\r\n                        for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n                            if (mp.date != null && mp.date != undefined && (\r\n                                (state.chats[data.chatID].messages[i].date < mp.date && !state.chats[data.chatID].messages[i + 1] && state.chats[data.chatID].messages[i].id != mp.id)\r\n                                || (state.chats[data.chatID].messages[i].date < mp.date && state.chats[data.chatID].messages[i + 1].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id && state.chats[data.chatID].messages[i + 1].id != mp.id))) {\r\n                                state.chats[data.chatID].messages.splice(i + 1, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            } else if (mp.date != null && mp.date != undefined && i == 0 && state.chats[data.chatID].messages[i].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id) {\r\n                                state.chats[data.chatID].messages.splice(i, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!alreadyAdded && state.chats[data.chatID].messages.length == 0) {\r\n                            state.chats[data.chatID].messages.push(mp);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            //state.chats[data.chatID].messages = state.chats[data.chatID].messages.concat(data.messages);\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init chats state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context, getters) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('createChatListeners', context.getters['user/getChats'])\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatListChange ~                                                    >\r\n        // To manage the event of changes in a chat-list                               >\r\n        // parameters required: user whose chat list we are managing                   >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatListChange(context, user) {\r\n            return new Promise(async function (resolve, reject) {\r\n\r\n                for (const chatID of user.chats) {\r\n                    if (-1 == context.getters.getChatsToShowIDs.findIndex(id => id == chatID) &&\r\n                        (!context.state.chats.hasOwnProperty(chatID) || context.state.chats[chatID].messages.length == 0)) {\r\n                        // It is new\r\n                        await context.dispatch('database/getChatByID', chatID)\r\n                            .then(async (chat) => {\r\n                                chat = {\r\n                                    ...chat,\r\n                                    messages: []\r\n                                }\r\n\r\n                                let userID;\r\n\r\n                                if (chat.users[0] == context.getters['user/getID']) {\r\n                                    userID = chat.users[1];\r\n                                } else {\r\n                                    userID = chat.users[0];\r\n                                }\r\n\r\n                                await context.dispatch('users/getUserByID', userID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChat\", chat);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                        cch\r\n                                    });\r\n\r\n\r\n                                // Create messages listener\r\n                                await context.dispatch('database/createChatMessagesListener', chatID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChatToShow\", chat.id);\r\n                                        context.commit(\"sortChatsToShowByLastMessage\");\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatMessagesChange ~                                                >\r\n        // To manage the event of changes in user chat messages                        >\r\n        // parameters required: chatMessages                                           >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatMessagesChange(context, chatMessages) {\r\n            return new Promise(function (resolve, reject) {\r\n                    context.commit('addChatMessagesListener', chatMessages.listener);\r\n\r\n                    let newMessages = [];\r\n                    let modifiedMessagesToRead = [];\r\n                    let modifiedMessagesDated = [];\r\n\r\n                    chatMessages.messages.forEach((m) => {\r\n                        if (m.change == \"added\" && m.date) {\r\n                            newMessages.push(m);\r\n                        } else if (m.change == \"modified\" && m.read && m.date) {\r\n                            modifiedMessagesToRead.push(m);\r\n                        } else if (m.change == \"modified\" && !m.read && m.date) {\r\n                            modifiedMessagesDated.push(m);\r\n                        }\r\n                    });\r\n\r\n                    if (newMessages.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: newMessages});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesDated.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesDated});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesToRead.length > 0) {\r\n                        context.commit('updateChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesToRead});\r\n                    }\r\n\r\n                    context.commit(\"sortChatsToShowByLastMessage\");\r\n                    resolve();\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setChatMessagesToReadByChatID ~                                           >\r\n        // To set messages in chat to read state                                       >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setChatMessagesToReadByChatID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let unreadMessages = context.getters.getUnreadMessagesByChatID(chatID);\r\n\r\n                context.dispatch('database/setMessagesToRead', {chatID: chatID, messages: unreadMessages})\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendNewChatMessage ~                                                      >\r\n        // To send a chat message                                                      >\r\n        // parameters required: {chatID, users, messageText}                           >\r\n        //----------------------------------------------------------------------------->\r\n        sendNewChatMessage(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let chat = context.getters.getChatByID(data.chatID);\r\n\r\n                let result;\r\n\r\n                if (context.getters.getChatByID(data.chatID).messages.length == 0) {\r\n                    result = context.dispatch('database/addChat', {id: data.chatID, users: chat.users});\r\n                } else {\r\n                    result = Promise.resolve();\r\n                }\r\n\r\n                result.then(() => {\r\n                    context.dispatch('database/addMessagesToChat', {\r\n                        chatID: data.chatID,\r\n                        message: {sender: context.getters['user/getID'], text: data.messageText}\r\n                    }).then(function () {\r\n                        resolve();\r\n                    }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatListeners ~                                                     >\r\n        // To create listeners for the chats of the user                               >\r\n        //----------------------------------------------------------------------------->\r\n        createChatListeners: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccountListener', context.getters['user/getID'])\r\n                    .then(() => {\r\n                        if (context.state.chatListListener != null && context.state.chatListListener != undefined) {\r\n                            context.state.chatListListener();\r\n                        }\r\n                        context.commit('setChatListListener', user.listener);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        }\r\n    },\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n\r\n////////////////////////////////////////////////////////\r\n//-----               APP RANKING                -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions,\r\n        users,\r\n        user\r\n    },\r\n    state: {\r\n        lastUserShowed: -1,\r\n        rankingUsers: [],\r\n        rankingUsersIDs: [],\r\n        rankingUser: null,\r\n    },\r\n    getters: {\r\n\r\n        getRankingUsersToShow: (state, getters) => {\r\n            let rus = [];\r\n\r\n            let i = 0;\r\n            state.rankingUsersIDs.forEach(uid => {\r\n                let ru = {\r\n                    ...getters['users/getUserByID'](uid)\r\n                };\r\n\r\n                ru[\"score\"] = state.rankingUsers[i].score;\r\n                ru[\"position\"] = state.rankingUsers[i].position;\r\n\r\n                rus.push(ru);\r\n                i++;\r\n            });\r\n\r\n            return rus;\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getRankedUserByIndex: (state) => (index) => {\r\n            return state.rankingUsers[index];\r\n        },\r\n        getRankingUsers: (state) => {\r\n            return state.rankingUsers;\r\n        },\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.lastUserShowed = -1;\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n            state.rankingUser = null;\r\n        },\r\n        setRankingUser(state, rankingUser) {\r\n            state.rankingUser = rankingUser;\r\n        },\r\n        setRankingUsers(state, rankingUsers) {\r\n            rankingUsers.forEach(r => {\r\n                state.rankingUsers.push(r);\r\n            });\r\n        },\r\n        resetRankingUsers(state, rankingUsers) {\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n        },\r\n        resetRankingUsersIDs(state, rankingUsers) {\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n        },\r\n\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRankingUserID(state, rankingUserID) {\r\n            state.rankingUsersIDs.push(rankingUserID);\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init ranking state info with the appropriate data                        >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getRankingUsers')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRankingUsers ~                                                         >\r\n        // To get top 100 ranking users and current user position in ranking           >\r\n        //----------------------------------------------------------------------------->\r\n        getRankingUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getTop100RankingUsers')\r\n                    .then((top100Users) => {\r\n                        let userID = context.getters['user/getID'];\r\n\r\n                        let userIndex = top100Users.findIndex(user => {\r\n                            return user.id == userID;\r\n                        });\r\n\r\n                        context.commit('setRankingUsers', top100Users);\r\n\r\n                        if (userIndex == -1) {\r\n                            context.dispatch('database/getUserRankingPositionByID', userID)\r\n                                .then((user) => {\r\n                                    context.commit('setRankingUser', user);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getPagedRankingUsers ~                                                    >\r\n        // To get page-size users from the group of ranking users retrieved            >\r\n        //----------------------------------------------------------------------------->\r\n        getPagedRankingUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                let pageEnding = newUserShowed + Constants.RANKING_PAGE_SIZE;\r\n\r\n                while (newUserShowed < pageEnding && newUserShowed < context.getters.getRankingUsers.length) {\r\n                    let user = context.getters.getRankedUserByIndex(newUserShowed);\r\n\r\n                    await context.dispatch('users/getUserByID', user.id)\r\n                        .then(() => {\r\n                            context.commit(\"addRankingUserID\", user.id);\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                    newUserShowed++;\r\n                }\r\n\r\n                context.commit('setLastUserShowed', newUserShowed - 1);\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreRankingUsersToShow ~                                          >\r\n        // To check if there are ranking users left to show                            >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreRankingUsersToShow(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport users from \"./modules/users\";\r\nimport events from \"./modules/events\";\r\nimport user from \"./modules/user\";\r\nimport chats from \"./modules/chats\";\r\nimport ranking from \"./modules/ranking\";\r\nimport database from \"./modules/database\";\r\nimport permissions from \"./modules/permissions\";\r\n\r\nexport default new Vuex.Store({\r\n    modules: {\r\n        user,\r\n        users,\r\n        events,\r\n        chats,\r\n        ranking,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        appInfoLoaded: false,\r\n    },\r\n    getters: {\r\n        getAppInfoLoaded: (state) => {\r\n            return state.appInfoLoaded;\r\n        },\r\n    },\r\n    mutations: {\r\n        setAppInfoLoaded(state, appInfoLoaded) {\r\n            state.appInfoLoaded = appInfoLoaded;\r\n        },\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLoggedUser ~                                                           >\r\n        // To get user logged                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getLoggedUser: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((user) => {\r\n                        resolve(user);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset all modules state info                                             >\r\n        //----------------------------------------------------------------------------->\r\n        resetAppState: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                if (context.getters.getAppInfoLoaded) {\r\n                    let promises = [];\r\n\r\n                    promises.push(context.dispatch('user/resetState'));\r\n                    promises.push(context.dispatch('users/resetState'));\r\n                    promises.push(context.dispatch('chats/resetState'));\r\n                    promises.push(context.dispatch('events/resetState'));\r\n                    promises.push(context.dispatch('ranking/resetState'));\r\n                    promises.push(context.dispatch('permissions/resetState'));\r\n\r\n                    Promise.all(promises).then(() => {\r\n                        console.log('state successfully reseted.');\r\n                        context.commit('setAppInfoLoaded', false);\r\n                        resolve();\r\n                    })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            console.log('Error resetting state.');\r\n                            reject(this.$i18n.t('messages.ERROR_GENERIC_PROBLEM'));\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initAppInfo ~                                                             >\r\n        // To init the necessary info to init the app for a logged user                >\r\n        //----------------------------------------------------------------------------->\r\n        initAppInfo: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('user/isUserLogged')\r\n                    .then((isUserLogged) => {\r\n                        if (isUserLogged && !context.getters.getAppInfoLoaded) {\r\n                            context.dispatch('user/initState')\r\n                                .then(() => {\r\n                                    console.log('user module state successfully initiated.');\r\n                                    context.dispatch('chats/initState')\r\n                                        .then(() => {\r\n                                            console.log('chats module state successfully initiated.');\r\n                                            context.dispatch('ranking/initState')\r\n                                                .then(() => {\r\n                                                    console.log('ranking module state successfully initiated.');\r\n                                                    context.dispatch('events/initState')\r\n                                                        .then(() => {\r\n                                                            console.log('events module state successfully initiated.');\r\n                                                            context.commit('setAppInfoLoaded', true);\r\n                                                            resolve();\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                })\r\n                                                .catch((error) => {\r\n                                                    reject(error);\r\n                                                });\r\n                                        })\r\n                                        .catch((error) => {\r\n                                            reject(error);\r\n                                        });\r\n\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error initiating users module state.');\r\n                        reject(error);\r\n                    });\r\n            })\r\n\r\n        },\r\n\r\n\r\n    },\r\n});\r\n","import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport firebase from \"firebase\";\r\nimport Home from './views/Home.vue'\r\nimport store from './store/store.js'\r\n\r\nVue.use(Router)\r\n\r\nconst router = new Router({\r\n    /*mode: 'history',*/\r\n    base: process.env.BASE_URL,\r\n    routes: [\r\n        {\r\n            //To redirect all routes that do not exist to /home\r\n            path: '*',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            //To redirect root route to /home\r\n            path: '/',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            path: '/home',\r\n            name: 'home',\r\n            component: Home\r\n        },\r\n        {\r\n            path: '/login',\r\n            name: 'login',\r\n            component: () => import('./views/Accounts/Login.vue'),\r\n        },\r\n        {\r\n            path: '/sign-up',\r\n            name: 'signUp',\r\n            component: () => import('./views/Accounts/SignUp.vue'),\r\n        },\r\n        {\r\n            path: '/email-verification',\r\n            name: 'emailVerification',\r\n            component: () => import('./views/Accounts/EmailVerification.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-profile-info',\r\n            name: 'fillYourProfileInfo',\r\n            component: () => import('./views/Accounts/FillYourProfileInfo.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-languages',\r\n            name: 'fillYourLanguages',\r\n            component: () => import('./views/Accounts/FillYourLanguages.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/set-your-profile-image',\r\n            name: 'setYourProfileImage',\r\n            component: () => import('./views/Accounts/SetYourProfileImage.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/send-change-password-email',\r\n            name: 'sendChangePasswordEmail',\r\n            component: () => import('./views/Accounts/SendChangePasswordEmail.vue'),\r\n            meta: {\r\n                requiresAuth: false\r\n            }\r\n        },\r\n        {\r\n            path: '/dashboard',\r\n            name: 'dashboard',\r\n            redirect: {name: 'profileHome'},\r\n            meta: {requiresAuth: true},\r\n            component: () => import('./views/Dashboard.vue'),\r\n            children: [\r\n                {\r\n                    path: 'ranking',\r\n                    name: 'rankingHome',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/Ranking/RankingHome.vue'),\r\n                },\r\n                {\r\n                    path: 'ranking/user/:id/',\r\n                    name: 'userProfileRanking',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'events',\r\n                    name: 'eventsHome',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventsHome.vue'),\r\n                },\r\n                {\r\n                    path: 'event/:id/',\r\n                    name: 'eventDescription',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventDescription.vue'),\r\n                },\r\n                {\r\n                    path: 'search',\r\n                    name: 'searchHome',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchHome.vue'),\r\n                },\r\n                {\r\n                    path: 'search/filter',\r\n                    name: 'searchFilter',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchFilter.vue'),\r\n                },\r\n                {\r\n                    path: 'search/user/:id/',\r\n                    name: 'userProfileSearch',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'chats',\r\n                    name: 'chatHome',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatHome.vue'),\r\n                },\r\n                {\r\n                    path: 'chats/chat/:id/',\r\n                    name: 'chatWithUser',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatWithUser.vue'),\r\n                },\r\n                {\r\n                    path: 'chats/user/:id/',\r\n                    name: 'userProfileChat',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/UserProfile.vue'),\r\n                },\r\n                {\r\n                    path: 'profile',\r\n                    name: 'profileHome',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileHome.vue'),\r\n                },\r\n                {\r\n                    path: 'profile/:id/edit',\r\n                    name: 'profileEdit',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileEdit.vue')\r\n                },\r\n                {\r\n                    path: 'settings',\r\n                    name: 'settings',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsHome.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account',\r\n                    name: 'settingsAccount',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccount.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/name-and-last-name',\r\n                    name: 'settingsAccountEditNameAndLastName',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditNameAndLastName.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/email',\r\n                    name: 'settingsAccountEditEmail',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditEmail.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/password-verification',\r\n                    name: 'settingsAccountPasswordVerification',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountPasswordVerification.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/password',\r\n                    name: 'settingsAccountEditPassword',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditPassword.vue')\r\n                },\r\n                {\r\n                    path: 'settings/language',\r\n                    name: 'settingsLanguage',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsLanguage.vue')\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n});\r\n\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n    const currentUser = firebase.auth().currentUser;\r\n    const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\r\n    if (requiresAuth && !currentUser) {\r\n        next('home');\r\n    } else if ((requiresAuth && currentUser && (to.name !== from.name) && (!to.path.startsWith('/dashboard') || !from.path.startsWith('/dashboard'))) || (!requiresAuth && currentUser)) {\r\n        store.dispatch('user/getRegistrationState').then(registrationState => {\r\n            if (to.path.startsWith('/' + registrationState)) {\r\n                next()\r\n            } else if (from.path.startsWith('/' + registrationState)) {\r\n                next({name: from.name});\r\n            } else {\r\n                next({path: '/' + registrationState});\r\n            }\r\n        });\r\n        //next()\r\n    }\r\n    else {\r\n        next();\r\n    }\r\n\r\n});\r\n\r\nexport default router;\r\n","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}firebase-messaging-sw.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","import Vue from 'vue';\nimport Vuetify from 'vuetify/lib';\n\n\nVue.use(Vuetify);\n\nexport default new Vuetify({\n    icons: {\n        iconfont: 'mdi',\n    },\n    theme: {\n        themes: {\n            light: {\n                primary: '#00abba',\n                secondary: '#003c4d',\n                thirdary: '#017394',\n                accent: '#82B1FF',\n                error: '#FF5252',\n                info: '#2196F3',\n                success: '#4CAF50',\n                warning: '#FFC107',\n            }\n        }\n    }\n});\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store/store'\r\nimport './registerServiceWorker'\r\nimport vuetify from './plugins/vuetify';\r\nimport firebase from \"firebase\";\r\nimport VueChatScroll from 'vue-chat-scroll'\r\nVue.use(VueChatScroll)\r\nimport VueI18n from 'vue-i18n'\r\nVue.use(VueI18n)\r\nimport * as VueGoogleMaps from \"vue2-google-maps\";\r\nimport $ from 'jquery'\r\nimport './assets/css/main.css';\r\nimport i18n from \"./i18n\";\r\n\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: \"AIzaSyBYhPYAZkG6ML2kRArdK8xITPrZWzF0JSw\",\r\n    libraries: \"places\" // necessary for places input\r\n  }\r\n});\r\n\r\n\r\nVue.config.productionTip = false\r\n\r\nlet app = '';\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyABGil2afckXxQ127FS8fW6y5phy1wzd6g\",\r\n  authDomain: \"tfg-vue-m3m.firebaseapp.com\",\r\n  databaseURL: \"https://tfg-vue-m3m.firebaseio.com\",\r\n  projectId: \"tfg-vue-m3m\",\r\n  storageBucket: \"tfg-vue-m3m.appspot.com\",\r\n  messagingSenderId: \"144506012173\",\r\n  appId: \"1:144506012173:web:8a58aa4b50d8b336184b44\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// Initialize Cloud Firestore through Firebase\r\nlet db = firebase.firestore();\r\n\r\n// Disable deprecated features\r\ndb.settings({\r\n  timestampsInSnapshots: true\r\n});\r\n\r\ndb.enablePersistence({experimentalTabSynchronization:true})\r\n\r\nconst storage = firebase.storage()\r\n\r\nconst messaging = firebase.messaging()\r\n\r\nexport default {\r\n  db,\r\n  storage,\r\n  messaging,\r\n  i18n,\r\n};\r\n\r\n\r\nfirebase.auth().onAuthStateChanged(() => {\r\n  if (!app) {\r\n    app = new Vue({\r\n      router,\r\n      store,\r\n      vuetify,\r\n      i18n,\r\n      render: h => h(App)\r\n    }).$mount('#app');\r\n  }\r\n})","module.exports = __webpack_public_path__ + \"img/WhiteLogoWeBabble.7ac0fe89.png\";","\r\nexport default {\r\n    messages: {\r\n        es: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'Parece que ha habido un problema con tu petición. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'Parece que ha habido un problema de conexión. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'Parece que ha habido un problema con la base de datos. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'Ya existe una cuenta registrada con ese E-mail. Si es tuya, prueba a iniciar sesión-',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'Ya existe un usuario con ese nombre.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'No existe una cuenta registrada con este E-mail o la contraseña es incorrecta.',\r\n                ERROR_UPLOADING_IMAGE: 'Error subiendo la imagen.',\r\n                ERROR_SOMETHING_HAPPENED: 'Parece que ha ocurrido un error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'Lo sentimos, la API FileReader no está soportada.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Las contraseñas no coinciden',\r\n                ERROR_TOO_MANY_REQUESTS: 'Parece que has realizado demasiadas peticiones en poco tiempo. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'Parece que la contraseña introducida no coincide con su contraseña actual.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'Parece que no hay ninguna cuenta registrada con este E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema accediendo a su ubicación actual.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'Parece que ha habido un problema: No se ha podido guardar su valoración.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'Parece que ha habido un problema al cargar el ranking. Por favor, comprueba tu conexión.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema: no se ha podido obtener tu localizacion actual.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'Parece que ha habido un problema: no se han podido obtener los usuarios cercanos.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'Parece que ha habido un problema: no se han podido obtener los eventos.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'Este campo es obligatorio',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Mínimo 5 caracteres',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Máximo 14 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Mínimo 5 caracteres para realizar la búsqueda',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Mínimo 20 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Mínimo 8 caracteres',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'Debes tener al menos {age} años.',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Por favor, selecciona una imagen',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'Para poder continuar, completa el proceso de verificación a través del enlace que hemos enviado a tu E-mail:',\r\n\r\n                /* TEXTS */\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: '¿Qué idiomas buscas mejorar?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Idiomas que quieres practicar',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: '¿Qué idiomas hablas con soltura?',\r\n                TEXT_MOTHER_LANGUAGES: 'Idiomas maternos',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Idioma que busca mejorar',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Idioma que quiere practicar',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Idioma que habla con soltura',\r\n                TEXT_MOTHER_LANGUAGE: 'Idioma materno',\r\n                TEXT_LANGUAGE: 'Idioma',\r\n                TEXT_GENDER: 'Género',\r\n                TEXT_DISTANCE: 'Distancia',\r\n                TEXT_AGE: 'Edad',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filtrar por idioma materno',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filtrar por idioma que quiere practicar',\r\n                TEXT_SEARCH: 'Buscar',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No se han encontrado usuarios que cumplan con los requisitos.',\r\n                TEXT_FILTERS: 'Filtros',\r\n                TEXT_RATE_USER: 'Valora al usuario',\r\n                TEXT_YOU: 'Tú',\r\n                TEXT_CANCEL: 'Cancelar',\r\n                TEXT_RATE: 'Valorar',\r\n                TEXT_REMOVE: 'Eliminar',\r\n                TEXT_NO_LIMIT: 'Sin límite',\r\n                TEXT_REMOVE_FILTERS: 'Eliminar filtros',\r\n                TEXT_YOUR_PROFILE: 'Tu perfil',\r\n                TEXT_EDIT: 'Editar',\r\n                TEXT_EDIT_PROFILE: 'Editar perfil',\r\n                TEXT_USERS: 'Usuarios',\r\n                TEXT_TO_FILTER: 'Filtrar',\r\n                TEXT_EVENTS: 'Eventos',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Cerrar',\r\n                TEXT_SHOW_USERS: 'Mostrar usuarios',\r\n                TEXT_OF: 'de',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Crea tu cuenta',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Crear una cuenta',\r\n                TEXT_NAME: 'Nombre',\r\n                TEXT_LASTNAME: 'Apellidos',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'Correo electrónico',\r\n                TEXT_PASSWORD: 'Contraseña',\r\n                TEXT_REPEAT_PASSWORD: 'Repite la contraseña',\r\n                TEXT_REGISTER: 'Registrar',\r\n                TEXT_REGISTER_NOW: '¡Regístrate ahora!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: '¿Ya tienes una cuenta?',\r\n                TEXT_ACCESS_NOW: '¡Accede ahora!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Accede a tu cuenta',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verifica tu E-mail',\r\n                TEXT_USERNAME: 'Nombre de usuario',\r\n                TEXT_FILL_YOUR_PROFILE: 'Rellena tu perfil',\r\n                TEXT_BIRTHDATE: 'Fecha de nacimiento',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Cuéntanos un poco sobre ti',\r\n                TEXT_TO_CONTINUE: 'Continuar',\r\n                TEXT_YOUR_LANGUAGES: 'Tus idiomas',\r\n                TEXT_WOMAN: 'Mujer',\r\n                TEXT_MAN: 'Hombre',\r\n                TEXT_ANY: 'Cualquiera',\r\n                TEXT_OTHER: 'Otro',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Elige tu foto de perfil',\r\n                TEXT_PROFILE_IMAGE: 'Foto de perfil',\r\n                TEXT_EMAIL_NOT_VALID: 'E-mail no válido',\r\n                TEXT_USERNAME_NOT_VALID: 'Nombre de usuario no válido',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: '¿Todavía no tienes una cuenta?',\r\n                TEXT_TO_LOG_IN: 'Iniciar sesión',\r\n                TEXT_TO_LOG_OUT: 'Cerrar sesión',\r\n                TEXT_RESEND_EMAIL: 'Volver a enviar E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'Va a salir de su cuenta',\r\n                TEXT_CONFIRM: 'Confirmar',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: '¿Está seguro de que quiere cerrar sesión?',\r\n                TEXT_PROFILE_INFO: 'Información de perfil',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Idiomas a practicar',\r\n                TEXT_SAVE: 'Guardar',\r\n                TEXT_SETTINGS: 'Configuración e información',\r\n                TEXT_ACCOUNT: 'Cuenta',\r\n                TEXT_PERMISSIONS: 'Permisos',\r\n                TEXT_NAME_AND_LASTNAME: 'Nombre y apellidos',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Cambiar nombre y apellidos',\r\n                TEXT_CHANGE_EMAIL: 'Cambiar correo electrónico',\r\n                TEXT_UPDATE: 'Actualizar',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verifica tu contraseña',\r\n                TEXT_REMOVE_ACCOUNT: 'Borrar cuenta',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Vuelve a introducir tu contraseña de WeBabble para continuar.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Tu dirección de correo electrónico ha sido actualizada.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Tu contraseña ha sido actualizada.',\r\n                TEXT_CHANGE_PASSWORD: 'Cambiar contraseña',\r\n                TEXT_CURRENT_PASSWORD: 'Contraseña actual',\r\n                TEXT_NEW_PASSWORD: 'Nueva contraseña',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirmar la contraseña',\r\n                TEXT_UPDATE_PASSWORD: 'Actualizar contraseña',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Introduce tu E-mail y te ayudaremos a recuperar la contraseña:',\r\n                TEXT_RESET_PASSWORD: 'Restablecer contraseña',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'En un breve período de tiempo recibirás un email. Ábrelo y sigue las instrucciones para restablecer tu contraseña.',\r\n                TEXT_SPACE_YEARS: ' años',\r\n                TEXT_PARTICIPANTS: 'Participantes',\r\n                TEXT_NO_PARTICIPANTS_YET: 'Parece que todavía no se ha apuntado nadie. ¡Sé el primero!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'E-mail de verificación enviado.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'Parece que no hay usuarios que coincidan con tu búsqueda.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'Parece que no hay eventos disponibles.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'Parece que no tienes ningún chat todavía. ¡Comienza a hablar con algún usuario!',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'Parece que no tienes chats con usuarios que coincidan con tu búsqueda.',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Idiomas de los eventos',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'Parece que no has dado permiso para acceder a tu localización. Concédelo para poder disponer de esta funcionalidad.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'Te has apuntado a este evento.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'Has cancelado tu participación en este evento.',\r\n                TEXT_APP_LANGUAGE: 'Idioma',\r\n                TEXT_LANGUAGE_OF_APP: 'Idioma de la aplicación',\r\n                TEXT_LANGUAGE_DE: 'Alemán',\r\n                TEXT_LANGUAGE_ZH: 'Chino',\r\n                TEXT_LANGUAGE_ES: 'Español',\r\n                TEXT_LANGUAGE_FR: 'Francés',\r\n                TEXT_LANGUAGE_EN: 'Inglés',\r\n                TEXT_LANGUAGE_IT: 'Italiano',\r\n                TEXT_LANGUAGE_JA: 'Japonés',\r\n                TEXT_LANGUAGE_PT: 'Portugués',\r\n                TEXT_LANGUAGE_ALL: 'Cualquier idioma',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Aprender idiomas ahora es más fácil',\r\n            }\r\n        },\r\n        en: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'It seems that there has been a problem with your request. Please, try again later.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'It seems that there has been a connection problem. Please, try again later.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'It seems that there has been a database problem. Please, try again later.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'There is already an account registered with this E-mail. If this account is yours, try to log in.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'This username is already in use.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'There is no account registered with this E-mail or the password is incorrect.',\r\n                ERROR_UPLOADING_IMAGE: 'Error uploading the image.',\r\n                ERROR_SOMETHING_HAPPENED: 'It seems that there has been an error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'We are sorry, the FileReader API is not supported by your browser.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Passwords do not match.',\r\n                ERROR_TOO_MANY_REQUESTS: 'It seems that you made several request in a short time. Please, try again later.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'It seems that the introduced password does not match your current password.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'It seems that there is no account registered with this E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'It seems that there was a problem accessing your current location.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'It seems that there was a problem: your rate could not be submitted.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'It seems that there was a problem while loading Ranking. Please, check your connection.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'It seems that there was a problem: we could not access your current location.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'It seems that there was a problem: we could not retrieve nearby users.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'It seems that there was a problem: we could not retrieve events.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'This field is required.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Minimum 5 characters.',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Maximum 14 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Write at least 5 to search.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Minimum 20 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Minimum 8 characters.',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'You have to be at least {age} years old.',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Please, select an image.',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'In order to continue, complete the verification process through the link we have sent to your E-mail:',\r\n\r\n                /* TEXTS */\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: 'What languages do you want to improve?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Languages ​​you want to practice',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: 'What languages ​​do you speak fluently?',\r\n                TEXT_MOTHER_LANGUAGES: 'First languages',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Language you are looking to improve',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Language you want to practice',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Language you speak fluently',\r\n                TEXT_MOTHER_LANGUAGE: 'First language',\r\n                TEXT_LANGUAGE: 'Language',\r\n                TEXT_GENDER: 'Gender',\r\n                TEXT_DISTANCE: 'Distance',\r\n                TEXT_AGE: 'Age',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filter by mother tongue',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filter by language they want to practice.',\r\n                TEXT_SEARCH: 'Search',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No users found that meet the requirements.',\r\n                TEXT_FILTERS: 'Filters',\r\n                TEXT_RATE_USER: 'Rate user',\r\n                TEXT_YOU: 'You',\r\n                TEXT_CANCEL: 'Cancel',\r\n                TEXT_RATE: 'Rate',\r\n                TEXT_REMOVE: 'Remove',\r\n                TEXT_NO_LIMIT: 'Limitless',\r\n                TEXT_REMOVE_FILTERS: 'Remove filters',\r\n                TEXT_YOUR_PROFILE: 'Your profile',\r\n                TEXT_EDIT: 'Edit',\r\n                TEXT_EDIT_PROFILE: 'Edit profile',\r\n                TEXT_USERS: 'Users',\r\n                TEXT_TO_FILTER: 'Filter',\r\n                TEXT_EVENTS: 'Events',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Close',\r\n                TEXT_SHOW_USERS: 'Show users',\r\n                TEXT_OF: 'of',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Create your account',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Create an account',\r\n                TEXT_NAME: 'Name',\r\n                TEXT_LASTNAME: 'Last name',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'E-mail',\r\n                TEXT_PASSWORD: 'Password',\r\n                TEXT_REPEAT_PASSWORD: 'Repeat password',\r\n                TEXT_REGISTER: 'Sign up',\r\n                TEXT_REGISTER_NOW: 'Sign up now!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: 'Do you already have an account?',\r\n                TEXT_ACCESS_NOW: 'Access now!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Log in into your account',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verify your E-mail',\r\n                TEXT_USERNAME: 'Username',\r\n                TEXT_PROFILE_IMAGE: 'Profile image',\r\n                TEXT_FILL_YOUR_PROFILE: 'Fill your profile',\r\n                TEXT_BIRTHDATE: 'Date of birth',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Tell us a bit about yourself',\r\n                TEXT_TO_CONTINUE: 'Continue',\r\n                TEXT_YOUR_LANGUAGES: 'Your languages',\r\n                TEXT_WOMAN: 'Woman',\r\n                TEXT_MAN: 'Man',\r\n                TEXT_ANY: 'Any',\r\n                TEXT_OTHER: 'Other',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Choose your profile picture',\r\n                TEXT_EMAIL_NOT_VALID: 'Invalid E-mail',\r\n                TEXT_USERNAME_NOT_VALID: 'Invalid username',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: 'Have you forgotten your password?',\r\n                TEXT_TO_LOG_IN: 'Sign in',\r\n                TEXT_TO_LOG_OUT: 'Log out',\r\n                TEXT_RESEND_EMAIL: 'Resend E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'You are going to log out of your account.',\r\n                TEXT_CONFIRM: 'Confirm',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: 'Are you sure you want to log out?',\r\n                TEXT_PROFILE_INFO: 'Profile information',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Languages to practice',\r\n                TEXT_SAVE: 'Save',\r\n                TEXT_SETTINGS: 'Settings and information',\r\n                TEXT_ACCOUNT: 'Account',\r\n                TEXT_PERMISSIONS: 'Permissions',\r\n                TEXT_NAME_AND_LASTNAME: 'Name and last name',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Edit name and last name',\r\n                TEXT_CHANGE_EMAIL: 'Edit E-mail',\r\n                TEXT_UPDATE: 'Update',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verify your password',\r\n                TEXT_REMOVE_ACCOUNT: 'Remove account',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Re-enter your WeBabble password to continue.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Your E-mail address has been updated.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Your password address has been updated.',\r\n                TEXT_CHANGE_PASSWORD: 'Edit password',\r\n                TEXT_CURRENT_PASSWORD: 'Current password',\r\n                TEXT_NEW_PASSWORD: 'New password',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirm password',\r\n                TEXT_UPDATE_PASSWORD: 'Update password',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Enter your E-mail and we will help you recover your password:',\r\n                TEXT_RESET_PASSWORD: 'Restore password',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'In a short period of time you will receive an E-mail. Open it and follow the instructions to reset your password.',\r\n                TEXT_SPACE_YEARS: ' years old',\r\n                TEXT_PARTICIPANTS: 'Participants',\r\n                TEXT_NO_PARTICIPANTS_YET: 'It seems that no one has signed up yet. Be the first!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'Verification E-mail sent.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'There appear to be no users matching your search.',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'There appear to be no chats with users matching your search.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'There seem to be no events available.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'It looks like you do not have any chat yet. Start talking to a user!',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Events languages',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'It seems that you have not given permission to access your location. Grant it to have this functionality.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'You have signed up for this event.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'You have canceled your participation in this event.',\r\n                TEXT_APP_LANGUAGE: 'Language',\r\n                TEXT_LANGUAGE_OF_APP: 'Application language',\r\n                TEXT_LANGUAGE_DE: 'German',\r\n                TEXT_LANGUAGE_ZH: 'Chinese',\r\n                TEXT_LANGUAGE_ES: 'Spanish',\r\n                TEXT_LANGUAGE_FR: 'French',\r\n                TEXT_LANGUAGE_EN: 'English',\r\n                TEXT_LANGUAGE_IT: 'Italian',\r\n                TEXT_LANGUAGE_JA: 'Japanese',\r\n                TEXT_LANGUAGE_PT: 'Portuguese',\r\n                TEXT_LANGUAGE_ALL: 'Any language',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Learning languages is now easier',\r\n            }\r\n        }\r\n    },\r\n    dateTimeFormats: {\r\n        'en': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        },\r\n        'es': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        }\r\n    }\r\n}","import Vue from 'vue';\r\nimport VueI18n from 'vue-i18n';\r\nimport I18NMessages from \"./I18NMessages\";\r\nVue.use(VueI18n);\r\n\r\nlet localeLanguage = 'es';\r\n\r\nif(navigator.language === 'es' || navigator.language === 'es-ES'){\r\n    localeLanguage = 'es';\r\n}\r\nelse if(navigator.language === 'en' || navigator.language === 'en-US'){\r\n    localeLanguage = 'en';\r\n}\r\n\r\nconst i18n = new VueI18n({\r\n    locale: localeLanguage, // set locale\r\n    messages: I18NMessages.messages, // set locale messages\r\n    dateTimeFormats: I18NMessages.dateTimeFormats\r\n});\r\n\r\nexport default i18n;"],"sourceRoot":""}