{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?466e","webpack:///./src/views/Home.vue?18da","webpack:///./src/store/Constants.js","webpack:///./src/store/AuxMethods.js","webpack:///./src/App.vue?b588","webpack:///src/App.vue","webpack:///./src/App.vue?5b92","webpack:///./src/App.vue","webpack:///./src/views/Home.vue?37f6","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?231f","webpack:///./src/views/Home.vue","webpack:///./src/I18NMessages.js","webpack:///./src/i18n.js","webpack:///./src/store/modules/database.js","webpack:///./src/store/modules/permissions.js","webpack:///./src/store/modules/users.js","webpack:///./src/store/modules/user.js","webpack:///./src/store/modules/events.js","webpack:///./src/store/modules/chats.js","webpack:///./src/store/modules/ranking.js","webpack:///./src/store/store.js","webpack:///./src/router.js","webpack:///./src/registerServiceWorker.js","webpack:///./src/plugins/vuetify.js","webpack:///./src/main.js","webpack:///./src/assets/WhiteLogoWeBabble.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","RULE_MIN_VALUE_CHARACTERS_USERNAME","RULE_MAX_VALUE_CHARACTERS_USERNAME","RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_MIN_VALUE_AGE","RANKING_PAGE_SIZE","MAX_RANKING_PAGE_SIZE","SEARCHED_USERS_PAGE_SIZE","EVENTS_PAGE_SIZE","MIN_USER_AGE","MAX_USER_AGE","IMG_USER_PROFILE_HEADER","IMG_EMOJI_SAD_FACE","arraysContainSameElements","arr1","arr2","Array","isArray","arr1_aux","concat","sort","arr2_aux","shuffle","array","Math","random","emptyCallback","angleInRad","x","PI","generateChatID","id1","id2","chatID","_vm","this","_h","$createElement","_c","_self","staticStyle","_e","staticRenderFns","component","VApp","staticClass","attrs","_v","_s","sloganText","on","$event","$router","createAnAccountText","toLogInText","VBtn","VContainer","messages","es","ERROR_GENERIC_PROBLEM","ERROR_GENERIC_CONNECTION_PROBLEM","ERROR_GENERIC_DATABASE_PROBLEM","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL","ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME","ERROR_WRONG_EMAIL_PASSWORD_COMBINATION","ERROR_UPLOADING_IMAGE","ERROR_SOMETHING_HAPPENED","ERROR_API_FILEREADER_NOT_SUPPORTED","ERROR_PASSWORDS_DONT_MATCH","ERROR_TOO_MANY_REQUESTS","ERROR_TEXT_WRONG_PASSWORD","ERROR_NO_ACCOUNT_WITH_THIS_EMAIL","ERROR_GETTING_CURRENT_LOCATION","ERROR_COULD_NOT_SET_YOUR_RATING","ERROR_PROBLEM_RETRIEVING_RANKING","ERROR_PROBLEM_GETTING_CURRENT_LOCATION","ERROR_PROBLEM_GETTING_NEARBY_USERS","ERROR_PROBLEM_GETTING_EVENTS","RULE_TEXT_MANDATORY_FIELD","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME","RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING","RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION","RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD","RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER","RULE_INVALID_DATE","RULE_TEXT_SELECT_RECOMMENDED_ADDRESS","ASK_FOR_IMAGE_SELECTION","TEXT_VERIFICATION_EMAIL_SENT_TO","TEXT_FILL_FIELDS_CORRECTLY","TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE","TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE","TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGES","TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE","TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE","TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY","TEXT_MOTHER_LANGUAGE","TEXT_LANGUAGE","TEXT_GENDER","TEXT_DISTANCE","TEXT_AGE","TEXT_FILTER_BY_MOTHER_LANGUAGE","TEXT_FILTER_BY_LANGUAGE_TO_LEARN","TEXT_SEARCH","TEXT_NO_FIT_USERS_TO_LIST","TEXT_FILTERS","TEXT_RATE_USER","TEXT_YOU","TEXT_CANCEL","TEXT_RATE","TEXT_REMOVE","TEXT_NO_LIMIT","TEXT_REMOVE_FILTERS","TEXT_YOUR_PROFILE","TEXT_EDIT","TEXT_EDIT_PROFILE","TEXT_USERS","TEXT_TO_FILTER","TEXT_EVENTS","TEXT_RANKING","TEXT_CHATS","TEXT_CLOSE","TEXT_SHOW_USERS","TEXT_OF","TEXT_CREATE_YOUR_ACCOUNT","TEXT_CREATE_AN_ACCOUNT","TEXT_NAME","TEXT_LASTNAME","TEXT_EMAIL","TEXT_EMAIL_DIRECTION","TEXT_PASSWORD","TEXT_REPEAT_PASSWORD","TEXT_REGISTER","TEXT_REGISTER_NOW","TEXT_ALREADY_HAVE_AN_ACCOUNT","TEXT_ACCESS_NOW","TEXT_ACCESS_TO_YOUR_ACCOUNT","TEXT_VERIFY_YOUR_EMAIL","TEXT_USERNAME","TEXT_FILL_YOUR_PROFILE","TEXT_BIRTHDATE","TEXT_TELL_US_A_LITTLE_ABOUT_YOU","TEXT_TO_CONTINUE","TEXT_YOUR_LANGUAGES","TEXT_WOMAN","TEXT_MAN","TEXT_ANY","TEXT_OTHER","TEXT_CHOOSE_YOUR_PROFILE_IMAGE","TEXT_PROFILE_IMAGE","TEXT_EMAIL_NOT_VALID","TEXT_USERNAME_NOT_VALID","TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD","TEXT_STILL_DONT_HAVE_AN_ACCOUNT","TEXT_TO_LOG_IN","TEXT_TO_LOG_OUT","TEXT_RESEND_EMAIL","TEXT_YOU_ARE_ABOUT_TO_LOG_OUT","TEXT_CONFIRM","TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT","TEXT_PROFILE_INFO","TEXT_LANGUAGES_TO_PRACTICE","TEXT_SAVE","TEXT_SETTINGS","TEXT_ACCOUNT","TEXT_PERMISSIONS","TEXT_NAME_AND_LASTNAME","TEXT_CHANGE_NAME_AND_LASTNAME","TEXT_CHANGE_EMAIL","TEXT_UPDATE","TEXT_VERIFY_YOUR_PASSWORD","TEXT_REMOVE_ACCOUNT","TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE","TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED","TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED","TEXT_CHANGE_PASSWORD","TEXT_CURRENT_PASSWORD","TEXT_NEW_PASSWORD","TEXT_CONFIRM_PASSWORD","TEXT_UPDATE_PASSWORD","TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD","TEXT_RESET_PASSWORD","TEXT_RESET_PASSWORD_INSTRUCTIONS","TEXT_SPACE_YEARS","TEXT_PARTICIPANTS","TEXT_NO_PARTICIPANTS_YET","TEXT_VERIFICATION_EMAIL_SENT","TEXT_NO_USERS_MATCH_SEARCH","TEXT_NO_EVENTS_AVAILABLE","TEXT_NO_CHATS_AVAILABLE","TEXT_NO_CHATS_MATCH_SEARCH","TEXT_LANGUAGE_INVOLVED_IN_EVENTS","TEXT_LOCATION_PERMISSION_NOT_GRANTED","TEXT_CONFIRM_EVENT_PARTICIPATION","TEXT_CANCEL_EVENT_PARTICIPATION","TEXT_APP_LANGUAGE","TEXT_LANGUAGE_OF_APP","TEXT_LANGUAGE_DE","TEXT_LANGUAGE_ZH","TEXT_LANGUAGE_ES","TEXT_LANGUAGE_FR","TEXT_LANGUAGE_EN","TEXT_LANGUAGE_IT","TEXT_LANGUAGE_JA","TEXT_LANGUAGE_PT","TEXT_LANGUAGE_ALL","TEXT_WE_BABBLE_SLOGAN","TEXT_LOCATION","TEXT_NOTIFICATIONS","TEXT_GRANTED","TEXT_NOT_GRANTED","TEXT_CREATE_EVENT","TEXT_PUBLISH","TEXT_DATE","TEXT_DESCRIPTION","TEXT_LANGUAGES","TEXT_INFORMATION","TEXT_HEADER_IMAGE","TEXT_PLACE","TEXT_ADDRESS","TEXT_YOU_ARE_ABOUT_TO_REMOVE_EVENT","TEXT_ARE_YOU_SURE_YOU_WANT_TO_REMOVE_EVENT","TEXT_EDIT_EVENT","en","dateTimeFormats","abbrMonth","month","short","year","day","long","weekday","hour","minute","hour12","Vue","use","VueI18n","localeLanguage","navigator","language","i18n","locale","I18NMessages","Vuex","genericDatabaseError","alreadyRegisteredEmailError","emailPasswordCombinationError","tooManyRequestsError","genericError","uploadingImageError","namespaced","state","getters","mutations","actions","isUserAuth","firebase","currentUser","setAccount","context","firestoreDB","collection","doc","uid","set","lastName","merge","log","catch","setAccountLanguage","lang","askForMessagingPermission","requestPermission","generatePushNotificationToken","getToken","token","localStorage","getItem","currentMessageToken","update","tokens","FieldValue","arrayUnion","getAccount","id","email","createAccountListener","userID","docRef","onSnapshot","user","formattedUser","dispatch","root","createAccount","createUserWithEmailAndPassword","password","setPersistance","setPersistence","Auth","Persistence","LOCAL","login","signInWithEmailAndPassword","logout","arrayRemove","signOut","sendEmailVerification","isEmailVerified","reload","emailVerified","sendPasswordResetEmail","updateAccountData","batch","infoToUpdate","commit","updateAccountEmail","updateEmail","updateAccountPassword","updatePassword","getProfileByUID","toDate","setHours","getProfile","profileInfo","getMultipleProfilesByUID","ids","userProfiles","forEach","getProfileByUsername","username","where","querySnapshot","size","docs","setProfile","toLowerCase","birthDate","Date","gender","description","avgRating","numRatings","score","setRegistrationCompleted","registrationCompleted","updateProfile","knownLanguages","languagesToLearn","setLanguages","uploadProfileImg","img","path","url","uploadImg","storageDB","ref","child","putString","getDownloadURL","setProfileImg","profileImg","updateUserLocation","location","geoFirestore","GeoFirestore","coordinates","GeoPoint","lat","lng","date","getLocation","getRatings","exists","setRating","newRating","rating","delete","isNextUsersPageEmpty","page","lastUserShowed","filters","ageRange","Constants","orderBy","currentDate","setFullYear","getFullYear","filterBy","languageToLearn","knownLanguage","startAfter","endAt","limit","documentSnapshots","searchedUserIndex","findIndex","searchedUser","newDocs","map","dataDocs","getNextUsersPage","newLastUserShowed","startAt","users","getNearbyUserIDs","geofirestore","queryNearbyUsers","near","center","radius","maxDistance","snapshot","getEventByID","uploadEventHeaderImg","eventID","data2","createEvent","eventRef","headerImg","eventData","participants","involvedLanguages","removeEvent","updateEvent","returnValue","getNextEventsPage","newLastEventShowed","lastEventShowed","languageInvolved","eventsRetrieved","events","getEventsToBeCelebrated","isNextEventsPageEmpty","addParticipantToEvent","removeParticipantFromEvent","createChatMessagesListener","chatMessages","docChanges","change","formattedChatMessages","setMessagesToRead","addMessagesToChat","newMessage","serverTimestamp","sender","text","addChat","chat","newChat","chats","getChatByID","getTop100RankingUsers","position","getUserRankingPositionByID","database","isGeolocationPermissionGranted","isPushNotificationPermissionGranted","getIsGeolocationPermissionGranted","getIsPushNotificationPermissionGranted","resetState","setIsGeolocationPermissionGranted","setIsPushNotificationPermissionGranted","checkForGeolocationPermission","permissions","query","geolocation","getCurrentPosition","AuxMethods","onchange","checkForPushNotificationsPermission","isPermissionGranted","searchedUsersIDs","genderFilter","ageRangeFilter","languageFilter","searchByUsernameFilter","maxDistanceFilter","maxDistanceRanges","maxDistanceRangesText","locationFilter","nearbyUsersIDs","distanceSearchFilter","getUsers","getLanguagesByUserID","getGenderFilter","getAgeRangeFilter","getLanguageFilter","getSearchByUsernameFilter","getMaxDistanceFilter","getMaxDistanceRanges","getMaxDistanceRangesText","getUserByID","getNearbyUsersIDs","getNearbyUsersIDsLength","areThereFiltersOn","getFilters","filtersOn","getLastUserShowed","getSearchedUsers","searchedUsersReturn","getSearchedUsersIDsLength","getSearchedUsersIDs","setUsers","setGenderFilter","setAgeRangeFilter","setNearbyUsersIDs","setLanguageFilter","setLocationFilter","setSearchByUsernameFilter","setMaxDistanceFilter","addUser","addSearchedUserID","resetSearchedUsersIDs","setLastUserShowed","addRating","userTo","prev","newAvgRating","areThereMore","isEmpty","isEmpty2","areThereMoreNearbyUsers","allIDs","idsToGetProfiles","isValid","startsWith","languageToLearnIndex","knownLanguageIndex","getNearbyUsersProfiles","usersAdded","resetSearchedUsers","setFilters","resetFilters","alreadyAccountUsernameError","gettingCurrentLocationError","role","ratings","genderOptions","defaultProfileImg","languageOptions","getName","getLanguage","getID","getLastName","getEmail","getRole","getChats","getUsername","getBirthDate","getGender","getDescription","getProfileImg","getAvgRating","getNumRatings","getKnownLanguages","getLanguagesToLearn","getGenderImgByID","getGenderDefaultProfileImgByUserGender","getGenderOptionsAsArray","keys","getLanguageImgByID","getLanguageOptionsAsArray","getLanguageFromLanguageOptionsByID","getRating","setID","setName","setLanguage","setLastName","setEmail","setRole","setChats","accountInfo","setUsername","setBirthDate","setGender","setDescription","setAvgRating","setNumRatings","setKnownLanguages","setLanguagesToLearn","setRatings","setLocation","initState","generateNotificationToken","updateAccountNameAndLastName","isUserLogged","isIt","checkIfEmailIsVerified","isVerified","checkIfUsernameIsAlreadyRegistered","createProfile","isAlreadyRegistered","nextTick","getRegistrationState","checkRegistrationState","getCurrentLocation","coords","latitude","longitude","ratingsInfo","rateUser","currentLocation","eventsToShowIDs","mapEventsToShowIDs","languageInvolvedFilter","eventsTab","getLanguageInvolvedFilter","getEvents","getEventsTab","getEventsToShow","eventsToShow","distance","userLocation","haversine","nEvent","getMapEventsToShow","getLastEventShowed","amIParticipating","found","find","participantID","setLanguageInvolvedFilter","setEventsTab","removeEventByID","indexEventsToShowIDs","indexMapEventsToShowIDs","resetEventsToShowIDs","addEvent","addEventToShow","addMapEventToShow","setEventsToShowIDs","setLastEventShowed","eventCoordinates","dataToUpdate","localEvent","toString","city","place","address","updatesValues","entries","eventLocation","eventNonFormattedLoc","getAllEvents","getEventParticipants","chatsToShowIDs","chatListListener","chatMessagesListeners","usernameFilter","getChatsToShowIDs","getChatMessagesByChatID","getUnreadMessagesByChatID","myID","unreadMessages","read","getUnreadMessages","count","getChatsToShow","chatsToShow","auxChat","lastMessage","lowNotMe","getUserByChatID","includes","getNotReadMessagesCountByChatID","addChatMessagesListener","listener","updateChatMessages","index","mMessage","sortChatMessagesByDate","compareChatMessagesByDate","a","b","dateA","dateB","addChatToShow","sortChatsToShowByLastMessage","compareChatsByLastMessageDate","chatALastMessageDate","chatBLastMessageDate","setUsernameFilter","setChatListListener","pushChatMessages","mp","alreadyAdded","manageChatListChange","manageChatMessagesChange","newMessages","modifiedMessagesToRead","modifiedMessagesDated","setChatMessagesToReadByChatID","sendNewChatMessage","messageText","createChatListeners","rankingUsers","rankingUsersIDs","rankingUser","getRankingUsersToShow","rus","ru","getRankedUserByIndex","getRankingUsers","setRankingUser","setRankingUsers","resetRankingUsers","resetRankingUsersIDs","addRankingUserID","rankingUserID","top100Users","userIndex","getPagedRankingUsers","newUserShowed","pageEnding","areThereMoreRankingUsersToShow","Store","ranking","appInfoLoaded","getAppInfoLoaded","setAppInfoLoaded","getLoggedUser","resetAppState","$i18n","initAppInfo","Router","router","base","process","routes","redirect","Home","meta","requiresAuth","children","menu","beforeEach","to","from","next","auth","matched","some","record","store","registrationState","register","ready","registered","cached","updatefound","updated","offline","Vuetify","VTextField","icons","iconfont","theme","themes","light","primary","secondary","thirdary","accent","info","success","warning","components","VueChatScroll","VueGoogleMaps","load","libraries","config","productionTip","app","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","db","firestore","storage","messaging","onAuthStateChanged","render","h","App","vuetify","$mount","VuetifyGoogleAutocomplete"],"mappings":"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","file":"js/app.b8f460ae.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-114ec627\":\"7d4ab781\",\"chunk-25c771b8\":\"83503bd3\",\"chunk-20d8013b\":\"8038ff87\",\"chunk-4db4d370\":\"5008d278\",\"chunk-7ef6b764\":\"22dcd313\",\"chunk-6bdf194f\":\"acfd250d\",\"chunk-46691d91\":\"d7000a1c\",\"chunk-65e01e33\":\"537d9902\",\"chunk-74d80f94\":\"4558bf68\",\"chunk-8c307058\":\"e78b114d\",\"chunk-f5f6be7e\":\"6484ce59\",\"chunk-999a6558\":\"23ba0d7a\",\"chunk-a3f747da\":\"f18ac858\",\"chunk-382272b3\":\"174f785c\",\"chunk-7872e2d8\":\"c1b867b7\",\"chunk-3b0443ad\":\"02d67ebf\",\"chunk-2d0cb712\":\"16024d1d\",\"chunk-2d0e2173\":\"6567c5a1\",\"chunk-2d209add\":\"82e81cad\",\"chunk-bd6f893e\":\"2fd3cdd4\",\"chunk-ca63756e\":\"b0344b6f\",\"chunk-d596f70a\":\"0c4f094b\",\"chunk-59d66412\":\"988c0c2d\",\"chunk-f36d354a\":\"d2b17605\",\"chunk-31ee2a6a\":\"7089e1de\",\"chunk-f4cedb96\":\"6afafa71\",\"chunk-3d4ce7de\":\"75d6fcee\",\"chunk-722a8b76\":\"0b09053f\",\"chunk-7b2bfafa\":\"ef2bfe3e\",\"chunk-1bcd40a2\":\"2b99b9a9\",\"chunk-1bea44a5\":\"7854c725\",\"chunk-5986e5a8\":\"b992869a\",\"chunk-bac2b65e\":\"eeeabda7\",\"chunk-bf8e62e8\":\"0d489609\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-114ec627\":1,\"chunk-25c771b8\":1,\"chunk-20d8013b\":1,\"chunk-4db4d370\":1,\"chunk-7ef6b764\":1,\"chunk-6bdf194f\":1,\"chunk-46691d91\":1,\"chunk-65e01e33\":1,\"chunk-74d80f94\":1,\"chunk-8c307058\":1,\"chunk-f5f6be7e\":1,\"chunk-999a6558\":1,\"chunk-a3f747da\":1,\"chunk-7872e2d8\":1,\"chunk-3b0443ad\":1,\"chunk-bd6f893e\":1,\"chunk-ca63756e\":1,\"chunk-d596f70a\":1,\"chunk-f36d354a\":1,\"chunk-31ee2a6a\":1,\"chunk-f4cedb96\":1,\"chunk-3d4ce7de\":1,\"chunk-722a8b76\":1,\"chunk-7b2bfafa\":1,\"chunk-1bcd40a2\":1,\"chunk-1bea44a5\":1,\"chunk-5986e5a8\":1,\"chunk-bac2b65e\":1,\"chunk-bf8e62e8\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-114ec627\":\"a7aa8c19\",\"chunk-25c771b8\":\"0fea8ff0\",\"chunk-20d8013b\":\"3d60cca4\",\"chunk-4db4d370\":\"0993e8a4\",\"chunk-7ef6b764\":\"2a012898\",\"chunk-6bdf194f\":\"39446fbf\",\"chunk-46691d91\":\"10778335\",\"chunk-65e01e33\":\"bcc739a8\",\"chunk-74d80f94\":\"5c32263b\",\"chunk-8c307058\":\"3e7608a8\",\"chunk-f5f6be7e\":\"10778335\",\"chunk-999a6558\":\"e275646b\",\"chunk-a3f747da\":\"714ab32f\",\"chunk-382272b3\":\"31d6cfe0\",\"chunk-7872e2d8\":\"85a812e8\",\"chunk-3b0443ad\":\"01b2a72b\",\"chunk-2d0cb712\":\"31d6cfe0\",\"chunk-2d0e2173\":\"31d6cfe0\",\"chunk-2d209add\":\"31d6cfe0\",\"chunk-bd6f893e\":\"5cf94b63\",\"chunk-ca63756e\":\"af10523d\",\"chunk-d596f70a\":\"9150a523\",\"chunk-59d66412\":\"31d6cfe0\",\"chunk-f36d354a\":\"68e3f139\",\"chunk-31ee2a6a\":\"ce47b626\",\"chunk-f4cedb96\":\"edcfe174\",\"chunk-3d4ce7de\":\"6d6a1338\",\"chunk-722a8b76\":\"f613719f\",\"chunk-7b2bfafa\":\"f613719f\",\"chunk-1bcd40a2\":\"f613719f\",\"chunk-1bea44a5\":\"f613719f\",\"chunk-5986e5a8\":\"5b00b83b\",\"chunk-bac2b65e\":\"10778335\",\"chunk-bf8e62e8\":\"10778335\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=ae482258&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=style&index=0&id=ae482258&scoped=true&lang=css&\"","export default{\r\n\r\n    /* RULES */\r\n    RULE_MIN_VALUE_CHARACTERS_USERNAME: 5,\r\n    RULE_MAX_VALUE_CHARACTERS_USERNAME: 14,\r\n    RULE_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 20,\r\n    RULE_MIN_VALUE_AGE: 16,\r\n    RANKING_PAGE_SIZE: 10,\r\n    MAX_RANKING_PAGE_SIZE: 100,\r\n    SEARCHED_USERS_PAGE_SIZE: 5, //Allways SEARCHED_USERS_PAGE_SIZE >= 2\r\n    EVENTS_PAGE_SIZE: 1,\r\n\r\n    /* DATA */\r\n    MIN_USER_AGE: 16,\r\n    MAX_USER_AGE: 100,\r\n\r\n    /* IMAGES */\r\n    IMG_USER_PROFILE_HEADER: \"img/backgrounds/user_profile_header.png\",\r\n    IMG_EMOJI_SAD_FACE: 'img/emojis/sad_face.png'\r\n}\r\n","export default {\r\n    arraysContainSameElements: function (arr1, arr2) {\r\n\r\n        if (!Array.isArray(arr1) || !Array.isArray(arr2) || arr1.length !== arr2.length)\r\n            return false;\r\n\r\n        var arr1_aux = arr1.concat().sort();\r\n        var arr2_aux = arr2.concat().sort();\r\n\r\n        for (var i = 0; i < arr1_aux.length; i++) {\r\n\r\n            if (arr1_aux[i] !== arr2_aux[i])\r\n                return false;\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    },\r\n\r\n    shuffle: function (array) {\r\n        array.sort(() => Math.random() - 0.5);\r\n    },\r\n\r\n    emptyCallback: function () {\r\n\r\n    },\r\n    angleInRad: () => (x) => {\r\n        return x * Math.PI / 180;\r\n    },\r\n\r\n    generateChatID(id1, id2){\r\n        let chatID;\r\n\r\n        if (id1 < id2) {\r\n            chatID = id1 + id2;\r\n        } else {\r\n            chatID = id2 + id1;\r\n        }\r\n\r\n        return chatID;\r\n    }\r\n\r\n}","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-app',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}},[(_vm.dataIsReady)?_c('router-view',{staticStyle:{\"max-width\":\"100%\",\"height\":\"100%\"}}):_vm._e()],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-app style=\"max-width: 100%; height: 100%;\">\n    <router-view v-if=\"dataIsReady\" style=\"max-width: 100%; height: 100%;\"/>\n  </v-app>\n</template>\n\n<script>\n\n  import {mapActions} from 'vuex';\n\n  export default {\n    name: 'App',\n    components: {},\n    data() {\n      return {\n        dataIsReady: false\n      }\n    },\n    methods: {\n      ...mapActions('user', ['getRegistrationState', 'initState']),\n      ...mapActions(['getLoggedUser'])\n    },\n    created() {\n      let self = this;\n      self.getLoggedUser().then(currentUser => {\n        if (currentUser != null && currentUser != undefined) {\n          // user is logged in\n          let resultInitAppInfo = self.initState();\n\n          resultInitAppInfo\n                  .then(() => {\n                    self.dataIsReady = true;\n                  })\n                  .catch((error) => {\n                    self.snackbarText = error;\n                    self.snackbar = true;\n                  });\n        } else {\n          self.$store.dispatch('resetAppState').then(() => {\n            self.$router.replace('home');\n          })\n                  .catch((error) => {\n                    self.snackbarText = error;\n                    self.snackbar = true;\n                  });\n\n          self.dataIsReady = true;\n          console.log(\"No user logged\");\n        }\n      });\n      //this.checkRegistrationState();\n      /*let self = this;\n      let resultInitAppInfo = this.initAppInfo();\n\n      resultInitAppInfo.then(() => {\n          self.dataIsReady = true;\n      })\n          .catch((error) => {\n              console.log(error)\n          });*/\n\n    }\n\n  };\n</script>\n\n<style>\n  #app-toolbar {\n    width: 100%;\n  }\n\n  #loading {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    min-height: 100vh;\n  }\n</style>","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--12-0!../node_modules/thread-loader/dist/cjs.js!../node_modules/babel-loader/lib/index.js!../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=450d7329&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VApp } from 'vuetify/lib/components/VApp';\ninstallComponents(component, {VApp})\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"img-back\",staticStyle:{\"position\":\"relative\",\"height\":\"100%!important\"}},[_c('v-container',{staticClass:\"home justify-center text-center\",staticStyle:{\"height\":\"100%\",\"position\":\"relative\",\"width\":\"100%\"},attrs:{\"align\":\"center\"}},[_c('p',{staticClass:\"white--text\"},[_vm._v(\"webabble.es\")]),_c('div',{staticStyle:{\"width\":\"100%\",\"margin-top\":\"12vh\"},attrs:{\"align\":\"center\"}},[_c('img',{staticStyle:{\"width\":\"44vw\",\"max-width\":\"200px\"},attrs:{\"src\":require(\"../assets/WhiteLogoWeBabble.png\")}}),_c('p',{staticClass:\"white--text slogan\"},[_c('i',[_vm._v(_vm._s(_vm.sloganText))])])]),_c('div',{staticClass:\"bottom-centered-buttons\",staticStyle:{\"margin-bottom\":\"20px\",\"max-width\":\"600px\"},attrs:{\"align\":\"center\"}},[_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'signUp'})}}},[_vm._v(\" \"+_vm._s(_vm.createAnAccountText)+\" \")])],1),_c('br'),_c('div',{staticStyle:{\"width\":\"94%\"},attrs:{\"align\":\"center\"}},[_c('v-btn',{staticClass:\"white primary--text\",staticStyle:{\"width\":\"100%\"},attrs:{\"rounded\":\"\"},on:{\"click\":function($event){return _vm.$router.push({name: 'login'})}}},[_vm._v(\" \"+_vm._s(_vm.toLogInText)+\" \")])],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"img-back\" style=\"position: relative; height: 100%!important;\">\n    <v-container class=\"home justify-center text-center\" style=\"height: 100%; position: relative; width: 100%\" align=\"center\">\n      <p class=\"white--text\">webabble.es</p>\n\n      <div align=\"center\" style=\"width: 100%; margin-top: 12vh\">\n        <img style=\"width: 44vw; max-width: 200px\" src=\"../assets/WhiteLogoWeBabble.png\"/>\n        <p class=\"white--text slogan\"><i>{{sloganText}}</i></p>\n      </div>\n\n      <div class=\"bottom-centered-buttons\" align=\"center\" style=\"margin-bottom: 20px; max-width: 600px\">\n        <div align=\"center\" style=\"width: 94%\">\n          <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'signUp'})\" style=\"width: 100%;\">\n            {{createAnAccountText}}\n          </v-btn>\n        </div>\n        <br>\n        <div align=\"center\" style=\"width: 94%\">\n          <v-btn class=\"white primary--text\" rounded @click=\"$router.push({name: 'login'})\" style=\"width: 100%\">\n            {{toLogInText}}\n          </v-btn>\n        </div>\n      </div>\n    </v-container>\n  </div>\n\n</template>\n\n<script>\n\n  export default {\n    name: \"home\",\n    data() {\n      return {\n        createAnAccountText: null,\n        toLogInText: null,\n        sloganText: null\n      }\n    },\n    created() {\n      this.createAnAccountText = this.$i18n.t('messages.TEXT_CREATE_AN_ACCOUNT');\n      this.toLogInText = this.$i18n.t('messages.TEXT_TO_LOG_IN');\n      this.sloganText = this.$i18n.t('messages.TEXT_WE_BABBLE_SLOGAN');\n    }\n  };\n</script>\n\n<style scoped>\n  .bottom-centered-buttons {\n    width: 92.5%;\n    bottom: 5%;\n    left: 50%;\n    transform: translate(-50%, 0);\n    position: fixed;\n  }\n\n  .slogan {\n    font-family: \"Arial\", sans-serif;\n  }\n\n  .btn-grad {\n    background-image: linear-gradient(to right, #02AAB0 0%, #00CDAC 51%, #02AAB0 100%)\n  }\n\n  .btn-grad:hover {\n    background-position: right center;\n  }\n\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=ae482258&scoped=true&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Home.vue?vue&type=style&index=0&id=ae482258&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"ae482258\",\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VContainer})\n","\r\nexport default {\r\n    messages: {\r\n        es: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'Parece que ha habido un problema con tu petición. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'Parece que ha habido un problema de conexión. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'Parece que ha habido un problema con la base de datos. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'Ya existe una cuenta registrada con ese E-mail. Si es tuya, prueba a iniciar sesión-',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'Ya existe un usuario con ese nombre.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'No existe una cuenta registrada con este E-mail o la contraseña es incorrecta.',\r\n                ERROR_UPLOADING_IMAGE: 'Error subiendo la imagen.',\r\n                ERROR_SOMETHING_HAPPENED: 'Parece que ha ocurrido un error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'Lo sentimos, la API FileReader no está soportada.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Las contraseñas no coinciden',\r\n                ERROR_TOO_MANY_REQUESTS: 'Parece que has realizado demasiadas peticiones en poco tiempo. Por favor, vuelve a intentarlo más tarde.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'Parece que la contraseña introducida no coincide con su contraseña actual.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'Parece que no hay ninguna cuenta registrada con este E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema accediendo a su ubicación actual.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'Parece que ha habido un problema: No se ha podido guardar su valoración.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'Parece que ha habido un problema al cargar el ranking. Por favor, comprueba tu conexión.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'Parece que ha habido un problema: no se ha podido obtener tu localizacion actual.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'Parece que ha habido un problema: no se han podido obtener los usuarios cercanos.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'Parece que ha habido un problema: no se han podido obtener los eventos.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'Este campo es obligatorio',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Mínimo 5 caracteres',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Máximo 14 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Mínimo 5 caracteres para realizar la búsqueda',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Mínimo 20 caracteres',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Mínimo 8 caracteres',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'Debes tener al menos {age} años.',\r\n                RULE_INVALID_DATE: 'Fecha no válida',\r\n                RULE_TEXT_SELECT_RECOMMENDED_ADDRESS: 'Selecciona una de las direcciones recomendadas',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Por favor, selecciona una imagen',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'Para poder continuar, completa el proceso de verificación a través del enlace que hemos enviado a tu E-mail:',\r\n                TEXT_FILL_FIELDS_CORRECTLY: 'Por favor, completa correctamente todos los campos.',\r\n\r\n                /* TEXTS */\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: '¿Qué idiomas buscas mejorar?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Idiomas que quieres practicar',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: '¿Qué idiomas hablas con soltura?',\r\n                TEXT_MOTHER_LANGUAGES: 'Idiomas maternos',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Idioma que busca mejorar',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Idioma que quiere practicar',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Idioma que habla con soltura',\r\n                TEXT_MOTHER_LANGUAGE: 'Idioma materno',\r\n                TEXT_LANGUAGE: 'Idioma',\r\n                TEXT_GENDER: 'Género',\r\n                TEXT_DISTANCE: 'Distancia',\r\n                TEXT_AGE: 'Edad',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filtrar por idioma materno',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filtrar por idioma que quiere practicar',\r\n                TEXT_SEARCH: 'Buscar',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No se han encontrado usuarios que cumplan con los requisitos.',\r\n                TEXT_FILTERS: 'Filtros',\r\n                TEXT_RATE_USER: 'Valora al usuario',\r\n                TEXT_YOU: 'Tú',\r\n                TEXT_CANCEL: 'Cancelar',\r\n                TEXT_RATE: 'Valorar',\r\n                TEXT_REMOVE: 'Eliminar',\r\n                TEXT_NO_LIMIT: 'Sin límite',\r\n                TEXT_REMOVE_FILTERS: 'Eliminar filtros',\r\n                TEXT_YOUR_PROFILE: 'Tu perfil',\r\n                TEXT_EDIT: 'Editar',\r\n                TEXT_EDIT_PROFILE: 'Editar perfil',\r\n                TEXT_USERS: 'Usuarios',\r\n                TEXT_TO_FILTER: 'Filtrar',\r\n                TEXT_EVENTS: 'Eventos',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Cerrar',\r\n                TEXT_SHOW_USERS: 'Mostrar usuarios',\r\n                TEXT_OF: 'de',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Crea tu cuenta',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Crear una cuenta',\r\n                TEXT_NAME: 'Nombre',\r\n                TEXT_LASTNAME: 'Apellidos',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'Correo electrónico',\r\n                TEXT_PASSWORD: 'Contraseña',\r\n                TEXT_REPEAT_PASSWORD: 'Repite la contraseña',\r\n                TEXT_REGISTER: 'Registrar',\r\n                TEXT_REGISTER_NOW: '¡Regístrate ahora!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: '¿Ya tienes una cuenta?',\r\n                TEXT_ACCESS_NOW: '¡Accede ahora!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Accede a tu cuenta',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verifica tu E-mail',\r\n                TEXT_USERNAME: 'Nombre de usuario',\r\n                TEXT_FILL_YOUR_PROFILE: 'Rellena tu perfil',\r\n                TEXT_BIRTHDATE: 'Fecha de nacimiento',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Cuéntanos un poco sobre ti',\r\n                TEXT_TO_CONTINUE: 'Continuar',\r\n                TEXT_YOUR_LANGUAGES: 'Tus idiomas',\r\n                TEXT_WOMAN: 'Mujer',\r\n                TEXT_MAN: 'Hombre',\r\n                TEXT_ANY: 'Cualquiera',\r\n                TEXT_OTHER: 'Otro',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Elige tu foto de perfil',\r\n                TEXT_PROFILE_IMAGE: 'Foto de perfil',\r\n                TEXT_EMAIL_NOT_VALID: 'E-mail no válido',\r\n                TEXT_USERNAME_NOT_VALID: 'Nombre de usuario no válido',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: '¿Todavía no tienes una cuenta?',\r\n                TEXT_TO_LOG_IN: 'Iniciar sesión',\r\n                TEXT_TO_LOG_OUT: 'Cerrar sesión',\r\n                TEXT_RESEND_EMAIL: 'Volver a enviar E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'Va a salir de su cuenta',\r\n                TEXT_CONFIRM: 'Confirmar',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: '¿Estás seguro de que quieres cerrar sesión?',\r\n                TEXT_PROFILE_INFO: 'Información de perfil',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Idiomas a practicar',\r\n                TEXT_SAVE: 'Guardar',\r\n                TEXT_SETTINGS: 'Configuración e información',\r\n                TEXT_ACCOUNT: 'Cuenta',\r\n                TEXT_PERMISSIONS: 'Permisos',\r\n                TEXT_NAME_AND_LASTNAME: 'Nombre y apellidos',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Cambiar nombre y apellidos',\r\n                TEXT_CHANGE_EMAIL: 'Cambiar correo electrónico',\r\n                TEXT_UPDATE: 'Actualizar',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verifica tu contraseña',\r\n                TEXT_REMOVE_ACCOUNT: 'Borrar cuenta',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Vuelve a introducir tu contraseña de WeBabble para continuar.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Tu dirección de correo electrónico ha sido actualizada.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Tu contraseña ha sido actualizada.',\r\n                TEXT_CHANGE_PASSWORD: 'Cambiar contraseña',\r\n                TEXT_CURRENT_PASSWORD: 'Contraseña actual',\r\n                TEXT_NEW_PASSWORD: 'Nueva contraseña',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirmar la contraseña',\r\n                TEXT_UPDATE_PASSWORD: 'Actualizar contraseña',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Introduce tu E-mail y te ayudaremos a recuperar la contraseña:',\r\n                TEXT_RESET_PASSWORD: 'Restablecer contraseña',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'En un breve período de tiempo recibirás un email. Ábrelo y sigue las instrucciones para restablecer tu contraseña.',\r\n                TEXT_SPACE_YEARS: ' años',\r\n                TEXT_PARTICIPANTS: 'Participantes',\r\n                TEXT_NO_PARTICIPANTS_YET: 'Parece que todavía no se ha apuntado nadie. ¡Sé el primero!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'E-mail de verificación enviado.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'Parece que no hay usuarios que coincidan con tu búsqueda.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'Parece que no hay eventos disponibles.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'Parece que no tienes ningún chat todavía. ¡Comienza a hablar con algún usuario!',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'Parece que no tienes chats con usuarios que coincidan con tu búsqueda.',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Idiomas de los eventos',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'Parece que no has dado permiso para acceder a tu localización. Concédelo para poder disponer de esta funcionalidad.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'Te has apuntado a este evento.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'Has cancelado tu participación en este evento.',\r\n                TEXT_APP_LANGUAGE: 'Idioma',\r\n                TEXT_LANGUAGE_OF_APP: 'Idioma de la aplicación',\r\n                TEXT_LANGUAGE_DE: 'Alemán',\r\n                TEXT_LANGUAGE_ZH: 'Chino',\r\n                TEXT_LANGUAGE_ES: 'Español',\r\n                TEXT_LANGUAGE_FR: 'Francés',\r\n                TEXT_LANGUAGE_EN: 'Inglés',\r\n                TEXT_LANGUAGE_IT: 'Italiano',\r\n                TEXT_LANGUAGE_JA: 'Japonés',\r\n                TEXT_LANGUAGE_PT: 'Portugués',\r\n                TEXT_LANGUAGE_ALL: 'Cualquier idioma',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Aprender idiomas ahora es más fácil',\r\n                TEXT_LOCATION: 'Ubicación',\r\n                TEXT_NOTIFICATIONS: 'Notificaciones',\r\n                TEXT_GRANTED: 'Concedido',\r\n                TEXT_NOT_GRANTED: 'No concedido',\r\n                TEXT_CREATE_EVENT: 'Crear evento',\r\n                TEXT_PUBLISH: 'Publicar',\r\n                TEXT_DATE: 'Fecha',\r\n                TEXT_DESCRIPTION: 'Descripción',\r\n                TEXT_LANGUAGES: 'Idiomas',\r\n                TEXT_INFORMATION: 'Información',\r\n                TEXT_HEADER_IMAGE: 'Imagen de cabecera',\r\n                TEXT_PLACE: 'Lugar',\r\n                TEXT_ADDRESS: 'Dirección',\r\n                TEXT_YOU_ARE_ABOUT_TO_REMOVE_EVENT: 'Vas a borrar este evento',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_REMOVE_EVENT: '¿Estás seguro de que quieres borrar este evento?',\r\n                TEXT_EDIT_EVENT: 'Editar evento'\r\n            }\r\n        },\r\n        en: {\r\n            messages: {\r\n                /* ERRORS */\r\n                ERROR_GENERIC_PROBLEM: 'It seems that there has been a problem with your request. Please, try again later.',\r\n                ERROR_GENERIC_CONNECTION_PROBLEM: 'It seems that there has been a connection problem. Please, try again later.',\r\n                ERROR_GENERIC_DATABASE_PROBLEM: 'It seems that there has been a database problem. Please, try again later.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL: 'There is already an account registered with this E-mail. If this account is yours, try to log in.',\r\n                ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME: 'This username is already in use.',\r\n                ERROR_WRONG_EMAIL_PASSWORD_COMBINATION: 'There is no account registered with this E-mail or the password is incorrect.',\r\n                ERROR_UPLOADING_IMAGE: 'Error uploading the image.',\r\n                ERROR_SOMETHING_HAPPENED: 'It seems that there has been an error.',\r\n                ERROR_API_FILEREADER_NOT_SUPPORTED: 'We are sorry, the FileReader API is not supported by your browser.',\r\n                ERROR_PASSWORDS_DONT_MATCH: 'Passwords do not match.',\r\n                ERROR_TOO_MANY_REQUESTS: 'It seems that you made several request in a short time. Please, try again later.',\r\n                ERROR_TEXT_WRONG_PASSWORD: 'It seems that the introduced password does not match your current password.',\r\n                ERROR_NO_ACCOUNT_WITH_THIS_EMAIL: 'It seems that there is no account registered with this E-mail.',\r\n                ERROR_GETTING_CURRENT_LOCATION: 'It seems that there was a problem accessing your current location.',\r\n                ERROR_COULD_NOT_SET_YOUR_RATING: 'It seems that there was a problem: your rate could not be submitted.',\r\n                ERROR_PROBLEM_RETRIEVING_RANKING: 'It seems that there was a problem while loading Ranking. Please, check your connection.',\r\n                ERROR_PROBLEM_GETTING_CURRENT_LOCATION: 'It seems that there was a problem: we could not access your current location.',\r\n                ERROR_PROBLEM_GETTING_NEARBY_USERS: 'It seems that there was a problem: we could not retrieve nearby users.',\r\n                ERROR_PROBLEM_GETTING_EVENTS: 'It seems that there was a problem: we could not retrieve events.',\r\n\r\n                /* RULES */\r\n                RULE_TEXT_MANDATORY_FIELD: 'This field is required.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME: 'Minimum 5 characters.',\r\n                RULE_TEXT_MAX_VALUE_CHARACTERS_USERNAME: 'Maximum 14 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USERNAME_TO_START_SEARCHING: 'Write at least 5 to search.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_USER_DESCRIPTION: 'Minimum 20 characters.',\r\n                RULE_TEXT_MIN_VALUE_CHARACTERS_PASSWORD: 'Minimum 8 characters.',\r\n                RULE_YOU_HAVE_TO_BE_AT_LEAST_X_YEARS_OLD_TO_REGISTER: 'You have to be at least {age} years old.',\r\n                RULE_INVALID_DATE: 'Invalid date',\r\n                RULE_TEXT_SELECT_RECOMMENDED_ADDRESS: 'Select one of the recommended addresses',\r\n\r\n                /* INSTRUCTIONS */\r\n                ASK_FOR_IMAGE_SELECTION: 'Please, select an image.',\r\n                TEXT_VERIFICATION_EMAIL_SENT_TO: 'In order to continue, complete the verification process through the link we have sent to your E-mail:',\r\n                TEXT_FILL_FIELDS_CORRECTLY: 'Please, complete all fields correctly.',\r\n\r\n                /* TEXTS */\r\n                TEXT_DESCRIPTION: 'Description',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_IMPROVE: 'What languages do you want to improve?',\r\n                TEXT_LANGUAGES_YOU_WANT_TO_PRACTICE: 'Languages ​​you want to practice',\r\n                TEXT_LANGUAGES_YOU_SPEAK_FLUENTLY: 'What languages ​​do you speak fluently?',\r\n                TEXT_MOTHER_LANGUAGES: 'First languages',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_IMPROVE: 'Language you are looking to improve',\r\n                TEXT_LANGUAGE_HE_SHE_WANT_TO_PRACTICE: 'Language you want to practice',\r\n                TEXT_LANGUAGE_HE_SHE_SPEAK_FLUENTLY: 'Language you speak fluently',\r\n                TEXT_MOTHER_LANGUAGE: 'First language',\r\n                TEXT_LANGUAGE: 'Language',\r\n                TEXT_GENDER: 'Gender',\r\n                TEXT_DISTANCE: 'Distance',\r\n                TEXT_AGE: 'Age',\r\n                TEXT_FILTER_BY_MOTHER_LANGUAGE: 'Filter by mother tongue',\r\n                TEXT_FILTER_BY_LANGUAGE_TO_LEARN: 'Filter by language they want to practice.',\r\n                TEXT_SEARCH: 'Search',\r\n                TEXT_NO_FIT_USERS_TO_LIST: 'No users found that meet the requirements.',\r\n                TEXT_FILTERS: 'Filters',\r\n                TEXT_RATE_USER: 'Rate user',\r\n                TEXT_YOU: 'You',\r\n                TEXT_CANCEL: 'Cancel',\r\n                TEXT_RATE: 'Rate',\r\n                TEXT_REMOVE: 'Remove',\r\n                TEXT_NO_LIMIT: 'Limitless',\r\n                TEXT_REMOVE_FILTERS: 'Remove filters',\r\n                TEXT_YOUR_PROFILE: 'Your profile',\r\n                TEXT_EDIT: 'Edit',\r\n                TEXT_EDIT_PROFILE: 'Edit profile',\r\n                TEXT_USERS: 'Users',\r\n                TEXT_TO_FILTER: 'Filter',\r\n                TEXT_EVENTS: 'Events',\r\n                TEXT_RANKING: 'Ranking',\r\n                TEXT_CHATS: 'Chats',\r\n                TEXT_CLOSE: 'Close',\r\n                TEXT_SHOW_USERS: 'Show users',\r\n                TEXT_OF: 'of',\r\n                TEXT_CREATE_YOUR_ACCOUNT: 'Create your account',\r\n                TEXT_CREATE_AN_ACCOUNT: 'Create an account',\r\n                TEXT_NAME: 'Name',\r\n                TEXT_LASTNAME: 'Last name',\r\n                TEXT_EMAIL: 'E-mail',\r\n                TEXT_EMAIL_DIRECTION: 'E-mail',\r\n                TEXT_PASSWORD: 'Password',\r\n                TEXT_REPEAT_PASSWORD: 'Repeat password',\r\n                TEXT_REGISTER: 'Sign up',\r\n                TEXT_REGISTER_NOW: 'Sign up now!',\r\n                TEXT_ALREADY_HAVE_AN_ACCOUNT: 'Do you already have an account?',\r\n                TEXT_ACCESS_NOW: 'Access now!',\r\n                TEXT_ACCESS_TO_YOUR_ACCOUNT: 'Log in into your account',\r\n                TEXT_VERIFY_YOUR_EMAIL: 'Verify your E-mail',\r\n                TEXT_USERNAME: 'Username',\r\n                TEXT_PROFILE_IMAGE: 'Profile image',\r\n                TEXT_FILL_YOUR_PROFILE: 'Fill your profile',\r\n                TEXT_BIRTHDATE: 'Date of birth',\r\n                TEXT_TELL_US_A_LITTLE_ABOUT_YOU: 'Tell us a bit about yourself',\r\n                TEXT_TO_CONTINUE: 'Continue',\r\n                TEXT_YOUR_LANGUAGES: 'Your languages',\r\n                TEXT_WOMAN: 'Woman',\r\n                TEXT_MAN: 'Man',\r\n                TEXT_ANY: 'Any',\r\n                TEXT_OTHER: 'Other',\r\n                TEXT_CHOOSE_YOUR_PROFILE_IMAGE: 'Choose your profile picture',\r\n                TEXT_EMAIL_NOT_VALID: 'Invalid E-mail',\r\n                TEXT_USERNAME_NOT_VALID: 'Invalid username',\r\n                TEXT_HAVE_YOU_FORGOTTEN_YOUR_PASSWORD: '¿Has olvidado tu contraseña?',\r\n                TEXT_STILL_DONT_HAVE_AN_ACCOUNT: 'Have you forgotten your password?',\r\n                TEXT_TO_LOG_IN: 'Sign in',\r\n                TEXT_TO_LOG_OUT: 'Log out',\r\n                TEXT_RESEND_EMAIL: 'Resend E-mail',\r\n                TEXT_YOU_ARE_ABOUT_TO_LOG_OUT: 'You are going to log out of your account.',\r\n                TEXT_CONFIRM: 'Confirm',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_LOG_OUT: 'Are you sure you want to log out?',\r\n                TEXT_PROFILE_INFO: 'Profile information',\r\n                TEXT_LANGUAGES_TO_PRACTICE: 'Languages to practice',\r\n                TEXT_SAVE: 'Save',\r\n                TEXT_SETTINGS: 'Settings and information',\r\n                TEXT_ACCOUNT: 'Account',\r\n                TEXT_PERMISSIONS: 'Permissions',\r\n                TEXT_NAME_AND_LASTNAME: 'Name and last name',\r\n                TEXT_CHANGE_NAME_AND_LASTNAME: 'Edit name and last name',\r\n                TEXT_CHANGE_EMAIL: 'Edit E-mail',\r\n                TEXT_UPDATE: 'Update',\r\n                TEXT_VERIFY_YOUR_PASSWORD: 'Verify your password',\r\n                TEXT_REMOVE_ACCOUNT: 'Remove account',\r\n                TEXT_INTRODUCE_YOUR_PASSWORD_TO_CONTINUE: 'Re-enter your WeBabble password to continue.',\r\n                TEXT_YOUR_EMAIL_HAS_BEEN_UPDATED: 'Your E-mail address has been updated.',\r\n                TEXT_YOUR_PASSWORD_HAS_BEEN_UPDATED: 'Your password address has been updated.',\r\n                TEXT_CHANGE_PASSWORD: 'Edit password',\r\n                TEXT_CURRENT_PASSWORD: 'Current password',\r\n                TEXT_NEW_PASSWORD: 'New password',\r\n                TEXT_CONFIRM_PASSWORD: 'Confirm password',\r\n                TEXT_UPDATE_PASSWORD: 'Update password',\r\n                TEXT_ENTER_YOUR_EMAIL_TO_RESET_YOUR_PASSWORD: 'Enter your E-mail and we will help you recover your password:',\r\n                TEXT_RESET_PASSWORD: 'Restore password',\r\n                TEXT_RESET_PASSWORD_INSTRUCTIONS: 'In a short period of time you will receive an E-mail. Open it and follow the instructions to reset your password.',\r\n                TEXT_SPACE_YEARS: ' years old',\r\n                TEXT_PARTICIPANTS: 'Participants',\r\n                TEXT_NO_PARTICIPANTS_YET: 'It seems that no one has signed up yet. Be the first!',\r\n                TEXT_VERIFICATION_EMAIL_SENT: 'Verification E-mail sent.',\r\n                TEXT_NO_USERS_MATCH_SEARCH: 'There appear to be no users matching your search.',\r\n                TEXT_NO_CHATS_MATCH_SEARCH: 'There appear to be no chats with users matching your search.',\r\n                TEXT_NO_EVENTS_AVAILABLE: 'There seem to be no events available.',\r\n                TEXT_NO_CHATS_AVAILABLE: 'It looks like you do not have any chat yet. Start talking to a user!',\r\n                TEXT_LANGUAGE_INVOLVED_IN_EVENTS: 'Events languages',\r\n                TEXT_LOCATION_PERMISSION_NOT_GRANTED: 'It seems that you have not given permission to access your location. Grant it to have this functionality.',\r\n                TEXT_CONFIRM_EVENT_PARTICIPATION: 'You have signed up for this event.',\r\n                TEXT_CANCEL_EVENT_PARTICIPATION: 'You have canceled your participation in this event.',\r\n                TEXT_APP_LANGUAGE: 'Language',\r\n                TEXT_LANGUAGE_OF_APP: 'Application language',\r\n                TEXT_LANGUAGE_DE: 'German',\r\n                TEXT_LANGUAGE_ZH: 'Chinese',\r\n                TEXT_LANGUAGE_ES: 'Spanish',\r\n                TEXT_LANGUAGE_FR: 'French',\r\n                TEXT_LANGUAGE_EN: 'English',\r\n                TEXT_LANGUAGE_IT: 'Italian',\r\n                TEXT_LANGUAGE_JA: 'Japanese',\r\n                TEXT_LANGUAGE_PT: 'Portuguese',\r\n                TEXT_LANGUAGE_ALL: 'Any language',\r\n                TEXT_WE_BABBLE_SLOGAN: 'Learning languages is now easier',\r\n                TEXT_LOCATION: 'Location',\r\n                TEXT_NOTIFICATIONS: 'Notifications',\r\n                TEXT_GRANTED: 'Granted',\r\n                TEXT_NOT_GRANTED: 'Not granted',\r\n                TEXT_CREATE_EVENT: 'Create event',\r\n                TEXT_PUBLISH: 'Publish',\r\n                TEXT_DATE: 'Date',\r\n                TEXT_LANGUAGES: 'Languages',\r\n                TEXT_INFORMATION: 'Information',\r\n                TEXT_HEADER_IMAGE: 'Header image',\r\n                TEXT_PLACE: 'Place',\r\n                TEXT_ADDRESS: 'Address',\r\n                TEXT_YOU_ARE_ABOUT_TO_REMOVE_EVENT: 'You are going to remove this event',\r\n                TEXT_ARE_YOU_SURE_YOU_WANT_TO_REMOVE_EVENT: 'Are you sure you want to remove this event?',\r\n                TEXT_EDIT_EVENT: 'Edit event'\r\n            }\r\n        }\r\n    },\r\n    dateTimeFormats: {\r\n        'en': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        },\r\n        'es': {\r\n            abbrMonth: {\r\n                month: 'short'\r\n            },\r\n            short: {\r\n                year: 'numeric', month: 'long', day: 'numeric'\r\n            },\r\n            long: {\r\n                year: 'numeric', month: 'short', day: 'numeric',\r\n                weekday: 'short', hour: 'numeric', minute: 'numeric', hour12: true\r\n            }\r\n        }\r\n    }\r\n}","import Vue from 'vue';\r\nimport VueI18n from 'vue-i18n';\r\nimport I18NMessages from \"./I18NMessages\";\r\nVue.use(VueI18n);\r\n\r\nlet localeLanguage = 'es';\r\n\r\nif(navigator.language === 'es' || navigator.language === 'es-ES'){\r\n    localeLanguage = 'es';\r\n}\r\nelse if(navigator.language === 'en' || navigator.language === 'en-US'){\r\n    localeLanguage = 'en';\r\n}\r\n\r\nconst i18n = new VueI18n({\r\n    locale: localeLanguage, // set locale\r\n    messages: I18NMessages.messages, // set locale messages\r\n    dateTimeFormats: I18NMessages.dateTimeFormats\r\n});\r\n\r\nexport default i18n;","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport * as firebase from \"firebase\";\r\nimport Constants from \"../Constants\";\r\nimport {GeoFirestore} from \"geofirestore\";\r\nimport i18n from \"../../i18n\";\r\n\r\nconst genericDatabaseError = i18n.t('messages.ERROR_GENERIC_DATABASE_PROBLEM');\r\nconst alreadyRegisteredEmailError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_EMAIL');\r\nconst emailPasswordCombinationError = i18n.t('messages.ERROR_WRONG_EMAIL_PASSWORD_COMBINATION');\r\nconst tooManyRequestsError = i18n.t('messages.ERROR_TOO_MANY_REQUESTS');\r\nconst genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nconst uploadingImageError = i18n.t('messages.ERROR_UPLOADING_IMAGE');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----     DATABASE (Firebase) INTERACTION      -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {},\r\n    getters: {},\r\n    mutations: {},\r\n    actions: {\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- ACCOUNTS ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserAuth ~                                                              >\r\n        // To determine if user is or is not authenticated                             >\r\n        //----------------------------------------------------------------------------->\r\n        isUserAuth: function () {\r\n            return firebase.auth().currentUser;\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setAccount ~                                                              >\r\n        // To set user account info                                                    >\r\n        // parameters required: data {email, password, name, lastName, role}           >\r\n        //----------------------------------------------------------------------------->\r\n        setAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        'name': data.name,\r\n                        'lastName': data.lastName,\r\n                        'role': 'user',\r\n                        'chats': [],\r\n                        'tokens': [],\r\n                        'language': null\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Account info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setAccountLanguage ~                                                      >\r\n        //  To set app language for that user                                          >\r\n        // parameters required: lang                                                   >\r\n        //----------------------------------------------------------------------------->\r\n        setAccountLanguage: function (context, lang) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        'language': lang\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Account language successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ askForMessagingPermission ~                                               >\r\n        // To asf for messaging push notifications permission                          >\r\n        //----------------------------------------------------------------------------->\r\n        askForMessagingPermission() {\r\n            return new Promise(function (resolve,) {\r\n                firebase.messaging().requestPermission()\r\n                    .then(() => {\r\n                        resolve(true);\r\n                    })\r\n                    .catch(() => {\r\n                        resolve(false);\r\n                    });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generatePushNotificationToken ~                                           >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generatePushNotificationToken() {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                firebase.messaging().getToken().then(async (token) => {\r\n                    if (token) {\r\n                        const currentMessageToken = await window.localStorage.getItem('messagingToken');\r\n\r\n                        console.log('token will be updated', currentMessageToken != token)\r\n                        if (currentMessageToken != token) {\r\n                            console.log(\"token\")\r\n                            let firestoreDB = firebase.firestore();\r\n                            firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                {tokens: firebase.firestore.FieldValue.arrayUnion(token)}\r\n                            )\r\n                                .then(() => {\r\n                                    resolve();\r\n                                })\r\n                                .catch(function () {\r\n                                    reject(genericDatabaseError);\r\n                                });\r\n                        }\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n                }).catch(function () {\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAccount ~                                                              >\r\n        // To get user auth account info                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getAccount() {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"Account info successfully retrieved from firebase\");\r\n                        resolve({\r\n                            id: doc.id,\r\n                            email: firebase.auth().currentUser.email,\r\n                            ...doc.data()\r\n                        });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccountListener ~                                                   >\r\n        // To listen on changes on user account info                                   >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccountListener: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Accounts\").doc(userID)\r\n                        .onSnapshot(function (user) {\r\n                            let formattedUser = {\r\n                                'id': userID,\r\n                                ...user.data(),\r\n                                'listener': docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatListChange\", formattedUser, {root: true}).then(() => {\r\n                                resolve(formattedUser);\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                    firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\r\n                        .then(() => {\r\n                            console.log(\"Success creating account in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            if (error.code == 'auth/email-already-in-use') {\r\n                                reject(alreadyRegisteredEmailError);\r\n                            } else {\r\n                                reject(genericDatabaseError);\r\n                            }\r\n                        });\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setPersistance ~                                                          >\r\n        // To set firebase account persistance                                         >\r\n        //----------------------------------------------------------------------------->\r\n        setPersistance: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(() => {\r\n                        console.log(\"Success setting firebase account persistence.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error)\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log in firebase user account                                             >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().signInWithEmailAndPassword(data.email, data.password)\r\n                    .then(() => {\r\n                        console.log(\"Success logging user in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        if (error.code == 'auth/wrong-password' || error.code == \"auth/user-not-found\") {\r\n                            reject(emailPasswordCombinationError);\r\n                        } else if (error.code == \"auth/too-many-requests\") {\r\n                            reject(tooManyRequestsError);\r\n                        } else {\r\n                            reject(genericError);\r\n                        }\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log out of firebase user account                                         >\r\n        //----------------------------------------------------------------------------->\r\n        logout: function () {\r\n            return new Promise(async function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                if (firebase.auth() != null) {\r\n                    try {\r\n                        await firebase.messaging().getToken().then(async (token) => {\r\n                            if (token) {\r\n                                await firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update(\r\n                                    {tokens: firebase.firestore.FieldValue.arrayRemove(token)}\r\n                                )\r\n                                    .catch(function (error) {\r\n                                        console.error(error);\r\n                                        if (error.code != 'messaging/failed-service-worker-registration'\r\n                                            && error.code != 'messaging/notifications-blocked'\r\n                                            && error.code != 'messaging/unsupported-browser') {\r\n                                            reject(error);\r\n                                        }\r\n                                    });\r\n                            }\r\n\r\n                        }).catch(function (error) {\r\n                            console.error(error);\r\n\r\n                            if (error.code != 'messaging/failed-service-worker-registration'\r\n                                && error.code != 'messaging/notifications-blocked'\r\n                                && error.code != 'messaging/unsupported-browser') {\r\n                                reject(error);\r\n                            }\r\n                        });\r\n                    } catch (error) {\r\n                        console.error(error);\r\n\r\n                        if (error.code != 'messaging/failed-service-worker-registration'\r\n                            && error.code != 'messaging/notifications-blocked'\r\n                            && error.code != 'messaging/unsupported-browser') {\r\n                            reject(error);\r\n                        }\r\n                    }\r\n\r\n                    firebase.auth().signOut()\r\n                        .then(() => {\r\n                            resolve();\r\n                        })\r\n                        .catch(error => {\r\n                            console.error(error);\r\n                            reject(error);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send firebase account email verification                                 >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.sendEmailVerification().then(function () {\r\n                    console.log('Firebase verification email sent.');\r\n                    resolve();\r\n                }, function (error) {\r\n                    console.error(error);\r\n                    if (error.code == \"auth/too-many-requests\") {\r\n                        reject(tooManyRequestsError);\r\n                    } else {\r\n                        reject(genericDatabaseError);\r\n                    }\r\n\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isEmailVerified ~                                                         >\r\n        // To check if firebase account email is verified                              >\r\n        //----------------------------------------------------------------------------->\r\n        isEmailVerified: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().currentUser.reload().then(() => {\r\n                    if (firebase.auth().currentUser.emailVerified) {\r\n                        console.log(\"Firebase account email is verified.\");\r\n                        resolve(true);\r\n                    } else {\r\n                        resolve(false);\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendPasswordResetEmail ~                                                  >\r\n        // To send firebase account password reset email                               >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                firebase.auth().sendPasswordResetEmail(email).then(function () {\r\n                    console.log(\"Password reset email sent.\");\r\n                    resolve();\r\n                }).catch(function (error) {\r\n                    // An error happened.\r\n                    if (error.code == 'auth/user-not-found') {\r\n                        console.log(\"No account attached to the specified email.\");\r\n                        resolve();\r\n                    } else {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountData ~                                                       >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName], [email]}                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountData: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('name')) {\r\n                    batch.update(docRef, {\"name\": data.name});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('lastName')) {\r\n                    batch.update(docRef, {\"lastName\": data.lastName});\r\n                    infoToUpdate = true;\r\n                }\r\n\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Account info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail: function (context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updateEmail(email).then(function () {\r\n                    console.log(\"Account email successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword: function (context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n                let user = firebase.auth().currentUser;\r\n\r\n                user.updatePassword(password).then(function () {\r\n                    console.log(\"Account password successfully updated in firebase\");\r\n                    resolve()\r\n                }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(genericError);\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------- PROFILES ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUID ~                                                         >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUID(context, uid) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(uid).get()\r\n                    .then((doc) => {\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            if (doc.data().hasOwnProperty(\"birthDate\")) {\r\n                                doc.data()[\"birthDate\"] = doc.data()[\"birthDate\"].toDate().setHours(0, 0, 0);\r\n                            }\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfile ~                                                              >\r\n        // To get an user profile by its uid                                           >\r\n        // parameters required: uid                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getProfile(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('getProfileByUID', firebase.auth().currentUser.uid)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo && profileInfo.hasOwnProperty(\"birthDate\")) {\r\n                            profileInfo[\"birthDate\"] = profileInfo[\"birthDate\"].toDate().setHours(0, 0, 0);\r\n                        }\r\n\r\n                        console.log(\"Profile info successfully retrieved from firebase\");\r\n                        resolve(profileInfo);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getMultipleProfilesByUID ~                                                >\r\n        // To get multiple user profiles by their uids                                 >\r\n        // parameters required: ids[]                                                  >\r\n        // return: userProfiles[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getMultipleProfilesByUID(context, ids) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let promises = [];\r\n                let userProfiles = [];\r\n\r\n                ids.forEach(id => {\r\n                    promises.push(\r\n                        context.dispatch('getProfileByUID', id)\r\n                            .then((profileInfo) => {\r\n                                userProfiles.push({\r\n                                    id: id,\r\n                                    ...profileInfo\r\n                                });\r\n                            })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(genericDatabaseError);\r\n                            })\r\n                    );\r\n                });\r\n                Promise.all(promises).then(function () {\r\n                    resolve(userProfiles);\r\n                })\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getProfileByUsername ~                                                    >\r\n        // To get user profile info by its username                                    >\r\n        // parameters required: username                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getProfileByUsername(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").where(\"username\", \"==\", username).get()\r\n                    .then((querySnapshot) => {\r\n                        if (querySnapshot.size > 0) {\r\n                            console.log(\"Profile info successfully retrieved from firebase\");\r\n                            resolve(querySnapshot.docs);\r\n                        } else {\r\n                            console.log(\"Profile info was not found in firebase\");\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfile ~                                                              >\r\n        // To set user profile info                                                    >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        setProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        username: data.username.toLowerCase(),\r\n                        birthDate: new Date(new Date(data.birthDate).setHours(0, 0, 0)),\r\n                        gender: data.gender,\r\n                        description: data.description,\r\n                        avgRating: 0,\r\n                        numRatings: 0,\r\n                        score: 0\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Profile info successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted: function () {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        registrationCompleted: true\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Registration state successfully written in firebase\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile info                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let batch = firestoreDB.batch();\r\n                let docRef = firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid);\r\n                let infoToUpdate = false;\r\n\r\n                if (data.hasOwnProperty('username')) {\r\n                    batch.update(docRef, {\"username\": data.username});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('description')) {\r\n                    batch.update(docRef, {\"description\": data.description});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('gender')) {\r\n                    batch.update(docRef, {\"gender\": data.gender});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('birthDate')) {\r\n                    batch.update(docRef, {\"birthDate\": new Date(new Date(data.birthDate).setHours(0, 0, 0))});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('knownLanguages')) {\r\n                    batch.update(docRef, {\"knownLanguages\": data.knownLanguages});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (data.hasOwnProperty('languagesToLearn')) {\r\n                    batch.update(docRef, {\"languagesToLearn\": data.languagesToLearn});\r\n                    infoToUpdate = true;\r\n                }\r\n                if (infoToUpdate) {\r\n                    batch.commit().then(() => {\r\n                        console.log(\"Profile info successfully updated in firebase\");\r\n                        resolve();\r\n                    })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        knownLanguages: data.knownLanguages,\r\n                        languagesToLearn: data.languagesToLearn\r\n                    },\r\n                    {\r\n                        merge: true\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User languages info successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadProfileImg ~                                                        >\r\n        // To upload a profile image to firebase storage                               >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        uploadProfileImg: function (context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let userID = firebase.auth().currentUser.uid;\r\n                let path = \"UserProfileImages/\" + userID;\r\n\r\n                let data = {\r\n                    'img': img,\r\n                    'path': path\r\n                };\r\n\r\n                context.dispatch('uploadImg', data)\r\n                    .then((url) => {\r\n                        resolve(url);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadImg ~                                                               >\r\n        // To upload an image to firebase storage                                      >\r\n        // parameters required: data {path, img}                                       >\r\n        //----------------------------------------------------------------------------->\r\n        uploadImg: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let storageDB = firebase.storage().ref().child(data.path);\r\n                storageDB.putString(data.img, 'base64')\r\n                    .then(() => {\r\n                        storageDB.getDownloadURL().then((url) => {\r\n                            console.log('User profile image uploaded.');\r\n                            resolve(url)\r\n                        })\r\n                            .catch((error) => {\r\n                                console.error(error);\r\n                                reject(uploadingImageError);\r\n                            });\r\n                    }).catch(function (error) {\r\n                    console.error(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image url in firebase profile                           >\r\n        // parameters required: url                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg: function (context, url) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Profiles\").doc(firebase.auth().currentUser.uid).set(\r\n                    {\r\n                        profileImg: url\r\n                    },\r\n                    {merge: true}\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"User profile image successfully written in firebase.\");\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateUserLocation ~                                                      >\r\n        // To update user location in firebase using GeoFirestore library              >\r\n        // parameters required: location{lat, lng}                                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateUserLocation: function (context, location) {\r\n            let geoFirestore = new GeoFirestore(firebase.firestore());\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                geoFirestore.collection('UserLocations').doc(firebase.auth().currentUser.uid).set({\r\n                    coordinates: new firebase.firestore.GeoPoint(location.lat, location.lng),\r\n                    date: new Date()\r\n                }).then(function () {\r\n                    console.log(\"User location successfully written in firebase.\");\r\n                    resolve();\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get user location                                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"UserLocations\").doc(firebase.auth().currentUser.uid).get()\r\n                    .then((doc) => {\r\n                        console.log(\"User location successfully retrieved from firebase.\");\r\n                        let location = {\r\n                            'lat': doc.data().l[0],\r\n                            'lng': doc.data().l[1]\r\n                        };\r\n                        resolve(location);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*------------------------  RATINGS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        // return: ratingsInfo/null                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings: function () {\r\n            let firestoreDB = firebase.firestore();\r\n\r\n            return new Promise(function (resolve, reject) {\r\n                firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).get().then(function (doc) {\r\n                    console.log(\"User ratings successfully retrieved from firebase.\");\r\n\r\n                    if (doc.exists) {\r\n                        resolve(doc.data());\r\n                    } else {\r\n                        resolve(null);\r\n                    }\r\n                })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRating ~                                                              >\r\n        // To set user rating given by the logged user                                 >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        setRating: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let newRating = {};\r\n\r\n                newRating[data.id] = data.rating;\r\n                if (data.rating) {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).set(newRating, {merge: true})\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully written in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                } else {\r\n                    firestoreDB.collection(\"Ratings\").doc(firebase.auth().currentUser.uid).update({\r\n                        [data.id]: firebase.firestore.FieldValue.delete()\r\n                    })\r\n                        .then(() => {\r\n                            console.log(\"Rating successfully deleted in firebase.\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------  SEARCH ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextUsersPageEmpty ~                                                    >\r\n        // To check that if we search users with pagination, next page won't be empty  >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextUsersPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let lastUserShowed = data.lastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextUsersPage ~                                                        >\r\n        // To get search users with pagination                                         >\r\n        // parameters required: data{lastUserShowed, limit, filters}                   >\r\n        // return: {newLastUserShowed, users}                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getNextUsersPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastUserShowed;\r\n                let lastUserShowed = data.lastUserShowed;\r\n\r\n                page = firestoreDB.collection(\"Profiles\");\r\n\r\n                // --> USERNAME FILTERING\r\n                if (data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    if (lastUserShowed == null) {\r\n                        lastUserShowed = data.filters.username;\r\n                    }\r\n                }\r\n                // --> END USERNAME FILTERING\r\n\r\n                // --> GENDER FILTERING\r\n                if (data.filters.gender === \"M\") {\r\n                    page = page.where(\"gender\", \"==\", \"M\");\r\n                    //console.log(\"Filtering by gender: M.\");\r\n                } else if (data.filters.gender === \"W\") {\r\n                    page = page.where(\"gender\", \"==\", \"W\");\r\n                    //console.log(\"Filtering by gender: W.\");\r\n                }\r\n                // --> END GENDER FILTERING\r\n\r\n                // --> AGE FILTERING\r\n\r\n                page = page.where(\"registrationCompleted\", \"==\", true);\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE || data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    page = page.orderBy(\"birthDate\");\r\n                }\r\n\r\n                if (data.filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[0]);\r\n                    currentDate.setHours(0, 0, 0);\r\n                    page = page.where(\"birthDate\", \"<\", currentDate);\r\n                    //console.log(\"Filtering by min age.\");\r\n                }\r\n\r\n                if (data.filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                    let currentDate = new Date();\r\n                    currentDate.setFullYear(currentDate.getFullYear() - data.filters.ageRange[1] - 1);\r\n                    currentDate.setHours(0, 0, 0)\r\n                    page = page.where(\"birthDate\", \">\", currentDate);\r\n\r\n                    //console.log(\"Filtering by max age.\");\r\n                }\r\n                // --> END AGE FILTERING\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.language.filterBy == \"languageToLearn\" && data.filters.language.languageToLearn != \"all\") {\r\n                    page = page.where(\"languagesToLearn\", \"array-contains\", data.filters.language.languageToLearn);\r\n                    //console.log(\"Filtering by languageToLearn: \" + data.filters.language.languageToLearn + \".\");\r\n                } else if (data.filters.language.filterBy == \"knownLanguage\" && data.filters.language.knownLanguage != \"all\") {\r\n                    page = page.where(\"knownLanguages\", \"array-contains\", data.filters.language.knownLanguage);\r\n                    //console.log(\"Filtering by knownLanguage: \" + data.filters.language.knownLanguage + \".\");\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n\r\n                if (data.lastUserShowed == null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAt(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else if (data.lastUserShowed != null && data.filters.username != null && data.filters.username != undefined && data.filters.username != '') {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).endAt(data.filters.username + \"\\uf8ff\").limit(data.limit);\r\n                } else {\r\n                    page = page.orderBy(\"username\").startAfter(lastUserShowed).limit(data.limit);\r\n                }\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        // To remove the logged user\r\n                        let searchedUserIndex = documentSnapshots.docs.findIndex(function (searchedUser) {\r\n                            return searchedUser.id == firebase.auth().currentUser.uid;\r\n                        });\r\n\r\n                        let newDocs = documentSnapshots.docs;\r\n\r\n                        if (searchedUserIndex != -1) {\r\n                            newDocs.splice(searchedUserIndex, 1);\r\n                        }\r\n                        newLastUserShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        newDocs = newDocs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n\r\n                        resolve({\r\n                            newLastUserShowed: newLastUserShowed,\r\n                            users: newDocs\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUserIDs ~                                                        >\r\n        // To get IDs of nearby users                                                  >\r\n        // parameters required: data{location, maxDistance}                            >\r\n        // return: ids[]                                                               >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUserIDs(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let geofirestore = new GeoFirestore(firebase.firestore());\r\n                let queryNearbyUsers = geofirestore.collection('UserLocations').near({\r\n                    center: new firebase.firestore.GeoPoint(data.location.lat, data.location.lng),\r\n                    radius: data.maxDistance\r\n                });\r\n\r\n                queryNearbyUsers.get().then((snapshot) => {\r\n                    let ids = [];\r\n                    snapshot.docs.forEach(doc => {\r\n                        if (doc.id != firebase.auth().currentUser.uid)\r\n                            ids.push(doc.id);\r\n                    });\r\n                    resolve(ids);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(uploadingImageError);\r\n                });\r\n            });\r\n        },\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- EVENTS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                            >\r\n        // To get an event by its id                                                   >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(id).get()\r\n                    .then((doc) => {\r\n\r\n                        if (doc.data() != null && doc.data() != undefined) {\r\n                            resolve({\r\n                                id: doc.id,\r\n                                ...doc.data()\r\n                            });\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ uploadEventHeaderImg ~                                                    >\r\n        // To upload an event header image to firebase storage                         >\r\n        // parameters required: data{img, eventID}                                     >\r\n        //----------------------------------------------------------------------------->\r\n        uploadEventHeaderImg: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let path = \"EventHeaderImages/\" + data.eventID;\r\n\r\n                let data2 = {\r\n                    'img': data.img,\r\n                    'path': path\r\n                };\r\n\r\n                context.dispatch('uploadImg', data2)\r\n                    .then((url) => {\r\n                        resolve(url);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(uploadingImageError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createEvent ~                                                             >\r\n        // To create an event                                                          >\r\n        // parameters required: data {date, description, headerImg, location,          >\r\n        //                            involvedLanguages, name}                         >\r\n        //----------------------------------------------------------------------------->\r\n        createEvent: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n                let eventRef = firestoreDB.collection(\"Events\").doc();\r\n\r\n                data.location.coordinates = new firebase.firestore.GeoPoint(data.location.coordinates.lat, data.location.coordinates.lng);\r\n\r\n                context.dispatch('uploadEventHeaderImg', {'img': data.headerImg, 'eventID': eventRef.id})\r\n                    .then((url) => {\r\n                        let eventData = {\r\n                            name: data.name,\r\n                            date: new Date(new Date(data.date).setHours(0, 0, 0)),\r\n                            participants: [],\r\n                            headerImg: url,\r\n                            description: data.description,\r\n                            involvedLanguages: data.involvedLanguages,\r\n                            location: data.location\r\n                        };\r\n                        eventRef.set(\r\n                            {\r\n                                ...eventData\r\n                            },\r\n                            {\r\n                                merge: true\r\n                            }\r\n                        )\r\n                            .then(() => {\r\n                                console.log(\"Event successfully created in firebase\");\r\n                                resolve({...eventData, id: eventRef.id});\r\n                            })\r\n                            .catch(function (error) {\r\n                                console.error(error);\r\n                                reject(genericDatabaseError);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeEvent ~                                                             >\r\n        // To remove an event                                                          >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        removeEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n                    let firestoreDB = firebase.firestore();\r\n\r\n                    firestoreDB.collection(\"Events\").doc(eventID).delete()\r\n                        .then(() => {\r\n                            console.log(\"Event successfully removed from firebase\");\r\n                            resolve();\r\n                        })\r\n                        .catch(function (error) {\r\n                            console.error(error);\r\n                            reject(genericDatabaseError);\r\n                        });\r\n\r\n                }\r\n            );\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateEvent ~                                                             >\r\n        // To update an event                                                          >\r\n        // parameters required: data {[date], [description], [headerImg], [location],  >\r\n        //                            [involvedLanguages], [name]}                     >\r\n        //----------------------------------------------------------------------------->\r\n        updateEvent: function (context, data) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                if (data.hasOwnProperty('location')) {\r\n                    data.location.coordinates = new firebase.firestore.GeoPoint(data.location.coordinates.lat, data.location.coordinates.lng);\r\n                }\r\n\r\n                if (data.hasOwnProperty('headerImg')) {\r\n                    await context.dispatch('uploadEventHeaderImg', {'img': data.headerImg, 'eventID': data.id})\r\n                        .then((url) => {\r\n                            data.headerImg = url;\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n\r\n                if (data.hasOwnProperty('date')) {\r\n                    data.date = new Date(new Date(data.date).setHours(0, 0, 0));\r\n                }\r\n\r\n                console.log(data)\r\n\r\n                firestoreDB.collection(\"Events\").doc(data.id).update(\r\n                    {\r\n                        ...data\r\n                    }\r\n                )\r\n                    .then(() => {\r\n                        console.log(\"Event successfully updated in firebase\");\r\n                        let returnValue = {};\r\n\r\n                        if (data.hasOwnProperty('headerImg')) {\r\n                            returnValue['headerImg'] = data.headerImg;\r\n                        }\r\n\r\n                        if (data.hasOwnProperty('date')) {\r\n                            returnValue['date'] = new Date(data.date)\r\n                        }\r\n\r\n                        resolve(returnValue);\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNextEventsPage ~                                                       >\r\n        // To get events with pagination                                               >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: {newLastEventShowed, events}                                        >\r\n        //----------------------------------------------------------------------------->\r\n        getNextEventsPage: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let newLastEventShowed;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                if (lastEventShowed == null) {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAt(lastEventShowed);\r\n                } else {\r\n                    page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                }\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        newLastEventShowed = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve({\r\n                            newLastEventShowed: newLastEventShowed,\r\n                            events: eventsRetrieved\r\n                        });\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventsToBeCelebrated ~                                                 >\r\n        // To get events which will be celebrated in the future                        >\r\n        // return: events[]                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getEventsToBeCelebrated: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\");\r\n\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        let eventsRetrieved = documentSnapshots.docs.map(doc => {\r\n                            const id = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {id, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(eventsRetrieved);\r\n\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isNextEventsPageEmpty ~                                                   >\r\n        // To check if next page of events is empty                                    >\r\n        // parameters required: data{lastEventShowed, limit}                           >\r\n        // return: true/false                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        isNextEventsPageEmpty: function (context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page;\r\n                let lastEventShowed = data.lastEventShowed;\r\n                let currentDate = new Date();\r\n\r\n                page = firestoreDB.collection(\"Events\");\r\n\r\n                // --> LANGUAGES FILTERING\r\n                if (data.filters.languageInvolved !== \"all\") {\r\n                    page = page.where(\"involvedLanguages\", \"array-contains\", data.filters.languageInvolved);\r\n                }\r\n                // --> END LANGUAGES FILTERING\r\n\r\n                page = page.where(\"date\", \">\", currentDate).orderBy(\"date\").startAfter(lastEventShowed);\r\n                page.limit(data.limit).get()\r\n                    .then(function (documentSnapshots) {\r\n\r\n                        resolve(documentSnapshots.docs.length == 0);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add the logged user to an Event                                          >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayUnion(firebase.auth().currentUser.uid)\r\n                }).then(function () {\r\n                    console.log(\"User successfully added to event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove the logged user from an Event                                     >\r\n        // parameters required: eventID                                                >\r\n        // return: userID                                                              >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Events\").doc(eventID).update({\r\n                    participants: firebase.firestore.FieldValue.arrayRemove(firebase.auth().currentUser.uid)\r\n                }).then(function () {\r\n                    console.log(\"User successfully remove from event in firebase.\")\r\n                    resolve(firebase.auth().currentUser.uid);\r\n                }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        },\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*--------------------------  CHATS ----------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatMessagesListener ~                                              >\r\n        // To create a listener for chat messages by chat id                           >\r\n        // parameters required: chatID                                                 >\r\n        // return: messages                                                            >\r\n        //----------------------------------------------------------------------------->\r\n        createChatMessagesListener: function (context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                try {\r\n                    let docRef = firestoreDB.collection(\"Chats\").doc(chatID).collection(\"Messages\")\r\n                        .onSnapshot(function (chatMessages) {\r\n\r\n                            let messages = chatMessages.docChanges().map(change => {\r\n                                const id = change.doc.id;\r\n                                const dataDocs = change.doc.data();\r\n                                return {id, change: change.type, ...dataDocs};\r\n                            });\r\n\r\n                            let formattedChatMessages = {\r\n                                'id': chatID,\r\n                                'messages': messages,\r\n                                'listener': docRef\r\n                            };\r\n                            context.dispatch(\"chats/manageChatMessagesChange\", formattedChatMessages, {root: true}).then(() => {\r\n                                resolve();\r\n                            })\r\n\r\n                        })\r\n                } catch (e) {\r\n                    console.error(e);\r\n                    reject(genericDatabaseError);\r\n                }\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setMessagesToRead ~                                                       >\r\n        // To set messages unread in chat to read state                                >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setMessagesToRead(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let batch = firestoreDB.batch();\r\n\r\n                data.messages.forEach(message => {\r\n                    batch.update(firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc(message),\r\n                        {\r\n                            'read': true\r\n                        });\r\n                });\r\n\r\n                batch.commit().then(function () {\r\n                    resolve();\r\n                })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addMessagesToChat ~                                                       >\r\n        // To add a new message to a chat in firebase                                  >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        addMessagesToChat(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newMessage = {\r\n                    'date': firebase.firestore.FieldValue.serverTimestamp(),\r\n                    'sender': data.message.sender,\r\n                    'read': false,\r\n                    'text': data.message.text\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(data.chatID).collection(\"Messages\").doc().set(newMessage)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding message\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addChat ~                                                                 >\r\n        // To create a new chat and add it to the user chat list                       >\r\n        // parameters required: chat{id, users[]}                                      >\r\n        //----------------------------------------------------------------------------->\r\n        addChat(context, chat) {\r\n            return new Promise(function (resolve, reject) {\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                let newChat = {\r\n                    'users': chat.users\r\n                };\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chat.id).set(newChat)\r\n                    .then(() => {\r\n                        firestoreDB.collection(\"Accounts\").doc(firebase.auth().currentUser.uid).update({chats: firebase.firestore.FieldValue.arrayUnion(chat.id)})\r\n                            .then(() => {\r\n                                resolve();\r\n                            });\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.error(\"Error adding chat\", error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getChatByID ~                                                             >\r\n        // To get a chat by its id                                                     >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getChatByID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n\r\n                firestoreDB.collection(\"Chats\").doc(chatID).get()\r\n                    .then((doc) => {\r\n                        resolve({\r\n                            id: doc.id,\r\n                            ...doc.data()\r\n                        });\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericDatabaseError);\r\n                    });\r\n            });\r\n        }\r\n        ,\r\n\r\n\r\n        /*--------------------------------------------------------------*/\r\n        /*-------------------------- RANKING ---------------------------*/\r\n        /*--------------------------------------------------------------*/\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getTop100RankingUsers ~                                                   >\r\n        // To get the top 100 ranked users in the app                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getTop100RankingUsers: function () {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                let page = firestoreDB.collection(\"Ranking\");\r\n                page = page.orderBy(\"position\").limit(Constants.MAX_RANKING_PAGE_SIZE);\r\n                page.get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        resolve(newDocs);\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        }\r\n        ,\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserRankingPositionByID ~                                              >\r\n        // To get user position in app ranking                                         >\r\n        // parameters required: userID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        getUserRankingPositionByID: function (context, userID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let firestoreDB = firebase.firestore();\r\n                firestoreDB.collection(\"Ranking\").where(\"id\", \"==\", userID).get()\r\n                    .then(function (documentSnapshots) {\r\n                        let newDocs = documentSnapshots.docs.map(doc => {\r\n                            const position = doc.id;\r\n                            const dataDocs = doc.data();\r\n                            return {position: position, ...dataDocs};\r\n                        });\r\n\r\n                        if (newDocs.length > 1 || newDocs.length < 1) {\r\n                            resolve(null);\r\n                        } else {\r\n                            resolve(newDocs[0]);\r\n                        }\r\n\r\n                    }).catch((error) => {\r\n                    console.log(error);\r\n                    reject(genericDatabaseError);\r\n                });\r\n            });\r\n        }\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport AuxMethods from \"../AuxMethods\";\r\nimport database from \"./database\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----        APP PERMISSIONS MANAGEMENT        -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database\r\n    },\r\n    state: {\r\n        isGeolocationPermissionGranted: false,\r\n        isPushNotificationPermissionGranted: false\r\n    },\r\n    getters: {\r\n        getIsGeolocationPermissionGranted: (state) => {\r\n            return state.isGeolocationPermissionGranted;\r\n        },\r\n        getIsPushNotificationPermissionGranted: (state) => {\r\n            return state.isPushNotificationPermissionGranted;\r\n        }\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.isGeolocationPermissionGranted = false;\r\n            state.isPushNotificationPermissionGranted = false;\r\n        },\r\n        setIsGeolocationPermissionGranted(state, isGeolocationPermissionGranted) {\r\n            state.isGeolocationPermissionGranted = isGeolocationPermissionGranted;\r\n        },\r\n        setIsPushNotificationPermissionGranted(state, isPushNotificationPermissionGranted) {\r\n            state.isPushNotificationPermissionGranted = isPushNotificationPermissionGranted;\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForGeolocationPermission ~                                           >\r\n        // To check if geolocation permission has been granted by the user             >\r\n        //----------------------------------------------------------------------------->\r\n        checkForGeolocationPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                if (navigator.permissions == undefined) {\r\n                    context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                    resolve(false);\r\n                } else if (!context.getters.getIsGeolocationPermissionGranted) {\r\n                    navigator.permissions.query({name: 'geolocation'}).then(function (result) {\r\n                        console.log(result.state)\r\n                        if (result.state == 'granted') {\r\n                            // Permission is already granted\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                            context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n\r\n                            resolve(true);\r\n                        } else if (result.state == 'prompt') {\r\n                            // Navigator will ask for permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n                        } else if (result.state == 'denied') {\r\n                            // User has denied permission\r\n                            context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                            resolve(false);\r\n                        }\r\n\r\n                        result.onchange = function () {\r\n                            console.log(result.state)\r\n                            // Whenever permission state changes\r\n\r\n                            if (result.state == 'granted') {\r\n                                // Permission is already granted\r\n                                context.commit(\"setIsGeolocationPermissionGranted\", true);\r\n\r\n                                context.dispatch('user/getLocation', null, {root: true}).catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n\r\n                                resolve(true);\r\n                            } else if (result.state == 'prompt') {\r\n                                // Navigator will ask for permission\r\n                                context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                                navigator.geolocation.getCurrentPosition(AuxMethods.emptyCallback);\r\n\r\n                            } else if (result.state == 'denied') {\r\n                                // User has denied permission\r\n                                context.commit(\"setIsGeolocationPermissionGranted\", false);\r\n                                resolve(false);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkForPushNotificationsPermission ~                                     >\r\n        // To check if push notifications permission has been granted by the user      >\r\n        //----------------------------------------------------------------------------->\r\n        checkForPushNotificationsPermission: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch(\"database/askForMessagingPermission\").then(function (isPermissionGranted) {\r\n                    if (isPermissionGranted) {\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", true);\r\n                        context.dispatch('user/generateNotificationToken', null, {root: true}).catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                        resolve(true);\r\n                    } else {\r\n                        context.commit(\"setIsPushNotificationPermissionGranted\", false);\r\n                        resolve(false);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                APP USERS                 -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        /* All users retrieved */\r\n        users: {},\r\n\r\n        /* User IDs result of the searching process */\r\n        searchedUsersIDs: [],\r\n        lastUserShowed: null,\r\n        genderFilter: \"O\",\r\n        ageRangeFilter: [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE],\r\n        languageFilter: {\r\n            filterBy: \"languageToLearn\",\r\n            knownLanguage: \"all\",\r\n            languageToLearn: \"all\"\r\n        },\r\n        searchByUsernameFilter: null,\r\n        maxDistanceFilter: 3,\r\n        maxDistanceRanges: [1, 5, 10, null],\r\n        maxDistanceRangesText: ['1 km', '5 km', '10 km', '∞'],\r\n        locationFilter: null,\r\n        nearbyUsersIDs: null,\r\n\r\n        /* Filtering fields */\r\n        distanceSearchFilter: null\r\n},\r\n    getters: {\r\n\r\n        getUsers: (state) => {\r\n            return state.users;\r\n        },\r\n        getLanguagesByUserID: (state) => (id) => {\r\n            return state.users[id].knownLanguages.concat(state.users[id].languagesToLearn);\r\n        },\r\n        getGenderFilter: (state) => {\r\n            return state.genderFilter;\r\n        },\r\n        getAgeRangeFilter: (state) => {\r\n            return state.ageRangeFilter;\r\n        },\r\n        getLanguageFilter: (state) => {\r\n            return state.languageFilter;\r\n        },\r\n        getSearchByUsernameFilter: (state) => {\r\n            return state.searchByUsernameFilter;\r\n        },\r\n        getMaxDistanceFilter: (state) => {\r\n            return state.maxDistanceFilter;\r\n        },\r\n        getMaxDistanceRanges: (state) => {\r\n            return state.maxDistanceRanges;\r\n        },\r\n        getMaxDistanceRangesText: (state) => {\r\n            return state.maxDistanceRangesText;\r\n        },\r\n        getUserByID: (state) => (id) => {\r\n            return state.users[id];\r\n        },\r\n        getNearbyUsersIDs: (state) => {\r\n            return state.nearbyUsersIDs;\r\n        },\r\n        getNearbyUsersIDsLength: (state) => {\r\n            return state.nearbyUsersIDs.length;\r\n        },\r\n        areThereFiltersOn: (state, getters) => {\r\n            let filters = getters.getFilters;\r\n            let filtersOn = false;\r\n\r\n            if (filters.gender === \"M\" || filters.gender === \"W\"\r\n                || filters.ageRange[0] > Constants.MIN_USER_AGE\r\n                || filters.ageRange[1] < Constants.MAX_USER_AGE\r\n                || (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\")\r\n                || (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\")\r\n                || filters.maxDistance != null) {\r\n                filtersOn = true;\r\n            }\r\n\r\n            return filtersOn;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                gender: state.genderFilter,\r\n                ageRange: state.ageRangeFilter,\r\n                language: state.languageFilter,\r\n                maxDistance: state.maxDistanceRanges[state.maxDistanceFilter],\r\n                location: state.locationFilter,\r\n                username: state.searchByUsernameFilter\r\n            };\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getSearchedUsers: (state) => {\r\n\r\n            let searchedUsersReturn = [];\r\n\r\n            state.searchedUsersIDs.forEach(userID => {\r\n                searchedUsersReturn.push({\r\n                    id: userID,\r\n                    ...state.users[userID]\r\n                });\r\n            });\r\n\r\n            return searchedUsersReturn;\r\n        },\r\n        getSearchedUsersIDsLength: (state) => {\r\n            return state.searchedUsersIDs.length;\r\n        },\r\n        getSearchedUsersIDs: (state) => {\r\n            return state.searchedUsersIDs;\r\n        }\r\n},\r\n    mutations: {\r\n        resetState(state) {\r\n            /* All users retrieved */\r\n            state.users = {};\r\n\r\n            /* User IDs result of the searching process */\r\n            state.searchedUsersIDs = [];\r\n            state.lastUserShowed = null;\r\n            state.genderFilter = \"O\";\r\n            state.ageRangeFilter = [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE];\r\n            state.languageFilter = {\r\n                'filterBy': \"languageToLearn\",\r\n                'knownLanguage': \"all\",\r\n                'languageToLearn': \"all\"\r\n            };\r\n            state.searchByUsernameFilter = null;\r\n            state.maxDistanceFilter = 3;\r\n            state.maxDistanceRanges = [1000, 5000, 10000, null];\r\n            state.maxDistanceRangesText = ['1 km', '5 km', '10 km', '∞'];\r\n            state.locationFilter = null;\r\n            state.nearbyUsersIDs = null;\r\n\r\n            /* Filtering fields */\r\n            state.distanceSearchFilter = null;\r\n        },\r\n        setUsers(state, users) {\r\n            state.users = users;\r\n        },\r\n        setGenderFilter: (state, genderFilter) => {\r\n            state.genderFilter = genderFilter;\r\n        },\r\n        setAgeRangeFilter: (state, ageRangeFilter) => {\r\n            state.ageRangeFilter = ageRangeFilter;\r\n        },\r\n        setNearbyUsersIDs: (state, nearbyUsersIDs) => {\r\n            state.nearbyUsersIDs = nearbyUsersIDs;\r\n        },\r\n        setLanguageFilter: (state, languageFilter) => {\r\n            state.languageFilter = languageFilter;\r\n        },\r\n        setLocationFilter: (state, locationFilter) => {\r\n            state.locationFilter = locationFilter;\r\n        },\r\n        setSearchByUsernameFilter: (state, searchByUsernameFilter) => {\r\n            state.searchByUsernameFilter = searchByUsernameFilter;\r\n        },\r\n        setMaxDistanceFilter: (state, maxDistanceFilter) => {\r\n            state.maxDistanceFilter = maxDistanceFilter;\r\n        },\r\n        addUser(state, user) {\r\n            state.users[user.id] = user;\r\n        },\r\n        addSearchedUserID(state, userID) {\r\n            if (-1 == state.searchedUsersIDs.findIndex(id => {\r\n                return id == userID;\r\n            })) {\r\n                state.searchedUsersIDs.push(userID);\r\n            }\r\n        },\r\n        resetSearchedUsersIDs(state) {\r\n            state.searchedUsersIDs = [];\r\n        },\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRating(state, data) {\r\n            let userTo = state.users[data.id];\r\n\r\n            if (data.prev == null) {\r\n                //new rate\r\n                let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                newAvgRating += data.rating;\r\n                newAvgRating /= (userTo.numRatings + 1);\r\n                state.users[data.id].avgRating = newAvgRating;\r\n                state.users[data.id].numRatings = userTo.numRatings + 1;\r\n            } else {\r\n                if (data.rating == null) {\r\n                    //remove rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating - data.prev;\r\n                    if ((userTo.numRatings - 1) != 0)\r\n                        newAvgRating /= (userTo.numRatings - 1);\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                    state.users[data.id].numRatings = userTo.numRatings - 1;\r\n                } else {\r\n                    //modify rate\r\n                    let newAvgRating = userTo.avgRating * userTo.numRatings;\r\n                    newAvgRating = newAvgRating + data.rating - data.prev;\r\n                    if (userTo.numRatings != 0)\r\n                        newAvgRating /= userTo.numRatings;\r\n                    state.users[data.id].avgRating = newAvgRating;\r\n                }\r\n\r\n            }\r\n        }\r\n},\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            context.commit('resetState');\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getSearchedUsers ~                                                        >\r\n        // To list searched users using pagination                                     >\r\n        // return: true/false (are there more users to show?)                          >\r\n        //----------------------------------------------------------------------------->\r\n        getSearchedUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                if (filters.location != null && filters.location != undefined && filters.maxDistance != null) {\r\n                    if (context.getters.getLastUserShowed == null) {\r\n                        context.dispatch('database/getNearbyUserIDs', {\r\n                            location: filters.location,\r\n                            maxDistance: filters.maxDistance\r\n                        })\r\n                            .then((ids) => {\r\n                                context.commit('setNearbyUsersIDs', ids);\r\n                                context.dispatch('getNearbyUsersProfiles')\r\n                                    .then(() => {\r\n                                        context.dispatch('areThereMoreNearbyUsers')\r\n                                            .then((areThereMore) => {\r\n                                                resolve(areThereMore);\r\n                                            })\r\n                                            .catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    } else {\r\n                        context.dispatch('getNearbyUsersProfiles')\r\n                            .then(() => {\r\n                                context.dispatch('areThereMoreNearbyUsers')\r\n                                    .then((areThereMore) => {\r\n                                        resolve(areThereMore);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    }\r\n                } else {\r\n                    context.dispatch('database/getNextUsersPage', {\r\n                        lastUserShowed: context.getters.getLastUserShowed,\r\n                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                        filters: filters\r\n                    })\r\n                        .then((data) => {\r\n                            context.commit('setLastUserShowed', data.newLastUserShowed);\r\n\r\n                            data.users.forEach(user => {\r\n                                context.commit('addUser', user);\r\n                                context.commit('addSearchedUserID', user.id);\r\n                            });\r\n                            if (data.users.length > 0) {\r\n\r\n                                context.dispatch('database/isNextUsersPageEmpty', {\r\n                                    lastUserShowed: context.getters.getLastUserShowed,\r\n                                    limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                    filters: filters\r\n                                })\r\n                                    .then((isEmpty) => {\r\n                                        if (data.users.length > 0 && data.users.length < Constants.SEARCHED_USERS_PAGE_SIZE\r\n                                            && !isEmpty) {\r\n                                            context.dispatch('database/getNextUsersPage', {\r\n                                                lastUserShowed: context.getters.getLastUserShowed,\r\n                                                limit: Constants.SEARCHED_USERS_PAGE_SIZE - data.users.length,\r\n                                                filters: filters\r\n                                            })\r\n                                                .then((data2) => {\r\n                                                    context.commit('setLastUserShowed', data2.newLastUserShowed);\r\n                                                    data2.users.forEach(user => {\r\n                                                        context.commit('addUser', user);\r\n                                                        context.commit('addSearchedUserID', user.id);\r\n                                                    });\r\n                                                    context.dispatch('database/isNextUsersPageEmpty', {\r\n                                                        lastUserShowed: context.getters.getLastUserShowed,\r\n                                                        limit: Constants.SEARCHED_USERS_PAGE_SIZE,\r\n                                                        filters: filters\r\n                                                    })\r\n                                                        .then((isEmpty2) => {\r\n                                                            resolve(!isEmpty2);\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                }).catch((error) => {\r\n                                                reject(error);\r\n                                            });\r\n                                        } else {\r\n                                            resolve(!isEmpty);\r\n                                        }\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n                            }\r\n                            else{\r\n                                resolve(false);\r\n                            }\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreNearbyUsers ~                                                 >\r\n        // To check if there are valid nearby users to show yet                        >\r\n        // return: true/false (are there more valid nearby users to show?)             >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreNearbyUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n                let lastUserShowed = context.getters.getLastUserShowed;\r\n                let i;\r\n\r\n                while (lastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed + 1; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n\r\n                    }\r\n\r\n                    lastUserShowed = i - 1;\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then((userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (!user.registrationCompleted) {\r\n                                    isValid = false;\r\n                                }\r\n\r\n                                if (isValid) {\r\n                                    resolve(true);\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n\r\n                resolve(false);\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getNearbyUsersProfiles ~                                                  >\r\n        // To show valid nearby users with pagination                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getNearbyUsersProfiles(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let usersAdded = 0;\r\n                let allIDs = context.getters.getNearbyUsersIDs;\r\n                let filters = context.getters.getFilters;\r\n\r\n                while (usersAdded < Constants.SEARCHED_USERS_PAGE_SIZE && context.getters.getLastUserShowed + 1 < context.getters.getNearbyUsersIDsLength) {\r\n                    let i;\r\n                    let lastUserShowed = context.getters.getLastUserShowed;\r\n\r\n                    if (lastUserShowed == null) {\r\n                        i = 0;\r\n                        lastUserShowed = 0;\r\n                    } else {\r\n                        i = lastUserShowed + 1;\r\n                    }\r\n\r\n                    let idsToGetProfiles = [];\r\n                    for (; i < Constants.SEARCHED_USERS_PAGE_SIZE + lastUserShowed; i++) {\r\n                        if (i == context.getters.getNearbyUsersIDsLength)\r\n                            break;\r\n\r\n                        idsToGetProfiles.push(allIDs[i]);\r\n                    }\r\n\r\n                    context.commit('setLastUserShowed', i - 1);\r\n\r\n                    await context.dispatch('database/getMultipleProfilesByUID', idsToGetProfiles)\r\n                        .then(async (userProfiles) => {\r\n                            userProfiles.forEach(user => {\r\n                                let isValid = true;\r\n\r\n                                // --> USERNAME FILTERING\r\n                                if (filters.username != null && filters.username != undefined && filters.username != ''\r\n                                    && !user.username.startsWith(filters.username)) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END USERNAME FILTERING\r\n\r\n                                // --> GENDER FILTERING\r\n                                if ((filters.gender === \"M\" && user.gender !== \"M\")\r\n                                    || (filters.gender === \"W\" && user.gender !== \"W\")) {\r\n                                    isValid = false;\r\n                                }\r\n                                // --> END GENDER FILTERING\r\n\r\n                                // --> AGE FILTERING\r\n                                if (filters.ageRange[0] > Constants.MIN_USER_AGE || filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                    if (filters.ageRange[0] > Constants.MIN_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[0]);\r\n                                        currentDate.setHours(0, 0, 0);\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) >= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (filters.ageRange[1] < Constants.MAX_USER_AGE) {\r\n                                        let currentDate = new Date();\r\n                                        currentDate.setFullYear(currentDate.getFullYear() - filters.ageRange[1] - 1);\r\n                                        currentDate.setHours(0, 0, 0)\r\n                                        if (new Date(user.birthDate.toDate().setHours(0, 0, 0)) <= new Date(currentDate)) {\r\n                                            isValid = false;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                // --> END AGE FILTERING\r\n\r\n                                // --> LANGUAGES FILTERING\r\n                                if (filters.language.filterBy == \"languageToLearn\" && filters.language.languageToLearn != \"all\") {\r\n\r\n                                    let languageToLearnIndex = user.languagesToLearn.findIndex(function (lang) {\r\n                                        return lang == filters.language.languageToLearn;\r\n                                    });\r\n\r\n                                    if (languageToLearnIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                } else if (filters.language.filterBy == \"knownLanguage\" && filters.language.knownLanguage != \"all\") {\r\n                                    let knownLanguageIndex = user.knownLanguages.findIndex(function (lang) {\r\n                                        return lang == filters.language.knownLanguage;\r\n                                    });\r\n\r\n                                    if (knownLanguageIndex == -1) {\r\n                                        isValid = false;\r\n                                    }\r\n                                }\r\n                                // --> END LANGUAGES FILTERING\r\n\r\n                                if (isValid) {\r\n                                    context.commit('addUser', user);\r\n                                    context.commit('addSearchedUserID', user.id);\r\n                                    usersAdded++;\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetSearchedUsers ~                                                      >\r\n        // To reset variables related to user searching                                >\r\n        //----------------------------------------------------------------------------->\r\n        resetSearchedUsers(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit(\"resetSearchedUsersIDs\");\r\n                context.commit('setLastUserShowed', null);\r\n\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setFilters ~                                                              >\r\n        // To set the filtering values selected by the user for the searching          >\r\n        //----------------------------------------------------------------------------->\r\n        setFilters(context, filters) {\r\n            return new Promise(function (resolve) {\r\n                context.commit(\"setGenderFilter\", filters.gender);\r\n                context.commit(\"setAgeRangeFilter\", filters.ageRange);\r\n                context.commit(\"setLanguageFilter\", filters.language);\r\n                context.commit(\"setMaxDistanceFilter\", filters.maxDistance);\r\n                context.commit(\"setLocationFilter\", filters.location);\r\n                resolve();\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getUserByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getUserByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfileByUID', id)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            context.commit('addUser', profileInfo);\r\n                            resolve(profileInfo);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting user by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetFilters ~                                                            >\r\n        // To reset the filtering values to default                                    >\r\n        //----------------------------------------------------------------------------->\r\n        resetFilters(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit(\"setGenderFilter\", \"O\");\r\n                context.commit(\"setAgeRangeFilter\", [Constants.MIN_USER_AGE, Constants.MAX_USER_AGE]);\r\n                context.commit('setLanguageFilter', {\r\n                    filterBy: \"languageToLearn\",\r\n                    knownLanguage: \"all\",\r\n                    languageToLearn: \"all\"\r\n                });\r\n\r\n                context.commit(\"setLocationFilter\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setNearbyUsersIDs\", null);\r\n                context.commit(\"setMaxDistanceFilter\", 3)\r\n                context.commit(\"setSearchByUsernameFilter\", null)\r\n\r\n                let filters = context.getters.getFilters;\r\n                filters[\"maxDistance\"] = null;\r\n\r\n                resolve(filters);\r\n            });\r\n        }\r\n}\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database.js\";\r\nimport users from \"./users.js\";\r\nimport i18n from \"../../i18n\";\r\n\r\nlet alreadyAccountUsernameError = i18n.t('messages.ERROR_ALREADY_AN_ACCOUNT_WITH_THIS_USERNAME');\r\nlet genericError = i18n.t('messages.ERROR_GENERIC_PROBLEM');\r\nlet gettingCurrentLocationError = i18n.t('messages.ERROR_GETTING_CURRENT_LOCATION');\r\n\r\n////////////////////////////////////////////////////////\r\n//-----         ACCOUNTS & PROFILES INFO         -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        users\r\n    },\r\n    state: {\r\n        /* User account*/\r\n        id: null,\r\n        'name': null,\r\n        lastName: null,\r\n        email: null,\r\n        chats: [],\r\n        role: 'user',\r\n        language: null,\r\n\r\n        /* User profile */\r\n        // 1st part\r\n        username: null,\r\n        birthDate: null,\r\n        gender: null,\r\n        description: null,\r\n        avgRating: null,\r\n        numRatings: null,\r\n        // 2nd part\r\n        knownLanguages: null,\r\n        languagesToLearn: null,\r\n        // 3rd part\r\n        profileImg: null,\r\n\r\n        /* Geolocation info */\r\n        location: null,\r\n\r\n        /* Ratings info */\r\n        ratings: null,\r\n\r\n        /* Constants */\r\n        genderOptions: {\r\n            \"M\": {\r\n                img: \"img/genders/male.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg'\r\n            },\r\n            \"W\": {\r\n                img: \"img/genders/female.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg'\r\n            },\r\n            \"O\": {\r\n                img: \"img/genders/other.svg\",\r\n                defaultProfileImg: 'img/defaultUserImages/defaultUserImage.svg'\r\n            }\r\n        },\r\n        languageOptions: {\r\n            \"de\": {\r\n                img: \"img/flags/de.svg\"\r\n            },\r\n            \"zh\": {\r\n                img: \"img/flags/zh.svg\"\r\n            },\r\n            \"es\": {\r\n                img: \"img/flags/es.svg\"\r\n            },\r\n            \"fr\": {\r\n                img: \"img/flags/fr.svg\"\r\n            },\r\n            \"en\": {\r\n                img: \"img/flags/en.svg\"\r\n            },\r\n            \"it\": {\r\n                img: \"img/flags/it.svg\"\r\n            },\r\n            \"ja\": {\r\n                img: \"img/flags/ja.svg\"\r\n            },\r\n            \"pt\": {\r\n                img: \"img/flags/pt.svg\"\r\n            },\r\n            \"all\": {\r\n                img: \"img/flags/all.svg\"\r\n            }\r\n        }\r\n    },\r\n    getters: {\r\n        getName: (state) => {\r\n            return state.name;\r\n        },\r\n        getLanguage: (state) => {\r\n            return state.language;\r\n        },\r\n        getID: (state) => {\r\n            return state.id;\r\n        },\r\n        getLastName: (state) => {\r\n            return state.lastName;\r\n        },\r\n        getEmail: (state) => {\r\n            return state.email;\r\n        },\r\n        getRole: (state) => {\r\n            return state.role;\r\n        },\r\n        getChats: (state) => {\r\n            return state.chats;\r\n        },\r\n        getProfile: (state) => {\r\n            let data = {};\r\n\r\n            if (state.username) {\r\n                data = {\r\n                    'username': state.username,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.birthDate) {\r\n                data = {\r\n                    'birthDate': state.birthDate,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.gender) {\r\n                data = {\r\n                    'gender': state.gender,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.description) {\r\n                data = {\r\n                    'description': state.description,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.profileImg) {\r\n                data = {\r\n                    'profileImg': state.profileImg,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.knownLanguages) {\r\n                data = {\r\n                    'knownLanguages': state.knownLanguages,\r\n                    ...data\r\n                }\r\n            }\r\n            if (state.languagesToLearn) {\r\n                data = {\r\n                    'languagesToLearn': state.languagesToLearn,\r\n                    ...data\r\n                }\r\n            }\r\n\r\n            data = {\r\n                'avgRating': state.avgRating,\r\n                'numRatings': state.numRatings,\r\n                ...data\r\n            }\r\n\r\n            return data;\r\n        },\r\n        getUsername: (state) => {\r\n            return state.username;\r\n        },\r\n        getBirthDate: (state) => {\r\n            return state.birthDate;\r\n        },\r\n        getGender: (state) => {\r\n            return state.gender;\r\n        },\r\n        getDescription: (state) => {\r\n            return state.description;\r\n        },\r\n        getProfileImg: (state) => {\r\n            return state.profileImg;\r\n        },\r\n        getAvgRating: (state) => {\r\n            return state.avgRating;\r\n        },\r\n        getNumRatings: (state) => {\r\n            return state.numRatings;\r\n        },\r\n        getKnownLanguages: (state) => {\r\n            return state.knownLanguages;\r\n        },\r\n        getLanguagesToLearn: (state) => {\r\n            return state.languagesToLearn;\r\n        },\r\n\r\n        getGenderImgByID: (state) => (id) => {\r\n            return state.genderOptions[id].img;\r\n        },\r\n        getGenderDefaultProfileImgByUserGender: (state) => {\r\n            return state.genderOptions[\"O\"].defaultProfileImg;\r\n        },\r\n        getGenderOptionsAsArray: (state, getters) => {\r\n            let genderOptions = {\r\n                \"M\": {\r\n                    'text': i18n.t('messages.TEXT_MAN')\r\n                },\r\n                \"W\": {\r\n                    'text': i18n.t('messages.TEXT_WOMAN')\r\n                },\r\n                \"O\": {\r\n                    'text': i18n.t('messages.TEXT_OTHER')\r\n                }\r\n            };\r\n            return Object.keys(genderOptions).map(function (id) {\r\n                let text = genderOptions[id].text;\r\n                let img = getters.getGenderImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageImgByID: (state) => (id) => {\r\n            return state.languageOptions[id].img;\r\n        },\r\n        getLanguageOptionsAsArray: (state, getters) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_DE')\r\n                },\r\n                \"zh\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ZH')\r\n                },\r\n                \"es\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ES')\r\n                },\r\n                \"fr\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_FR')\r\n                },\r\n                \"en\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_EN')\r\n                },\r\n                \"it\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_IT')\r\n                },\r\n                \"ja\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_JA')\r\n                },\r\n                \"pt\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_PT')\r\n                },\r\n                \"all\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ALL')\r\n                }\r\n            };\r\n            return Object.keys(state.languageOptions).map(function (id) {\r\n                let text = languageOptions[id].text;\r\n                let img = getters.getLanguageImgByID(id);\r\n                return new Object({id, text, img});\r\n            });\r\n        },\r\n        getLanguageFromLanguageOptionsByID: (state) => (id) => {\r\n            let languageOptions = {\r\n                \"de\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_DE')\r\n                },\r\n                \"zh\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ZH')\r\n                },\r\n                \"es\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ES')\r\n                },\r\n                \"fr\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_FR')\r\n                },\r\n                \"en\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_EN')\r\n                },\r\n                \"it\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_IT')\r\n                },\r\n                \"ja\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_JA')\r\n                },\r\n                \"pt\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_PT')\r\n                },\r\n                \"all\": {\r\n                    'text': i18n.t('messages.TEXT_LANGUAGE_ALL')\r\n                }\r\n            };\r\n\r\n            return {\r\n                ...state.languageOptions[id],\r\n                'text': languageOptions[id].text\r\n            };\r\n        },\r\n        getLocation: (state) => {\r\n            return state.location;\r\n        },\r\n        getRatings: (state) => {\r\n            return state.ratings;\r\n        },\r\n        getRating: (state) => (id) => {\r\n            if (state.ratings) {\r\n                return state.ratings[id];\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    },\r\n    mutations: {\r\n        setID(state, id) {\r\n            state.id = id;\r\n        },\r\n        setName(state, name) {\r\n            state.name = name;\r\n        },\r\n        setLanguage(state, language) {\r\n            i18n.locale = language;\r\n            state.language = language;\r\n        },\r\n        setLastName(state, lastName) {\r\n            state.lastName = lastName;\r\n        },\r\n        setEmail(state, email) {\r\n            state.email = email;\r\n        },\r\n        setRole(state, role) {\r\n            state.role = role;\r\n        },\r\n        setChats(state, chats) {\r\n            state.chats = chats;\r\n        },\r\n        setAccount(state, accountInfo) {\r\n            if (accountInfo.hasOwnProperty('email')) {\r\n                state.email = accountInfo.email;\r\n            }\r\n            if (accountInfo.hasOwnProperty('name')) {\r\n                state.name = accountInfo.name;\r\n            }\r\n            if (accountInfo.hasOwnProperty('lastName')) {\r\n                state.lastName = accountInfo.lastName;\r\n            }\r\n            if (accountInfo.hasOwnProperty('profileImg')) {\r\n                state.role = accountInfo.role;\r\n            }\r\n            if (accountInfo.hasOwnProperty('id')) {\r\n                state.id = accountInfo.id;\r\n            }\r\n            if (accountInfo.hasOwnProperty('chats')) {\r\n                state.chats = accountInfo.chats;\r\n            }\r\n            if (accountInfo.hasOwnProperty('role')) {\r\n                state.role = accountInfo.role;\r\n            }\r\n            if (accountInfo.hasOwnProperty('language') && accountInfo.language != null) {\r\n                i18n.locale = accountInfo.language;\r\n                state.language = accountInfo.language;\r\n            }\r\n        },\r\n        setUsername(state, username) {\r\n            state.username = username;\r\n        },\r\n        setBirthDate(state, birthDate) {\r\n            state.birthDate = birthDate;\r\n        },\r\n        setGender(state, gender) {\r\n            state.gender = gender;\r\n        },\r\n        setDescription(state, description) {\r\n            state.description = description;\r\n        },\r\n        setAvgRating(state, avgRating) {\r\n            state.avgRating = avgRating;\r\n        },\r\n        setNumRatings(state, numRatings) {\r\n            state.numRatings = numRatings;\r\n        },\r\n        setKnownLanguages(state, knownLanguages) {\r\n            state.knownLanguages = knownLanguages;\r\n        },\r\n        setLanguagesToLearn(state, languagesToLearn) {\r\n            state.languagesToLearn = languagesToLearn;\r\n        },\r\n        setProfileImg(state, profileImg) {\r\n            state.profileImg = profileImg;\r\n        },\r\n        setRatings(state, ratings) {\r\n            state.ratings = ratings;\r\n        },\r\n        setRating(state, data) {\r\n            if (state.ratings == null) {\r\n                state.ratings = {};\r\n            }\r\n            state.ratings[data.id] = data.rating;\r\n        },\r\n\r\n        setProfile(state, profileInfo) {\r\n            if (profileInfo) {\r\n\r\n                if (profileInfo.hasOwnProperty('username')) {\r\n                    state.username = profileInfo.username;\r\n                }\r\n                if (profileInfo.hasOwnProperty('birthDate')) {\r\n                    state.birthDate = profileInfo.birthDate;\r\n                }\r\n                if (profileInfo.hasOwnProperty('gender')) {\r\n                    state.gender = profileInfo.gender;\r\n                }\r\n                if (profileInfo.hasOwnProperty('description')) {\r\n                    state.description = profileInfo.description;\r\n                }\r\n                if (profileInfo.hasOwnProperty('avgRating')) {\r\n                    state.avgRating = profileInfo.avgRating;\r\n                }\r\n                if (profileInfo.hasOwnProperty('numRatings')) {\r\n                    state.numRatings = profileInfo.numRatings;\r\n                }\r\n                if (profileInfo.hasOwnProperty('knownLanguages')) {\r\n                    state.knownLanguages = profileInfo.knownLanguages;\r\n                }\r\n                if (profileInfo.hasOwnProperty('languagesToLearn')) {\r\n                    state.languagesToLearn = profileInfo.languagesToLearn;\r\n                }\r\n                if (profileInfo.hasOwnProperty('profileImg')) {\r\n                    state.profileImg = profileInfo.profileImg;\r\n                }\r\n            }\r\n        },\r\n        resetState(state) {\r\n            /* User account*/\r\n            state.id = null;\r\n            state.name = null;\r\n            state.lastName = null;\r\n            state.email = null;\r\n            state.role = 'user';\r\n            state.chats = [];\r\n\r\n            /* User profile */\r\n            // 1st part\r\n            state.username = null;\r\n            state.birthDate = null;\r\n            state.gender = null;\r\n            state.description = null;\r\n            state.avgRating = null;\r\n            state.numRatings = null;\r\n            // 2nd part\r\n            state.knownLanguages = null;\r\n            state.languagesToLearn = null;\r\n            // 3rd part\r\n            state.profileImg = null;\r\n\r\n            /* Ratings info */\r\n            state.ratings = null;\r\n\r\n            /* Geolocation info */\r\n            state.location = null;\r\n        },\r\n        setLocation(state, location) {\r\n            state.location = location;\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init users state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n                        context.commit('setProfile', profileInfo);\r\n\r\n                        context.dispatch('database/getAccount')\r\n                            .then((accountInfo) => {\r\n                                context.commit('setAccount', accountInfo);\r\n                                context.dispatch('getRatings')\r\n                                    .then(() => {\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error)\r\n                                    });\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createAccount ~                                                           >\r\n        // To create user account                                                      >\r\n        // parameters required: data {email, password, name, lastName}                 >\r\n        //----------------------------------------------------------------------------->\r\n        createAccount(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccount', data)\r\n                    .then(() => {\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                context.dispatch('database/setAccount', data)\r\n                                    .then(() => {\r\n                                        context.commit('setAccount', data);\r\n                                        resolve();\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        console.log('Error creating user account.');\r\n                                        reject(error)\r\n                                    });\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguage ~                                                             >\r\n        // To set app language for that user                                           >\r\n        // parameters required: lang                                                   >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguage(context, lang) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/setAccountLanguage', lang)\r\n                    .then(() => {\r\n                        context.commit('setLanguage', lang);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ generateNotificationToken ~                                               >\r\n        // To generate push notifications token for this browser and user              >\r\n        //----------------------------------------------------------------------------->\r\n        generateNotificationToken(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/generatePushNotificationToken')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountNameAndLastName ~                                            >\r\n        // To update user account data name and last name                              >\r\n        // parameters required: data {[name], [lastName]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountNameAndLastName(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountData', data)\r\n                    .then(() => {\r\n                        if (data.hasOwnProperty('name')) {\r\n                            context.commit('setName', data.name);\r\n                        }\r\n                        if (data.hasOwnProperty('lastName')) {\r\n                            context.commit('setLastName', data.lastName);\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountEmail ~                                                      >\r\n        // To update user account email                                                >\r\n        // parameters required: email                                                  >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountEmail', email)\r\n                    .then(() => {\r\n                        context.commit('setEmail', email);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateAccountPassword ~                                                   >\r\n        // To update user account password                                             >\r\n        // parameters required: password                                               >\r\n        //----------------------------------------------------------------------------->\r\n        updateAccountPassword(context, password) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateAccountPassword', password)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ login ~                                                                   >\r\n        // To log user in                                                              >\r\n        // parameters required: data {email, password}                                 >\r\n        //----------------------------------------------------------------------------->\r\n        login(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/login', data)\r\n                    .then(() => {\r\n                        context.commit('setAccount', data);\r\n                        context.dispatch('database/setPersistance')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ isUserLogged ~                                                            >\r\n        // To determine if user is or is not logged                                    >\r\n        //----------------------------------------------------------------------------->\r\n        isUserLogged: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((isIt) => {\r\n                        resolve(isIt);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ logout ~                                                                  >\r\n        // To log user out                                                             >\r\n        //----------------------------------------------------------------------------->\r\n        logout(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/logout')\r\n                    .then(() => {\r\n                        /*context.dispatch('resetAppState', null, {root: true})\r\n                            .then(function () {\r\n                                resolve();\r\n                            }).catch((error) => {\r\n                                reject(error)\r\n                        });*/\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendEmailVerification(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendEmailVerification')\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending verification email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendEmailVerification ~                                                   >\r\n        // To send email to verify user email                                          >\r\n        //----------------------------------------------------------------------------->\r\n        sendPasswordResetEmail(context, email) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/sendPasswordResetEmail', email)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error sending password email.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfEmailIsVerified ~                                                  >\r\n        // To check if email is verified                                               >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfEmailIsVerified(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isEmailVerified')\r\n                    .then((isVerified) => {\r\n                        resolve(isVerified);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if email is verified.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkIfUsernameIsAlreadyRegistered ~                                      >\r\n        // To check if a username is already in use                                    >\r\n        //----------------------------------------------------------------------------->\r\n        checkIfUsernameIsAlreadyRegistered(context, username) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfileByUsername', username)\r\n                    .then((profileInfo) => {\r\n                        if (profileInfo) {\r\n                            resolve(true);\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error checking if username is already registered.');\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createProfile ~                                                           >\r\n        // To create user profile                                                      >\r\n        // parameters required: data {username, birthDate, gender, description}        >\r\n        //----------------------------------------------------------------------------->\r\n        createProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('checkIfUsernameIsAlreadyRegistered', data.username)\r\n                    .then((isAlreadyRegistered) => {\r\n                        if (isAlreadyRegistered) {\r\n                            reject(alreadyAccountUsernameError);\r\n                        } else {\r\n                            context.dispatch('database/setProfile', data)\r\n                                .then(() => {\r\n                                    context.commit('setUsername', data.username);\r\n                                    context.commit('setBirthDate', data.birthDate);\r\n                                    context.commit('setGender', data.gender);\r\n                                    context.commit('setDescription', data.description);\r\n                                    context.commit('setAvgRating', 0);\r\n                                    context.commit('setNumRatings', 0);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error creating user profile.');\r\n                                    reject(error);\r\n                                });\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateProfile ~                                                           >\r\n        // To update user profile data                                                 >\r\n        // parameters required: data {[username], [birthDate], [gender],               >\r\n        //                            [description], [knownLanguages],                 >\r\n        //                            [languagesToLearn]}                              >\r\n        //----------------------------------------------------------------------------->\r\n        updateProfile(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/updateProfile', data)\r\n                    .then(async () => {\r\n\r\n                        if (data.hasOwnProperty('username')) {\r\n                            context.commit('setUsername', data.username);\r\n                        }\r\n                        if (data.hasOwnProperty('description')) {\r\n                            context.commit('setDescription', data.description);\r\n                        }\r\n                        if (data.hasOwnProperty('gender')) {\r\n                            context.commit('setGender', data.gender);\r\n                        }\r\n                        if (data.hasOwnProperty('birthDate')) {\r\n                            context.commit('setBirthDate', data.birthDate);\r\n                        }\r\n                        if (data.hasOwnProperty('knownLanguages')) {\r\n                            context.commit('setKnownLanguages', data.knownLanguages);\r\n                        }\r\n                        if (data.hasOwnProperty('languagesToLearn')) {\r\n                            context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        }\r\n                        if (data.hasOwnProperty('profileImg')) {\r\n                            await context.dispatch('setProfileImg', data.profileImg).catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                        }\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setLanguages ~                                                            >\r\n        // To set user languages: known and to-be-learned                              >\r\n        // parameters required: data {knownLanguages, languagesToLearn}                >\r\n        //----------------------------------------------------------------------------->\r\n        setLanguages(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setLanguages', data)\r\n                    .then(() => {\r\n                        context.commit('setKnownLanguages', data.knownLanguages);\r\n                        context.commit('setLanguagesToLearn', data.languagesToLearn);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error setting user languages.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setProfileImg ~                                                           >\r\n        // To set user profile image                                                   >\r\n        // parameters required: img                                                    >\r\n        //----------------------------------------------------------------------------->\r\n        setProfileImg(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n                Vue.nextTick(() => {\r\n\r\n                    context.dispatch('database/uploadProfileImg', img)\r\n                        .then((url) => {\r\n                            context.dispatch('database/setProfileImg', url)\r\n                                .then(() => {\r\n                                    context.commit('setProfileImg', url);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    console.log('Error setting user profile image.');\r\n                                    console.error(error)\r\n                                    reject(error);\r\n                                });\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log('Error uploading user profile image.');\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setRegistrationCompleted ~                                                >\r\n        // To set user registration state to completed                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setRegistrationCompleted(context, img) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/setRegistrationCompleted', img)\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error updating user registration state.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRegistrationState ~                                                    >\r\n        // To check what register info the user has already submitted                  >\r\n        //----------------------------------------------------------------------------->\r\n        getRegistrationState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getProfile')\r\n                    .then((profileInfo) => {\r\n\r\n                        context.dispatch('checkRegistrationState', profileInfo)\r\n                            .then((state) => {\r\n                                context.commit('setProfile', profileInfo);\r\n                                resolve(state);\r\n                            })\r\n                            .catch((error) => {\r\n                                console.log(error);\r\n                                reject(error);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ checkRegistrationState ~                                                  >\r\n        // To check registration state of a profile                                    >\r\n        // parameters: data {username, gender, description, avgRating, numRatings,     >\r\n        //                   knownLanguages, languagesToLearn, profileImg}             >\r\n        //----------------------------------------------------------------------------->\r\n        checkRegistrationState(context, data) {\r\n\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('checkIfEmailIsVerified')\r\n                    .then((isVerified) => {\r\n                        if (isVerified) {\r\n                            // Part 0 completed\r\n                            if (data && data.hasOwnProperty('username') && data.hasOwnProperty('gender')\r\n                                && data.hasOwnProperty('description') && data.hasOwnProperty('avgRating')\r\n                                && data.hasOwnProperty('numRatings')) {\r\n                                // Part 1 completed\r\n                                if (data.hasOwnProperty('knownLanguages') && data.hasOwnProperty('languagesToLearn')) {\r\n                                    // Part 2 completed\r\n                                    if (data.hasOwnProperty('profileImg')) {\r\n                                        // Part 3 completed\r\n                                        // Registration process completed\r\n                                        resolve('dashboard');\r\n                                    } else {\r\n                                        // State 3\r\n                                        resolve('set-your-profile-image');\r\n                                    }\r\n                                } else {\r\n                                    // State 2\r\n                                    resolve('fill-your-languages');\r\n                                }\r\n                            } else {\r\n                                // State 1\r\n                                resolve('fill-your-profile-info');\r\n                            }\r\n                        } else {\r\n                            // State 0\r\n                            resolve('email-verification');\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(genericError);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getCurrentLocation ~                                                      >\r\n        // To get the current user location                                            >\r\n        //----------------------------------------------------------------------------->\r\n        getCurrentLocation() {\r\n            return new Promise(function (resolve, reject) {\r\n                console.log(\"heyy\")\r\n                try {\r\n                    navigator.geolocation.getCurrentPosition(position => {\r\n                            console.log(position)\r\n                            resolve({\r\n                                lat: position.coords.latitude,\r\n                                lng: position.coords.longitude\r\n                            })\r\n                        },\r\n                        function (error) {\r\n                            console.log(\"ruuuuuuuuuuu\")\r\n                            console.error(error);\r\n                            reject(gettingCurrentLocationError);\r\n                        });\r\n                }catch (e) {\r\n                    console.log(e)\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRatings ~                                                              >\r\n        // To get user ratings given by the logged user                                >\r\n        //----------------------------------------------------------------------------->\r\n        getRatings(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getRatings')\r\n                    .then((ratingsInfo) => {\r\n                        context.commit('setRatings', ratingsInfo);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error retrieving user ratings.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ rateUser ~                                                                >\r\n        // To rate a user                                                              >\r\n        // parameters: data{id, rating}                                                >\r\n        //----------------------------------------------------------------------------->\r\n        rateUser(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/setRating', data)\r\n                    .then(() => {\r\n                        context.commit('setRating', data);\r\n                        context.commit('users/addRating', data);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        console.log('Error rating user.');\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLocation ~                                                             >\r\n        // To get the current (or last) user location                                  >\r\n        //----------------------------------------------------------------------------->\r\n        getLocation(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('getCurrentLocation')\r\n                    .then((currentLocation) => {\r\n                        context.commit('setLocation', currentLocation);\r\n                        context.dispatch('database/updateUserLocation', currentLocation)\r\n                            .then(() => {\r\n                                resolve(currentLocation);\r\n                            })\r\n                            .catch(() => {\r\n                                resolve(currentLocation);\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        context.dispatch('database/getLocation')\r\n                            .then((location) => {\r\n                                context.commit('setLocation', location);\r\n                                resolve(location);\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error);\r\n                            });\r\n                    });\r\n            });\r\n        }\r\n    }\r\n};","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\nimport haversine from 'haversine-distance'\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                 EVENTS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        events: {},\r\n        eventsToShowIDs: [],\r\n        mapEventsToShowIDs: [],\r\n        lastEventShowed: null,\r\n        languageInvolvedFilter: \"all\",\r\n        eventsTab: 0\r\n    },\r\n    getters: {\r\n        getLanguageInvolvedFilter: (state) => {\r\n            return state.languageInvolvedFilter;\r\n        },\r\n        getFilters: (state) => {\r\n            return {\r\n                languageInvolved: state.languageInvolvedFilter\r\n            };\r\n        },\r\n        getEvents: (state) => {\r\n            return state.events;\r\n        },\r\n        getEventsTab: (state) => {\r\n            return state.eventsTab;\r\n        },\r\n        getEventByID: (state) => (id) => {\r\n            return state.events[id];\r\n        },\r\n        getEventsToShow: (state, getters) => {\r\n            let eventsToShow = [];\r\n            state.eventsToShowIDs.forEach((eventID) => {\r\n                let distance = null;\r\n                let userLocation = getters['user/getLocation'];\r\n\r\n                if (userLocation != null && userLocation.lat != undefined && userLocation.lng != undefined){\r\n                    console.log(userLocation)\r\n                    distance = haversine(state.events[eventID].location.coordinates, userLocation);\r\n                    distance = distance / 1000;\r\n                }\r\n\r\n                let nEvent = {\r\n                    'id': eventID,\r\n                    ...state.events[eventID]\r\n                };\r\n\r\n                nEvent['distance'] = distance;\r\n                eventsToShow.push(nEvent);\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getMapEventsToShow: (state) => {\r\n            let eventsToShow = [];\r\n            state.mapEventsToShowIDs.forEach((eventID) => {\r\n                eventsToShow.push({\r\n                    id: eventID,\r\n                    ...state.events[eventID]\r\n                })\r\n            });\r\n            return eventsToShow;\r\n        },\r\n        getLastEventShowed: (state) => {\r\n            return state.lastEventShowed;\r\n        },\r\n        amIParticipating: (state) => (data) => {\r\n\r\n            let found = null;\r\n            if (state.events[data.eventID]) {\r\n                found = state.events[data.eventID].participants.find(participantID => participantID == data.userID);\r\n                return found != undefined;\r\n            }\r\n            return null;\r\n\r\n        }\r\n    },\r\n    mutations: {\r\n        setLanguageInvolvedFilter(state, languageInvolvedFilter) {\r\n            state.languageInvolvedFilter = languageInvolvedFilter;\r\n        },\r\n        setEventsTab(state, eventsTab) {\r\n            state.eventsTab = eventsTab;\r\n        },\r\n        removeEventByID(state, eventID) {\r\n            delete state.events[eventID];\r\n\r\n            let indexEventsToShowIDs = state.eventsToShowIDs.findIndex(id => {\r\n                return id == eventID;\r\n            });\r\n            state.eventsToShowIDs.splice(indexEventsToShowIDs, 1);\r\n\r\n            let indexMapEventsToShowIDs = state.mapEventsToShowIDs.findIndex(id => {\r\n                return id == eventID;\r\n            });\r\n            state.mapEventsToShowIDs.splice(indexMapEventsToShowIDs, 1);\r\n        },\r\n        resetState(state) {\r\n            state.events = {};\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.mapEventsToShowIDs.splice(0, state.mapEventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n            state.languageInvolvedFilter = \"all\";\r\n        },\r\n        resetEventsToShowIDs(state) {\r\n            state.eventsToShowIDs.splice(0, state.eventsToShowIDs.length);\r\n            state.lastEventShowed = null;\r\n        },\r\n        addEvent(state, event) {\r\n            state.events[event.id] = event;\r\n        },\r\n        addParticipantToEvent(state, data) {\r\n            if (-1 == state.events[data.eventID].participants.findIndex(participantID => participantID == data.userID)) {\r\n                state.events[data.eventID].participants.push(data.userID);\r\n            }\r\n        },\r\n        removeParticipantFromEvent(state, data) {\r\n            let searchedUserIndex = state.events[data.eventID].participants.findIndex(function (userID) {\r\n                return userID == data.userID;\r\n            });\r\n            state.events[data.eventID].participants.splice(searchedUserIndex, 1);\r\n        },\r\n        addEventToShow(state, eventID) {\r\n            if (-1 == state.eventsToShowIDs.findIndex(id => {\r\n                return id == eventID;\r\n            })) {\r\n                state.eventsToShowIDs.push(eventID);\r\n            }\r\n        },\r\n        addMapEventToShow(state, eventID) {\r\n            if (-1 == state.mapEventsToShowIDs.findIndex(id => {\r\n                return id == eventID;\r\n            })) {\r\n                state.mapEventsToShowIDs.push(eventID);\r\n            }\r\n        },\r\n        setEventsToShowIDs(state, eventsToShowIDs) {\r\n            state.eventsToShowIDs = eventsToShowIDs;\r\n        },\r\n        setLastEventShowed(state, lastEventShowed) {\r\n            state.lastEventShowed = lastEventShowed;\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init events state info with the appropriate data                         >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getAllEvents')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        resetEventsToShowIDs(context) {\r\n            context.commit('resetEventsToShowIDs');\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createEvent ~                                                             >\r\n        // To create an event                                                          >\r\n        // parameters required: data {date, description, headerImg, location,          >\r\n        //                            involvedLanguages, name}                         >\r\n        //----------------------------------------------------------------------------->\r\n        createEvent(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createEvent', data)\r\n                    .then((eventData) => {\r\n                        let eventCoordinates = {\r\n                            'lat': eventData.location.coordinates.latitude,\r\n                            'lng': eventData.location.coordinates.longitude\r\n                        }\r\n                        eventData.location.coordinates = eventCoordinates;\r\n                        context.commit('addEvent', eventData);\r\n                        context.commit('addMapEventToShow', eventData.id);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeEvent ~                                                             >\r\n        // To remove an event                                                          >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        removeEvent(context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/removeEvent', eventID)\r\n                    .then(() => {\r\n                        context.commit('removeEventByID', eventID);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ updateEvent ~                                                             >\r\n        // To update an event                                                          >\r\n        // parameters required: data {date, description, headerImg, location,          >\r\n        //                            involvedLanguages, name}                         >\r\n        //----------------------------------------------------------------------------->\r\n        updateEvent(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let dataToUpdate = {};\r\n                let localEvent = context.getters.getEventByID(data.id);\r\n\r\n                if (data.name != localEvent.name) {\r\n                    dataToUpdate['name'] = data.name;\r\n                }\r\n\r\n                if (new Date(data.date.setHours(0, 0, 0)) != localEvent.date.toDate().toString()) {\r\n                    dataToUpdate['date'] = data.date;\r\n                }\r\n\r\n                if (data.headerImg != localEvent.headerImg) {\r\n                    dataToUpdate['headerImg'] = data.headerImg;\r\n                }\r\n\r\n                if (data.description != localEvent.description) {\r\n                    dataToUpdate['description'] = data.description;\r\n                }\r\n\r\n                if (data.involvedLanguages.length != localEvent.involvedLanguages.length) {\r\n                    dataToUpdate['involvedLanguages'] = data.involvedLanguages;\r\n                } else {\r\n                    for (let i = 0; i < data.involvedLanguages.length; i++) {\r\n                        if (data.involvedLanguages[i] != localEvent.involvedLanguages[i]) {\r\n                            dataToUpdate['involvedLanguages'] = data.involvedLanguages;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (data.location.coordinates != localEvent.location.coordinates\r\n                    || data.location.city != localEvent.location.city\r\n                    || data.location.place != localEvent.location.place\r\n                    || data.location.address != localEvent.location.address) {\r\n                    dataToUpdate['location'] = data.location;\r\n                }\r\n\r\n\r\n                if (Object.keys(dataToUpdate).length > 0) {\r\n                    dataToUpdate['id'] = data.id;\r\n                    context.dispatch('database/updateEvent', dataToUpdate)\r\n                        .then((updatesValues) => {\r\n                            for (let [key, value] of Object.entries(dataToUpdate)) {\r\n                                localEvent[key] = value;\r\n                                if (key == 'location') {\r\n                                    let eventCoordinates = {\r\n                                        'lat': localEvent.location.coordinates.latitude,\r\n                                        'lng': localEvent.location.coordinates.longitude\r\n                                    }\r\n                                    localEvent.location.coordinates = eventCoordinates;\r\n                                }\r\n                            }\r\n\r\n                            for (let [key, value] of Object.entries(updatesValues)) {\r\n                                if (key != 'location') {\r\n                                    localEvent[key] = value;\r\n                                }\r\n                            }\r\n\r\n                            context.commit('addEvent', localEvent);\r\n                            resolve();\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error)\r\n                        });\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                let filters = context.getters.getFilters;\r\n\r\n                context.dispatch('database/getNextEventsPage', {\r\n                    lastEventShowed: context.getters.getLastEventShowed,\r\n                    limit: Constants.EVENTS_PAGE_SIZE,\r\n                    filters: filters\r\n                })\r\n                    .then((data) => {\r\n                        context.commit('setLastEventShowed', data.newLastEventShowed);\r\n\r\n                        data.events.forEach(event => {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                'lat': event.location.coordinates.latitude,\r\n                                'lng': event.location.coordinates.longitude\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n                            //console.log(event.location.coordinates)\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                                distance = distance / 1000;\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                'distance': distance\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addEventToShow', event.id);\r\n                        });\r\n\r\n                        if (data.events.length > 0) {\r\n                            context.dispatch('database/isNextEventsPageEmpty', {\r\n                                lastEventShowed: context.getters.getLastEventShowed,\r\n                                limit: Constants.EVENTS_PAGE_SIZE,\r\n                                filters: filters\r\n                            })\r\n                                .then((isEmpty) => {\r\n                                    resolve(!isEmpty);\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve(false);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getAllEvents ~                                                            >\r\n        // To get all events that will be celebrated                                   >\r\n        //----------------------------------------------------------------------------->\r\n        getAllEvents(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getEventsToBeCelebrated')\r\n                    .then((eventsRetrieved) => {\r\n\r\n                        eventsRetrieved.forEach(event => {\r\n                            let eventLocation = {\r\n                                'lat': event.location.coordinates.latitude,\r\n                                'lng': event.location.coordinates.longitude\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n                            context.commit('addEvent', event);\r\n                            context.commit('addMapEventToShow', event.id);\r\n                        });\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEvents ~                                                               >\r\n        // To get events that will be celebrated                                       >\r\n        //----------------------------------------------------------------------------->\r\n        getEventParticipants(context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n                let event = context.getters.getEventByID(eventID);\r\n                context.dispatch('database/getMultipleProfilesByUID', event.participants)\r\n                    .then((userProfiles) => {\r\n                        userProfiles.forEach(user => {\r\n                            context.commit('users/addUser', user);\r\n                        });\r\n                        resolve(userProfiles);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ addParticipantToEvent ~                                                   >\r\n        // To add user to an Event                                                     >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        addParticipantToEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/addParticipantToEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"addParticipantToEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ removeParticipantFromEvent ~                                              >\r\n        // To remove user from an Event                                                >\r\n        // parameters required: eventID                                                >\r\n        //----------------------------------------------------------------------------->\r\n        removeParticipantFromEvent: function (context, eventID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/removeParticipantFromEvent', eventID)\r\n                    .then((userID) => {\r\n                        context.commit(\"removeParticipantFromEvent\", {eventID: eventID, userID: userID});\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getEventByID ~                                                             >\r\n        // To user profile info by its ID                                              >\r\n        // parameters required: id                                                     >\r\n        //----------------------------------------------------------------------------->\r\n        getEventByID(context, id) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('database/getEventByID', id)\r\n                    .then((event) => {\r\n                        if (event) {\r\n                            let userLocation = context.getters['user/getLocation'];\r\n                            let distance = null;\r\n                            let eventLocation = {\r\n                                'lat': event.location.coordinates.latitude,\r\n                                'lng': event.location.coordinates.longitude\r\n                            }\r\n\r\n                            let eventNonFormattedLoc = event.location;\r\n                            eventNonFormattedLoc['coordinates'] = eventLocation;\r\n                            event['location'] = eventNonFormattedLoc;\r\n\r\n                            if (userLocation != null) {\r\n                                distance = haversine(event.location.coordinates, userLocation);\r\n                            }\r\n\r\n                            event = {\r\n                                ...event,\r\n                                'distance': distance / 1000\r\n                            };\r\n                            context.commit('addEvent', event);\r\n                            resolve(event);\r\n                        } else {\r\n                            resolve(null);\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(\"Error getting event by it's id in firebase.\");\r\n                        reject(error)\r\n                    });\r\n            });\r\n        }\r\n\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n////////////////////////////////////////////////////////\r\n//-----                  CHATS                   -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        user,\r\n        users,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        chats: {},\r\n        chatsToShowIDs: [],\r\n\r\n        chatListListener: null,\r\n        chatMessagesListeners: [],\r\n\r\n        usernameFilter: null\r\n    },\r\n    getters: {\r\n        getChatByID: (state) => (id) => {\r\n            return state.chats[id];\r\n        },\r\n        getChatsToShowIDs: (state) => {\r\n            return state.chatsToShowIDs;\r\n        },\r\n        getChatMessagesByChatID: (state) => (chatID) => {\r\n            if (state.chats[chatID] != undefined) {\r\n                return state.chats[chatID].messages;\r\n            } else {\r\n                return [];\r\n            }\r\n        },\r\n        getUnreadMessagesByChatID: (state, getters) => (chatID) => {\r\n            let i;\r\n            let myID = getters['user/getID'];\r\n            let unreadMessages = [];\r\n\r\n            if (state.chats[chatID] != undefined) {\r\n                for (i = state.chats[chatID].messages.length - 1; i >= 0; i--) {\r\n                    if (state.chats[chatID].messages[i].sender != myID && !state.chats[chatID].messages[i].read) {\r\n                        unreadMessages.push(state.chats[chatID].messages[i].id);\r\n                    } else if (state.chats[chatID].messages[i].sender != myID && state.chats[chatID].messages[i].read) {\r\n                        break;\r\n                    } else if (state.chats[chatID].messages[i].sender == myID) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unreadMessages;\r\n        },\r\n        getUnreadMessages: (state, getters) => {\r\n            let count = 0;\r\n\r\n            state.chatsToShowIDs.forEach(c => {\r\n                count += getters.getUnreadMessagesByChatID(c).length;\r\n            });\r\n\r\n            return count;\r\n        },\r\n        getChatsToShow: (state, getters) => {\r\n            let chatsToShow = [];\r\n\r\n            if (state.usernameFilter == null) {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n                    auxChat.id = state.chats[chatID].id;\r\n                    auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                    chatsToShow.push(auxChat)\r\n                });\r\n            } else {\r\n                state.chatsToShowIDs.forEach((chatID) => {\r\n                    let auxChat = {};\r\n                    auxChat.users = state.chats[chatID].users;\r\n\r\n                    let lowNotMe = getters.getUserByChatID(chatID).username.toLowerCase();\r\n\r\n                    if (lowNotMe.includes(state.usernameFilter.toLowerCase())) {\r\n                        auxChat.id = state.chats[chatID].id;\r\n                        auxChat.lastMessage = state.chats[chatID].messages[state.chats[chatID].messages.length - 1];\r\n                        chatsToShow.push(auxChat)\r\n                    }\r\n                });\r\n            }\r\n\r\n            return chatsToShow;\r\n        },\r\n        getUserByChatID: (state, getters) => (chatID) => {\r\n            let userID;\r\n            if (state.chats[chatID].users[0] == getters['user/getID']) {\r\n                userID = state.chats[chatID].users[1];\r\n            } else {\r\n                userID = state.chats[chatID].users[0];\r\n            }\r\n\r\n            return getters['users/getUserByID'](userID);\r\n        },\r\n\r\n        getNotReadMessagesCountByChatID: (state, getters) => (id) => {\r\n            let i, count = 0;\r\n            let myID = getters['user/getID'];\r\n\r\n            for (i = state.chats[id].messages.length - 1; i >= 0; i--) {\r\n                if (state.chats[id].messages[i].sender != myID && !state.chats[id].messages[i].read) {\r\n                    count++;\r\n                } else if (state.chats[id].messages[i].sender != myID && state.chats[id].messages[i].read) {\r\n                    break;\r\n                } else if (state.chats[id].messages[i].sender == myID) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return count;\r\n        }\r\n\r\n\r\n    },\r\n    mutations: {\r\n        resetState(state) {\r\n            state.chats = {};\r\n            state.chatsToShowIDs.splice(0, state.chatsToShowIDs.length);\r\n\r\n            if (state.chatListListener != null && state.chatListListener != undefined) {\r\n                state.chatListListener();\r\n                state.chatListListener = null;\r\n            }\r\n\r\n            state.chatMessagesListeners.forEach(l => {\r\n                if (l != null && l != undefined) {\r\n                    l();\r\n                }\r\n            });\r\n\r\n            state.chatMessagesListeners.splice(0, state.chatMessagesListeners.length);\r\n        },\r\n        addChatMessagesListener(state, listener) {\r\n            state.chatMessagesListeners.push(listener);\r\n        },\r\n        addChat(state, chat) {\r\n            if (!state.chats[chat.id] || chat.messages.length > state.chats[chat.id].messages.length) {\r\n                Vue.set(state.chats, chat.id, chat);\r\n            }\r\n        },\r\n        updateChatMessages(state, data) {\r\n            for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n\r\n                let index = data.messages.findIndex(function (mMessage) {\r\n                    return mMessage.id === state.chats[data.chatID].messages[i].id;\r\n                });\r\n\r\n                if (index != -1) {\r\n                    Vue.set(state.chats[data.chatID].messages, i, data.messages[index]);\r\n                    data.messages.splice(index, 1);\r\n                    if (data.messages.length == 0) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        sortChatMessagesByDate(state, chatID) {\r\n\r\n            function compareChatMessagesByDate(a, b) {\r\n                let dateA = a.date;\r\n                let dateB = b.date;\r\n\r\n                if (dateA === null) {\r\n                    return 1;\r\n                } else if (dateB === null) {\r\n                    return -1;\r\n                }\r\n                if (dateB < dateA) {\r\n                    return 1;\r\n                }\r\n                if (dateB > dateA) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chats[chatID].messages.sort(compareChatMessagesByDate);\r\n        },\r\n        addChatToShow(state, chatID) {\r\n            if (-1 == state.chatsToShowIDs.findIndex(id => id == chatID)) {\r\n                state.chatsToShowIDs.push(chatID);\r\n            }\r\n        },\r\n        sortChatsToShowByLastMessage(state) {\r\n            function compareChatsByLastMessageDate(a, b) {\r\n                let chatALastMessageDate = null;\r\n                let chatBLastMessageDate = null;\r\n\r\n                if(state.chats[a].messages[state.chats[a].messages.length - 1]){\r\n                    chatALastMessageDate = state.chats[a].messages[state.chats[a].messages.length - 1].date;\r\n                }\r\n\r\n                if(state.chats[b].messages[state.chats[b].messages.length - 1]){\r\n                    chatBLastMessageDate = state.chats[b].messages[state.chats[b].messages.length - 1].date;\r\n                }\r\n\r\n                if (chatALastMessageDate < chatBLastMessageDate) {\r\n                    return 1;\r\n                }\r\n                if (chatALastMessageDate > chatBLastMessageDate) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }\r\n\r\n            state.chatsToShowIDs.sort(compareChatsByLastMessageDate);\r\n        },\r\n\r\n        setUsernameFilter(state, usernameFilter) {\r\n            state.usernameFilter = usernameFilter;\r\n        },\r\n\r\n        setChatListListener(state, chatListListener) {\r\n            state.chatListListener = chatListListener;\r\n        },\r\n\r\n        pushChatMessages(state, data) {\r\n            data.messages.forEach((mp) => {\r\n                if (mp.date != null && mp.date != undefined) {\r\n                    if (state.chats[data.chatID].messages.length == 0) {\r\n                        Vue.set(state.chats[data.chatID].messages, 0, mp);\r\n                    } else {\r\n                        let alreadyAdded = false;\r\n\r\n                        for (let i = state.chats[data.chatID].messages.length - 1; i >= 0; i--) {\r\n                            if (mp.date != null && mp.date != undefined && (\r\n                                (state.chats[data.chatID].messages[i].date < mp.date && !state.chats[data.chatID].messages[i + 1] && state.chats[data.chatID].messages[i].id != mp.id)\r\n                                || (state.chats[data.chatID].messages[i].date < mp.date && state.chats[data.chatID].messages[i + 1].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id && state.chats[data.chatID].messages[i + 1].id != mp.id))) {\r\n                                state.chats[data.chatID].messages.splice(i + 1, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            } else if (mp.date != null && mp.date != undefined && i == 0 && state.chats[data.chatID].messages[i].date > mp.date && state.chats[data.chatID].messages[i].id != mp.id) {\r\n                                state.chats[data.chatID].messages.splice(i, 0, mp);\r\n                                alreadyAdded = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!alreadyAdded && state.chats[data.chatID].messages.length == 0) {\r\n                            state.chats[data.chatID].messages.push(mp);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            //state.chats[data.chatID].messages = state.chats[data.chatID].messages.concat(data.messages);\r\n        }\r\n    },\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init chats state info with the appropriate data                          >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                context.dispatch('createChatListeners', context.getters['user/getChats'])\r\n                    .then(() => {\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatListChange ~                                                    >\r\n        // To manage the event of changes in a chat-list                               >\r\n        // parameters required: user whose chat list we are managing                   >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatListChange(context, user) {\r\n            return new Promise(async function (resolve, reject) {\r\n\r\n                for (const chatID of user.chats) {\r\n                    if (-1 == context.getters.getChatsToShowIDs.findIndex(id => id == chatID) &&\r\n                        (!context.state.chats.hasOwnProperty(chatID) || context.state.chats[chatID].messages.length == 0)) {\r\n                        // It is new\r\n                        await context.dispatch('database/getChatByID', chatID)\r\n                            .then(async (chat) => {\r\n                                chat = {\r\n                                    ...chat,\r\n                                    'messages': []\r\n                                }\r\n\r\n                                let userID;\r\n\r\n                                if (chat.users[0] == context.getters['user/getID']) {\r\n                                    userID = chat.users[1];\r\n                                } else {\r\n                                    userID = chat.users[0];\r\n                                }\r\n\r\n                                await context.dispatch('users/getUserByID', userID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChat\", chat);\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n\r\n\r\n                                // Create messages listener\r\n                                await context.dispatch('database/createChatMessagesListener', chatID)\r\n                                    .then(() => {\r\n                                        context.commit(\"addChatToShow\", chat.id);\r\n                                        context.commit(\"sortChatsToShowByLastMessage\");\r\n                                    })\r\n                                    .catch((error) => {\r\n                                        reject(error);\r\n                                    });\r\n\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n\r\n                    }\r\n                }\r\n                resolve();\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ manageChatMessagesChange ~                                                >\r\n        // To manage the event of changes in user chat messages                        >\r\n        // parameters required: chatMessages                                           >\r\n        //----------------------------------------------------------------------------->\r\n        manageChatMessagesChange(context, chatMessages) {\r\n            return new Promise(function (resolve) {\r\n                    context.commit('addChatMessagesListener', chatMessages.listener);\r\n\r\n                    let newMessages = [];\r\n                    let modifiedMessagesToRead = [];\r\n                    let modifiedMessagesDated = [];\r\n\r\n                    chatMessages.messages.forEach((m) => {\r\n                        if (m.change == \"added\" && m.date) {\r\n                            newMessages.push(m);\r\n                        } else if (m.change == \"modified\" && m.read && m.date) {\r\n                            modifiedMessagesToRead.push(m);\r\n                        } else if (m.change == \"modified\" && !m.read && m.date) {\r\n                            modifiedMessagesDated.push(m);\r\n                        }\r\n                    });\r\n\r\n                    if (newMessages.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: newMessages});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesDated.length > 0) {\r\n                        context.commit('pushChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesDated});\r\n                        //context.commit(\"sortChatMessagesByDate\", chatMessages.id);\r\n                    }\r\n                    if (modifiedMessagesToRead.length > 0) {\r\n                        context.commit('updateChatMessages', {chatID: chatMessages.id, messages: modifiedMessagesToRead});\r\n                    }\r\n\r\n                    context.commit(\"sortChatsToShowByLastMessage\");\r\n                    resolve();\r\n                }\r\n            );\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ setChatMessagesToReadByChatID ~                                           >\r\n        // To set messages in chat to read state                                       >\r\n        // parameters required: chatID                                                 >\r\n        //----------------------------------------------------------------------------->\r\n        setChatMessagesToReadByChatID(context, chatID) {\r\n            return new Promise(function (resolve, reject) {\r\n\r\n                let unreadMessages = context.getters.getUnreadMessagesByChatID(chatID);\r\n\r\n                context.dispatch('database/setMessagesToRead', {chatID: chatID, messages: unreadMessages})\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ sendNewChatMessage ~                                                      >\r\n        // To send a chat message                                                      >\r\n        // parameters required: {chatID, users, messageText}                           >\r\n        //----------------------------------------------------------------------------->\r\n        sendNewChatMessage(context, data) {\r\n            return new Promise(function (resolve, reject) {\r\n                let chat = context.getters.getChatByID(data.chatID);\r\n\r\n                let result;\r\n\r\n                if (context.getters.getChatByID(data.chatID).messages.length == 0) {\r\n                    result = context.dispatch('database/addChat', {id: data.chatID, users: chat.users});\r\n                } else {\r\n                    result = Promise.resolve();\r\n                }\r\n\r\n                result.then(() => {\r\n                    context.dispatch('database/addMessagesToChat', {\r\n                        chatID: data.chatID,\r\n                        message: {sender: context.getters['user/getID'], text: data.messageText}\r\n                    }).then(function () {\r\n                        resolve();\r\n                    }).catch((error) => {\r\n                        reject(error);\r\n                    });\r\n                }).catch((error) => {\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ createChatListeners ~                                                     >\r\n        // To create listeners for the chats of the user                               >\r\n        //----------------------------------------------------------------------------->\r\n        createChatListeners: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/createAccountListener', context.getters['user/getID'])\r\n                    .then(() => {\r\n                        if (context.state.chatListListener != null && context.state.chatListListener != undefined) {\r\n                            context.state.chatListListener();\r\n                        }\r\n                        context.commit('setChatListListener', user.listener);\r\n                        resolve();\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport Constants from \"../Constants\";\r\nimport database from \"./database\";\r\nimport permissions from \"./permissions\";\r\nimport users from \"./users.js\";\r\nimport user from \"./user.js\";\r\n\r\n\r\n////////////////////////////////////////////////////////\r\n//-----               APP RANKING                -----//\r\n////////////////////////////////////////////////////////\r\n\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        database,\r\n        permissions,\r\n        users,\r\n        user\r\n    },\r\n    state: {\r\n        lastUserShowed: -1,\r\n        rankingUsers: [],\r\n        rankingUsersIDs: [],\r\n        rankingUser: null\r\n},\r\n    getters: {\r\n\r\n        getRankingUsersToShow: (state, getters) => {\r\n            let rus = [];\r\n\r\n            let i = 0;\r\n            state.rankingUsersIDs.forEach(uid => {\r\n                let ru = {\r\n                    ...getters['users/getUserByID'](uid)\r\n                };\r\n\r\n                ru[\"score\"] = state.rankingUsers[i].score;\r\n                ru[\"position\"] = state.rankingUsers[i].position;\r\n\r\n                rus.push(ru);\r\n                i++;\r\n            });\r\n\r\n            return rus;\r\n        },\r\n        getLastUserShowed: (state) => {\r\n            return state.lastUserShowed;\r\n        },\r\n        getRankedUserByIndex: (state) => (index) => {\r\n            return state.rankingUsers[index];\r\n        },\r\n        getRankingUsers: (state) => {\r\n            return state.rankingUsers;\r\n        }\r\n},\r\n    mutations: {\r\n        resetState(state) {\r\n            state.lastUserShowed = -1;\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n            state.rankingUser = null;\r\n        },\r\n        setRankingUser(state, rankingUser) {\r\n            state.rankingUser = rankingUser;\r\n        },\r\n        setRankingUsers(state, rankingUsers) {\r\n            rankingUsers.forEach(r => {\r\n                state.rankingUsers.push(r);\r\n            });\r\n        },\r\n        resetRankingUsers(state) {\r\n            state.rankingUsers.splice(0, state.rankingUsers.length);\r\n        },\r\n        resetRankingUsersIDs(state) {\r\n            state.rankingUsersIDs.splice(0, state.rankingUsersIDs.length);\r\n        },\r\n\r\n        setLastUserShowed(state, lastUserShowed) {\r\n            state.lastUserShowed = lastUserShowed;\r\n        },\r\n        addRankingUserID(state, rankingUserID) {\r\n            if (-1 == state.rankingUsersIDs.findIndex(id => {\r\n                return id == rankingUserID;\r\n            })) {\r\n                state.rankingUsersIDs.push(rankingUserID);\r\n            }\r\n        }\r\n},\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initState ~                                                               >\r\n        // To init ranking state info with the appropriate data                        >\r\n        //----------------------------------------------------------------------------->\r\n        initState(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('resetState')\r\n                    .then(() => {\r\n                        context.dispatch('getRankingUsers')\r\n                            .then(() => {\r\n                                resolve();\r\n                            })\r\n                            .catch((error) => {\r\n                                reject(error)\r\n                            });\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error)\r\n                    });\r\n            });\r\n\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getRankingUsers ~                                                         >\r\n        // To get top 100 ranking users and current user position in ranking           >\r\n        //----------------------------------------------------------------------------->\r\n        getRankingUsers(context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/getTop100RankingUsers')\r\n                    .then((top100Users) => {\r\n                        let userID = context.getters['user/getID'];\r\n\r\n                        let userIndex = top100Users.findIndex(user => {\r\n                            return user.id == userID;\r\n                        });\r\n\r\n                        context.commit('setRankingUsers', top100Users);\r\n\r\n                        if (userIndex == -1) {\r\n                            context.dispatch('database/getUserRankingPositionByID', userID)\r\n                                .then((user) => {\r\n                                    context.commit('setRankingUser', user);\r\n                                    resolve();\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getPagedRankingUsers ~                                                    >\r\n        // To get page-size users from the group of ranking users retrieved            >\r\n        //----------------------------------------------------------------------------->\r\n        getPagedRankingUsers(context) {\r\n            return new Promise(async function (resolve, reject) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                let pageEnding = newUserShowed + Constants.RANKING_PAGE_SIZE;\r\n                if (newUserShowed == context.getters.getRankingUsers) {\r\n                    resolve(false);\r\n                }\r\n                while (newUserShowed < pageEnding && newUserShowed < context.getters.getRankingUsers.length) {\r\n                    let user = context.getters.getRankedUserByIndex(newUserShowed);\r\n\r\n                    await context.dispatch('users/getUserByID', user.id)\r\n                        .then(() => {\r\n                            context.commit(\"addRankingUserID\", user.id);\r\n                        })\r\n                        .catch((error) => {\r\n                            reject(error);\r\n                        });\r\n                    newUserShowed++;\r\n                }\r\n\r\n                context.commit('setLastUserShowed', newUserShowed - 1);\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ areThereMoreRankingUsersToShow ~                                          >\r\n        // To check if there are ranking users left to show                            >\r\n        //----------------------------------------------------------------------------->\r\n        areThereMoreRankingUsersToShow(context) {\r\n            return new Promise(async function (resolve) {\r\n                let newUserShowed = context.getters.getLastUserShowed + 1;\r\n                if (newUserShowed < context.getters.getRankingUsers.length) {\r\n                    resolve(true);\r\n                } else {\r\n                    resolve(false);\r\n                }\r\n            });\r\n        },\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset state info                                                         >\r\n        //----------------------------------------------------------------------------->\r\n        resetState(context) {\r\n            return new Promise(function (resolve) {\r\n                context.commit('resetState');\r\n                resolve();\r\n            });\r\n        }\r\n}\r\n}","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex);\r\n\r\nimport users from \"./modules/users\";\r\nimport events from \"./modules/events\";\r\nimport user from \"./modules/user\";\r\nimport chats from \"./modules/chats\";\r\nimport ranking from \"./modules/ranking\";\r\nimport database from \"./modules/database\";\r\nimport permissions from \"./modules/permissions\";\r\n\r\nexport default new Vuex.Store({\r\n    modules: {\r\n        user,\r\n        users,\r\n        events,\r\n        chats,\r\n        ranking,\r\n        database,\r\n        permissions\r\n    },\r\n    state: {\r\n        appInfoLoaded: false\r\n},\r\n    getters: {\r\n        getAppInfoLoaded: (state) => {\r\n            return state.appInfoLoaded;\r\n        }\r\n},\r\n    mutations: {\r\n        setAppInfoLoaded(state, appInfoLoaded) {\r\n            state.appInfoLoaded = appInfoLoaded;\r\n        }\r\n},\r\n    actions: {\r\n        //----------------------------------------------------------------------------->\r\n        // ~ getLoggedUser ~                                                           >\r\n        // To get user logged                                                          >\r\n        //----------------------------------------------------------------------------->\r\n        getLoggedUser: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('database/isUserAuth')\r\n                    .then((user) => {\r\n                        resolve(user);\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error(error);\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ resetState ~                                                              >\r\n        // To reset all modules state info                                             >\r\n        //----------------------------------------------------------------------------->\r\n        resetAppState: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                if (context.getters.getAppInfoLoaded) {\r\n                    let promises = [];\r\n\r\n                    promises.push(context.dispatch('user/resetState'));\r\n                    promises.push(context.dispatch('users/resetState'));\r\n                    promises.push(context.dispatch('chats/resetState'));\r\n                    promises.push(context.dispatch('events/resetState'));\r\n                    promises.push(context.dispatch('ranking/resetState'));\r\n                    promises.push(context.dispatch('permissions/resetState'));\r\n\r\n                    Promise.all(promises).then(() => {\r\n                        console.log('state successfully reseted.');\r\n                        context.commit('setAppInfoLoaded', false);\r\n                        resolve();\r\n                    })\r\n                        .catch((error) => {\r\n                            console.error(error);\r\n                            console.log('Error resetting state.');\r\n                            reject(this.$i18n.t('messages.ERROR_GENERIC_PROBLEM'));\r\n                        });\r\n                } else {\r\n                    resolve();\r\n                }\r\n            });\r\n        },\r\n\r\n\r\n        //----------------------------------------------------------------------------->\r\n        // ~ initAppInfo ~                                                             >\r\n        // To init the necessary info to init the app for a logged user                >\r\n        //----------------------------------------------------------------------------->\r\n        initAppInfo: function (context) {\r\n            return new Promise(function (resolve, reject) {\r\n                context.dispatch('user/isUserLogged')\r\n                    .then((isUserLogged) => {\r\n                        if (isUserLogged && !context.getters.getAppInfoLoaded) {\r\n                            context.dispatch('user/initState')\r\n                                .then(() => {\r\n                                    console.log('user module state successfully initiated.');\r\n                                    context.dispatch('chats/initState')\r\n                                        .then(() => {\r\n                                            console.log('chats module state successfully initiated.');\r\n                                            context.dispatch('ranking/initState')\r\n                                                .then(() => {\r\n                                                    console.log('ranking module state successfully initiated.');\r\n                                                    context.dispatch('events/initState')\r\n                                                        .then(() => {\r\n                                                            console.log('events module state successfully initiated.');\r\n                                                            context.commit('setAppInfoLoaded', true);\r\n                                                            resolve();\r\n                                                        })\r\n                                                        .catch((error) => {\r\n                                                            reject(error);\r\n                                                        });\r\n                                                })\r\n                                                .catch((error) => {\r\n                                                    reject(error);\r\n                                                });\r\n                                        })\r\n                                        .catch((error) => {\r\n                                            reject(error);\r\n                                        });\r\n\r\n                                })\r\n                                .catch((error) => {\r\n                                    reject(error);\r\n                                });\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log('Error initiating users module state.');\r\n                        reject(error);\r\n                    });\r\n            })\r\n\r\n        }\r\n}\r\n});\r\n","import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport firebase from \"firebase\";\r\nimport Home from './views/Home.vue'\r\nimport store from './store/store.js'\r\n\r\nVue.use(Router)\r\n\r\nconst router = new Router({\r\n    /*mode: 'history',*/\r\n    base: process.env.BASE_URL,\r\n    routes: [\r\n        {\r\n            //To redirect all routes that do not exist to /home\r\n            path: '*',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            //To redirect root route to /home\r\n            path: '/',\r\n            redirect: '/home'\r\n        },\r\n        {\r\n            path: '/home',\r\n            name: 'home',\r\n            component: Home\r\n        },\r\n        {\r\n            path: '/login',\r\n            name: 'login',\r\n            component: () => import('./views/Accounts/Login.vue')\r\n        },\r\n        {\r\n            path: '/sign-up',\r\n            name: 'signUp',\r\n            component: () => import('./views/Accounts/SignUp.vue')\r\n        },\r\n        {\r\n            path: '/email-verification',\r\n            name: 'emailVerification',\r\n            component: () => import('./views/Accounts/EmailVerification.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-profile-info',\r\n            name: 'fillYourProfileInfo',\r\n            component: () => import('./views/Accounts/FillYourProfileInfo.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/fill-your-languages',\r\n            name: 'fillYourLanguages',\r\n            component: () => import('./views/Accounts/FillYourLanguages.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/set-your-profile-image',\r\n            name: 'setYourProfileImage',\r\n            component: () => import('./views/Accounts/SetYourProfileImage.vue'),\r\n            meta: {\r\n                requiresAuth: true\r\n            }\r\n        }, {\r\n            path: '/send-change-password-email',\r\n            name: 'sendChangePasswordEmail',\r\n            component: () => import('./views/Accounts/SendChangePasswordEmail.vue'),\r\n            meta: {\r\n                requiresAuth: false\r\n            }\r\n        },\r\n        {\r\n            path: '/dashboard',\r\n            name: 'dashboard',\r\n            redirect: {name: 'profileHome'},\r\n            meta: {requiresAuth: true},\r\n            component: () => import('./views/Dashboard.vue'),\r\n            children: [\r\n                {\r\n                    path: 'ranking',\r\n                    name: 'rankingHome',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/Ranking/RankingHome.vue')\r\n                },\r\n                {\r\n                    path: 'ranking/user/:id/',\r\n                    name: 'userProfileRanking',\r\n                    meta: {requiresAuth: true, menu: 'ranking'},\r\n                    component: () => import('./views/UserProfile.vue')\r\n                },\r\n                {\r\n                    path: 'events',\r\n                    name: 'eventsHome',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventsHome.vue')\r\n                },\r\n                {\r\n                    path: 'event/:id/',\r\n                    name: 'eventDescription',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventDescription.vue')\r\n                },\r\n                {\r\n                    path: 'event/:id/edit',\r\n                    name: 'eventEdit',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventEdit.vue')\r\n                },\r\n                {\r\n                    path: 'events/create',\r\n                    name: 'eventCreate',\r\n                    meta: {requiresAuth: true, menu: 'events'},\r\n                    component: () => import('./views/Events/EventCreate.vue')\r\n                },\r\n                {\r\n                    path: 'search',\r\n                    name: 'searchHome',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchHome.vue')\r\n                },\r\n                {\r\n                    path: 'search/filter',\r\n                    name: 'searchFilter',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/Search/SearchFilter.vue')\r\n                },\r\n                {\r\n                    path: 'search/user/:id/',\r\n                    name: 'userProfileSearch',\r\n                    meta: {requiresAuth: true, menu: 'search'},\r\n                    component: () => import('./views/UserProfile.vue')\r\n                },\r\n                {\r\n                    path: 'chats',\r\n                    name: 'chatHome',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatHome.vue')\r\n                },\r\n                {\r\n                    path: 'chats/chat/:id/',\r\n                    name: 'chatWithUser',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/Chats/ChatWithUser.vue')\r\n                },\r\n                {\r\n                    path: 'chats/user/:id/',\r\n                    name: 'userProfileChat',\r\n                    meta: {requiresAuth: true, menu: 'chats'},\r\n                    component: () => import('./views/UserProfile.vue')\r\n                },\r\n                {\r\n                    path: 'profile',\r\n                    name: 'profileHome',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileHome.vue')\r\n                },\r\n                {\r\n                    path: 'profile/:id/edit',\r\n                    name: 'profileEdit',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Profile/ProfileEdit.vue')\r\n                },\r\n                {\r\n                    path: 'settings',\r\n                    name: 'settings',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsHome.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account',\r\n                    name: 'settingsAccount',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccount.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/name-and-last-name',\r\n                    name: 'settingsAccountEditNameAndLastName',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditNameAndLastName.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/email',\r\n                    name: 'settingsAccountEditEmail',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditEmail.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/password-verification',\r\n                    name: 'settingsAccountPasswordVerification',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountPasswordVerification.vue')\r\n                },\r\n                {\r\n                    path: 'settings/account/edit/password',\r\n                    name: 'settingsAccountEditPassword',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsAccountEditPassword.vue')\r\n                },\r\n                {\r\n                    path: 'settings/language',\r\n                    name: 'settingsLanguage',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsLanguage.vue')\r\n                },\r\n                {\r\n                    path: 'settings/permissions',\r\n                    name: 'settingsPermissions',\r\n                    meta: {requiresAuth: true, menu: 'profile'},\r\n                    component: () => import('./views/Settings/SettingsPermissions.vue')\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n});\r\n\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n    const currentUser = firebase.auth().currentUser;\r\n    const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\r\n    if (requiresAuth && !currentUser) {\r\n        next('home');\r\n    } else if ((requiresAuth && currentUser && (to.name !== from.name) && (!to.path.startsWith('/dashboard') || !from.path.startsWith('/dashboard'))) || (!requiresAuth && currentUser)) {\r\n        store.dispatch('user/getRegistrationState').then(registrationState => {\r\n            if (to.path.startsWith('/' + registrationState)) {\r\n                next()\r\n            } else if (from.path.startsWith('/' + registrationState)) {\r\n                next({name: from.name});\r\n            } else {\r\n                next({path: '/' + registrationState});\r\n            }\r\n        });\r\n        //next()\r\n    }\r\n    else {\r\n        next();\r\n    }\r\n\r\n});\r\n\r\nexport default router;\r\n","/* eslint-disable no-console */\n\nimport { register } from 'register-service-worker'\n\nif (process.env.NODE_ENV === 'production') {\n  register(`${process.env.BASE_URL}firebase-messaging-sw.js`, {\n    ready () {\n      console.log(\n        'App is being served from cache by a service worker.\\n' +\n        'For more details, visit https://goo.gl/AFskqB'\n      )\n    },\n    registered () {\n      console.log('Service worker has been registered.')\n    },\n    cached () {\n      console.log('Content has been cached for offline use.')\n    },\n    updatefound () {\n      console.log('New content is downloading.')\n    },\n    updated () {\n      console.log('New content is available; please refresh.')\n    },\n    offline () {\n      console.log('No internet connection found. App is running in offline mode.')\n    },\n    error (error) {\n      console.error('Error during service worker registration:', error)\n    }\n  })\n}\n","import Vue from 'vue';\nimport Vuetify, {VTextField} from 'vuetify/lib';\n\nVue.use(Vuetify);\nVue.component('v-text-field', VTextField);\n\nexport default new Vuetify({\n    icons: {\n        iconfont: 'mdi'\n    },\n    theme: {\n        themes: {\n            light: {\n                primary: '#00abba',\n                secondary: '#003c4d',\n                thirdary: '#017394',\n                accent: '#82B1FF',\n                error: '#FF5252',\n                info: '#2196F3',\n                success: '#4CAF50',\n                warning: '#FFC107'\n            }\n        }\n    },\n    components: {\n        VTextField\n    }\n});\n","import 'babel-polyfill'\r\nimport '@babel/polyfill'\r\nimport Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store/store'\r\nimport './registerServiceWorker'\r\nimport firebase from \"firebase\";\r\nimport VueChatScroll from 'vue-chat-scroll'\r\nVue.use(VueChatScroll)\r\nimport VueI18n from 'vue-i18n'\r\nVue.use(VueI18n)\r\nimport * as VueGoogleMaps from \"vue2-google-maps\";\r\nimport './assets/css/main.css';\r\nimport i18n from \"./i18n\";\r\nimport vuetify from '@/plugins/vuetify';\r\n\r\nVue.use(VueGoogleMaps, {\r\n  load: {\r\n    key: \"AIzaSyBYhPYAZkG6ML2kRArdK8xITPrZWzF0JSw\",\r\n    libraries: \"places\" // necessary for places input\r\n  }\r\n});\r\n\r\nVue.config.productionTip = false\r\n\r\nlet app = '';\r\n\r\nlet config = {\r\n  apiKey: \"AIzaSyABGil2afckXxQ127FS8fW6y5phy1wzd6g\",\r\n  authDomain: \"tfg-vue-m3m.firebaseapp.com\",\r\n  databaseURL: \"https://tfg-vue-m3m.firebaseio.com\",\r\n  projectId: \"tfg-vue-m3m\",\r\n  storageBucket: \"tfg-vue-m3m.appspot.com\",\r\n  messagingSenderId: \"144506012173\",\r\n  appId: \"1:144506012173:web:8a58aa4b50d8b336184b44\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\n// Initialize Cloud Firestore through Firebase\r\nlet db = firebase.firestore();\r\n\r\nconst storage = firebase.storage()\r\n\r\nlet messaging = null;\r\ntry {\r\n  messaging = firebase.messaging()\r\n}\r\ncatch (e) {\r\n  console.log(\"This browser does not support firebase messaging.\")\r\n}\r\n\r\nexport default {\r\n  db,\r\n  storage,\r\n  messaging,\r\n  i18n\r\n};\r\n\r\n\r\nfirebase.auth().onAuthStateChanged(() => {\r\n  if (!app) {\r\n    app = new Vue({\r\n      router,\r\n      store,\r\n      i18n,\r\n      render: h => h(App),\r\n      vuetify,\r\n      components: { App }\r\n    }).$mount('#app');\r\n  }\r\n})\r\n\r\nimport VuetifyGoogleAutocomplete from 'vuetify-google-autocomplete';\r\nVue.use(VuetifyGoogleAutocomplete, {\r\n  apiKey: 'AIzaSyBYhPYAZkG6ML2kRArdK8xITPrZWzF0JSw',\r\n  language: i18n.locale,\r\n});\r\n","module.exports = __webpack_public_path__ + \"img/WhiteLogoWeBabble.7ac0fe89.png\";"],"sourceRoot":""}